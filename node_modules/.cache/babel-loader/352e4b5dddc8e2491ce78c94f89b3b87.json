{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/email/inbox/InboxBody.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Loader from '../../common/Loader';\nimport { isIterableArray } from '../../../helpers/utils';\nimport EmailRow from './InboxRow';\nimport { Alert, CardBody } from 'reactstrap';\nimport classNames from 'classnames';\nimport { EmailContext } from '../../../context/Context';\nimport useFakeFetch from '../../../hooks/useFakeFetch';\nimport rawEmails from '../../../data/email/emails';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\n\nconst InboxTitle = ({\n  className,\n  children,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(\"h5\", {\n  className: classNames('fs-0 px-3 pt-3 pb-2 mb-0 border-bottom border-200', className),\n  ...rest,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 3\n}, this);\n\n_c = InboxTitle;\nInboxTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string\n};\n\nconst InboxBody = ({\n  isSelectedItem,\n  toggleSelectedItem,\n  currentItems\n}) => {\n  _s();\n\n  // Context\n  const {\n    emails,\n    setEmails\n  } = useContext(EmailContext); // State\n\n  const {\n    loading,\n    data\n  } = useFakeFetch(rawEmails);\n  const unreadEmails = emails.filter(email => !email.read && currentItems.includes(email.id));\n  const otherEmails = emails.filter(email => email.read && currentItems.includes(email.id));\n  useEffect(() => {\n    setEmails(data);\n  }, [data, setEmails]);\n  return /*#__PURE__*/_jsxDEV(CardBody, {\n    className: \"fs--1 border-top border-200 p-0\",\n    children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n      type: \"border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this) : isIterableArray(emails) ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [isIterableArray(unreadEmails) && /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(InboxTitle, {\n          children: \"Unread\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this), unreadEmails.map(email => /*#__PURE__*/_createElement(EmailRow, { ...email,\n          key: email.id,\n          toggleSelectedItem: toggleSelectedItem,\n          isSelectedItem: isSelectedItem,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }\n        }))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), isIterableArray(otherEmails) && /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(InboxTitle, {\n          children: \"Everything else\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this), otherEmails.map(email => /*#__PURE__*/_createElement(EmailRow, { ...email,\n          key: email.id,\n          toggleSelectedItem: toggleSelectedItem,\n          isSelectedItem: isSelectedItem,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }\n        }))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Alert, {\n      color: \"info\",\n      className: \"mb-0 rounded-0\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"alert-heading\",\n        children: \"Inbox empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-0\",\n        children: \"Emails will be shown here automatically.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InboxBody, \"eAcqLs+uL0BsbrhR7fk8VEleYxs=\", false, function () {\n  return [useFakeFetch];\n});\n\n_c2 = InboxBody;\nInboxBody.propTypes = {\n  isSelectedItem: PropTypes.func.isRequired,\n  toggleSelectedItem: PropTypes.func.isRequired,\n  currentItems: PropTypes.array.isRequired\n};\nexport default InboxBody;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InboxTitle\");\n$RefreshReg$(_c2, \"InboxBody\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/email/inbox/InboxBody.js"],"names":["React","Fragment","useContext","useEffect","PropTypes","Loader","isIterableArray","EmailRow","Alert","CardBody","classNames","EmailContext","useFakeFetch","rawEmails","InboxTitle","className","children","rest","propTypes","node","isRequired","string","InboxBody","isSelectedItem","toggleSelectedItem","currentItems","emails","setEmails","loading","data","unreadEmails","filter","email","read","includes","id","otherEmails","map","func","array"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Loader from '../../common/Loader';\nimport { isIterableArray } from '../../../helpers/utils';\nimport EmailRow from './InboxRow';\nimport { Alert, CardBody } from 'reactstrap';\nimport classNames from 'classnames';\nimport { EmailContext } from '../../../context/Context';\nimport useFakeFetch from '../../../hooks/useFakeFetch';\nimport rawEmails from '../../../data/email/emails';\n\nconst InboxTitle = ({ className, children, ...rest }) => (\n  <h5 className={classNames('fs-0 px-3 pt-3 pb-2 mb-0 border-bottom border-200', className)} {...rest}>\n    {children}\n  </h5>\n);\n\nInboxTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string\n};\n\nconst InboxBody = ({ isSelectedItem, toggleSelectedItem, currentItems }) => {\n  // Context\n  const { emails, setEmails } = useContext(EmailContext);\n\n  // State\n  const { loading, data } = useFakeFetch(rawEmails);\n  const unreadEmails = emails.filter(email => !email.read && currentItems.includes(email.id));\n  const otherEmails = emails.filter(email => email.read && currentItems.includes(email.id));\n\n  useEffect(() => {\n    setEmails(data);\n  }, [data, setEmails]);\n\n  return (\n    <CardBody className=\"fs--1 border-top border-200 p-0\">\n      {loading ? (\n        <Loader type=\"border\" />\n      ) : isIterableArray(emails) ? (\n        <Fragment>\n          {isIterableArray(unreadEmails) && (\n            <Fragment>\n              <InboxTitle>Unread</InboxTitle>\n              {unreadEmails.map(email => (\n                <EmailRow\n                  {...email}\n                  key={email.id}\n                  toggleSelectedItem={toggleSelectedItem}\n                  isSelectedItem={isSelectedItem}\n                />\n              ))}\n            </Fragment>\n          )}\n\n          {isIterableArray(otherEmails) && (\n            <Fragment>\n              <InboxTitle>Everything else</InboxTitle>\n              {otherEmails.map(email => (\n                <EmailRow\n                  {...email}\n                  key={email.id}\n                  toggleSelectedItem={toggleSelectedItem}\n                  isSelectedItem={isSelectedItem}\n                />\n              ))}\n            </Fragment>\n          )}\n        </Fragment>\n      ) : (\n        <Alert color=\"info\" className=\"mb-0 rounded-0\">\n          <h5 className=\"alert-heading\">Inbox empty!</h5>\n          <hr />\n          <p className=\"mb-0\">Emails will be shown here automatically.</p>\n        </Alert>\n      )}\n    </CardBody>\n  );\n};\n\nInboxBody.propTypes = {\n  isSelectedItem: PropTypes.func.isRequired,\n  toggleSelectedItem: PropTypes.func.isRequired,\n  currentItems: PropTypes.array.isRequired\n};\n\nexport default InboxBody;\n"]},"metadata":{},"sourceType":"module"}