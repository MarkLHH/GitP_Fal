{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/common/FalconInput.js\";\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { CustomInput, Input, Label } from 'reactstrap';\nimport uuid from 'uuid/v1';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FalconInput = ({\n  label,\n  labelClassName,\n  custom,\n  onChange,\n  type,\n  ...rest\n}) => {\n  const Tag = custom ? CustomInput : Input;\n  const inputId = uuid();\n\n  if (type === 'file' && custom) {\n    return /*#__PURE__*/_jsxDEV(Tag, {\n      type: type,\n      label: label,\n      onChange: ({\n        target\n      }) => onChange(target.files),\n      ...rest,\n      id: inputId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [!!label && /*#__PURE__*/_jsxDEV(Label, {\n      for: inputId,\n      className: labelClassName,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Tag, {\n      type: type,\n      onChange: ({\n        target\n      }) => onChange(target.value),\n      ...rest,\n      id: inputId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FalconInput;\nFalconInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  labelClassName: PropTypes.string,\n  custom: PropTypes.bool\n};\nFalconInput.defaultProps = {\n  custom: false,\n  type: 'text'\n};\nexport default FalconInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"FalconInput\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/common/FalconInput.js"],"names":["React","Fragment","PropTypes","CustomInput","Input","Label","uuid","FalconInput","label","labelClassName","custom","onChange","type","rest","Tag","inputId","target","files","value","propTypes","func","isRequired","oneOfType","string","number","node","bool","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,KAAtB,EAA6BC,KAA7B,QAA0C,YAA1C;AACA,OAAOC,IAAP,MAAiB,SAAjB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,cAAT;AAAyBC,EAAAA,MAAzB;AAAiCC,EAAAA,QAAjC;AAA2CC,EAAAA,IAA3C;AAAiD,KAAGC;AAApD,CAAD,KAAgE;AAClF,QAAMC,GAAG,GAAGJ,MAAM,GAAGP,WAAH,GAAiBC,KAAnC;AACA,QAAMW,OAAO,GAAGT,IAAI,EAApB;;AAEA,MAAIM,IAAI,KAAK,MAAT,IAAmBF,MAAvB,EAA+B;AAC7B,wBAAO,QAAC,GAAD;AAAK,MAAA,IAAI,EAAEE,IAAX;AAAiB,MAAA,KAAK,EAAEJ,KAAxB;AAA+B,MAAA,QAAQ,EAAE,CAAC;AAAEQ,QAAAA;AAAF,OAAD,KAAgBL,QAAQ,CAACK,MAAM,CAACC,KAAR,CAAjE;AAAA,SAAqFJ,IAArF;AAA2F,MAAA,EAAE,EAAEE;AAA/F;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE,QAAC,QAAD;AAAA,eACG,CAAC,CAACP,KAAF,iBACC,QAAC,KAAD;AAAO,MAAA,GAAG,EAAEO,OAAZ;AAAqB,MAAA,SAAS,EAAEN,cAAhC;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA,YAFJ,eAME,QAAC,GAAD;AAAK,MAAA,IAAI,EAAEI,IAAX;AAAiB,MAAA,QAAQ,EAAE,CAAC;AAAEI,QAAAA;AAAF,OAAD,KAAgBL,QAAQ,CAACK,MAAM,CAACE,KAAR,CAAnD;AAAA,SAAuEL,IAAvE;AAA6E,MAAA,EAAE,EAAEE;AAAjF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAlBD;;KAAMR,W;AAoBNA,WAAW,CAACY,SAAZ,GAAwB;AACtBR,EAAAA,QAAQ,EAAET,SAAS,CAACkB,IAAV,CAAeC,UADH;AAEtBH,EAAAA,KAAK,EAAEhB,SAAS,CAACoB,SAAV,CAAoB,CAACpB,SAAS,CAACqB,MAAX,EAAmBrB,SAAS,CAACsB,MAA7B,CAApB,CAFe;AAGtBhB,EAAAA,KAAK,EAAEN,SAAS,CAACoB,SAAV,CAAoB,CAACpB,SAAS,CAACqB,MAAX,EAAmBrB,SAAS,CAACuB,IAA7B,CAApB,CAHe;AAItBhB,EAAAA,cAAc,EAAEP,SAAS,CAACqB,MAJJ;AAKtBb,EAAAA,MAAM,EAAER,SAAS,CAACwB;AALI,CAAxB;AAQAnB,WAAW,CAACoB,YAAZ,GAA2B;AACzBjB,EAAAA,MAAM,EAAE,KADiB;AAEzBE,EAAAA,IAAI,EAAE;AAFmB,CAA3B;AAKA,eAAeL,WAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { CustomInput, Input, Label } from 'reactstrap';\nimport uuid from 'uuid/v1';\n\nconst FalconInput = ({ label, labelClassName, custom, onChange, type, ...rest }) => {\n  const Tag = custom ? CustomInput : Input;\n  const inputId = uuid();\n\n  if (type === 'file' && custom) {\n    return <Tag type={type} label={label} onChange={({ target }) => onChange(target.files)} {...rest} id={inputId} />;\n  }\n\n  return (\n    <Fragment>\n      {!!label && (\n        <Label for={inputId} className={labelClassName}>\n          {label}\n        </Label>\n      )}\n      <Tag type={type} onChange={({ target }) => onChange(target.value)} {...rest} id={inputId} />\n    </Fragment>\n  );\n};\n\nFalconInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  labelClassName: PropTypes.string,\n  custom: PropTypes.bool\n};\n\nFalconInput.defaultProps = {\n  custom: false,\n  type: 'text'\n};\n\nexport default FalconInput;\n"]},"metadata":{},"sourceType":"module"}