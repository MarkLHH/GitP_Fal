{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/navbar/NavbarDropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Badge, Card, CardBody, Col, DropdownItem, DropdownMenu, DropdownToggle, Row, Dropdown } from 'reactstrap';\nimport AuthCornerImage from '../../assets/img/illustrations/authentication-corner.png';\nimport { breakpoints, routesSlicer } from '../../helpers/utils';\nimport { topNavbarBreakpoint } from '../../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NavbarDropdown = ({\n  title,\n  items,\n  right,\n  children,\n  handleSetNavbarCollapsed\n}) => {\n  _s();\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggleDropdown = () => setDropdownOpen(prevState => !prevState);\n\n  const findTitleName = name => {\n    return items.find(routes => {\n      if (routes.children) {\n        return routes === null || routes === void 0 ? void 0 : routes.children.some(item => {\n          return item.name === name;\n        });\n      }\n\n      return routes.name === name;\n    }).name;\n  };\n\n  const getTitle = (navItem, index) => {\n    if (navItem.name === 'Inbox') {\n      return findTitleName(navItem.name);\n    }\n\n    if (navItem.name === 'Product list') {\n      return findTitleName(navItem.name);\n    }\n\n    if (navItem.name === 'Login') {\n      return items[index].name;\n    }\n\n    if (navItem.name === 'Wizard') {\n      return 'Special';\n    }\n  };\n\n  const navItemGroup = title !== 'Home' && routesSlicer({\n    routes: items,\n    rows: title === 'Authentication' && 7\n  });\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    nav: true,\n    inNavbar: true,\n    isOpen: dropdownOpen,\n    toggle: toggleDropdown,\n    onMouseOver: () => {\n      let windowWidth = window.innerWidth;\n\n      if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\n        setDropdownOpen(true);\n      }\n    },\n    onMouseLeave: () => {\n      let windowWidth = window.innerWidth;\n\n      if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\n        setDropdownOpen(false);\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n      nav: true,\n      caret: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n      right: right,\n      className: \"dropdown-menu-card mt-0\",\n      children: [items.length > 0 && /*#__PURE__*/_jsxDEV(Card, {\n        className: classNames('shadow-none max-h-dropdown', {\n          'navbar-card-pages': title === 'Pages',\n          'navbar-card-auth': title === 'Authentication'\n        }),\n        children: [title === 'Authentication' && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: AuthCornerImage,\n          alt: \"\",\n          className: \"position-absolute b-0 r-0\",\n          width: 130\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          className: classNames('scrollbar px-0 py-2', {\n            'p-0': title === 'Home'\n          }),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nav flex-column\",\n            children: title === 'Home' ? items.map(({\n              to,\n              name\n            }, index) => /*#__PURE__*/_jsxDEV(DropdownItem, {\n              tag: Link,\n              to: to,\n              onClick: handleSetNavbarCollapsed,\n              children: name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 21\n            }, this)) : /*#__PURE__*/_jsxDEV(Row, {\n              noGutters: true,\n              children: navItemGroup.map((groupItem, index) => {\n                return /*#__PURE__*/_jsxDEV(Col, {\n                  xs: 6,\n                  className: classNames('col-xl-3', {\n                    'col-xl-4': title === 'Pages',\n                    'col-xxl-3 col-xl-6  mb-xxl-0 mb-3': title === 'Authentication'\n                  }),\n                  children: groupItem.map((navItem, i) => {\n                    const title = getTitle(navItem, index);\n                    return /*#__PURE__*/_jsxDEV(Fragment, {\n                      children: [title && /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"nav-link  py-1 text-900 font-weight-bold\",\n                        children: title\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 105,\n                        columnNumber: 43\n                      }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n                        tag: Link,\n                        to: navItem.to,\n                        onClick: handleSetNavbarCollapsed,\n                        children: [navItem.name, navItem.badge && /*#__PURE__*/_jsxDEV(Badge, {\n                          color: navItem.badge.color || 'soft-success',\n                          pill: true,\n                          className: \"ml-2\",\n                          children: navItem.badge.text\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 109,\n                          columnNumber: 37\n                        }, this)]\n                      }, i, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 106,\n                        columnNumber: 33\n                      }, this)]\n                    }, `${index}-${i}`, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 104,\n                      columnNumber: 31\n                    }, this);\n                  })\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NavbarDropdown, \"z5Nkh6K+y+CV4vT0AOyJ2ID9tJg=\");\n\n_c = NavbarDropdown;\nNavbarDropdown.propTypes = {\n  title: PropTypes.string.isRequired,\n  handleSetNavbarCollapsed: PropTypes.func,\n  children: PropTypes.node,\n  items: PropTypes.array,\n  right: PropTypes.bool\n};\nNavbarDropdown.defaultProps = {\n  items: [],\n  right: false,\n  children: null\n};\nexport default NavbarDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavbarDropdown\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/navbar/NavbarDropdown.js"],"names":["React","Fragment","useState","PropTypes","classNames","Link","Badge","Card","CardBody","Col","DropdownItem","DropdownMenu","DropdownToggle","Row","Dropdown","AuthCornerImage","breakpoints","routesSlicer","topNavbarBreakpoint","NavbarDropdown","title","items","right","children","handleSetNavbarCollapsed","dropdownOpen","setDropdownOpen","toggleDropdown","prevState","findTitleName","name","find","routes","some","item","getTitle","navItem","index","navItemGroup","rows","windowWidth","window","innerWidth","length","map","to","groupItem","i","badge","color","text","propTypes","string","isRequired","func","node","array","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { Link } from 'react-router-dom';\r\nimport { Badge, Card, CardBody, Col, DropdownItem, DropdownMenu, DropdownToggle, Row, Dropdown } from 'reactstrap';\r\nimport AuthCornerImage from '../../assets/img/illustrations/authentication-corner.png';\r\nimport { breakpoints, routesSlicer } from '../../helpers/utils';\r\nimport { topNavbarBreakpoint } from '../../config';\r\n\r\nconst NavbarDropdown = ({ title, items, right, children, handleSetNavbarCollapsed }) => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const toggleDropdown = () => setDropdownOpen(prevState => !prevState);\r\n\r\n  const findTitleName = name => {\r\n    return items.find(routes => {\r\n      if (routes.children) {\r\n        return routes?.children.some(item => {\r\n          return item.name === name;\r\n        });\r\n      }\r\n      return routes.name === name;\r\n    }).name;\r\n  };\r\n\r\n  const getTitle = (navItem, index) => {\r\n    if (navItem.name === 'Inbox') {\r\n      return findTitleName(navItem.name);\r\n    }\r\n    if (navItem.name === 'Product list') {\r\n      return findTitleName(navItem.name);\r\n    }\r\n    if (navItem.name === 'Login') {\r\n      return items[index].name;\r\n    }\r\n    if (navItem.name === 'Wizard') {\r\n      return 'Special';\r\n    }\r\n  };\r\n\r\n  const navItemGroup =\r\n    title !== 'Home' &&\r\n    routesSlicer({\r\n      routes: items,\r\n      rows: title === 'Authentication' && 7\r\n    });\r\n\r\n  return (\r\n    <Dropdown\r\n      nav\r\n      inNavbar\r\n      isOpen={dropdownOpen}\r\n      toggle={toggleDropdown}\r\n      onMouseOver={() => {\r\n        let windowWidth = window.innerWidth;\r\n        if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\r\n          setDropdownOpen(true);\r\n        }\r\n      }}\r\n      onMouseLeave={() => {\r\n        let windowWidth = window.innerWidth;\r\n        if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\r\n          setDropdownOpen(false);\r\n        }\r\n      }}\r\n    >\r\n      <DropdownToggle nav caret>\r\n        {title}\r\n      </DropdownToggle>\r\n      <DropdownMenu right={right} className=\"dropdown-menu-card mt-0\">\r\n        {items.length > 0 && (\r\n          <Card\r\n            className={classNames('shadow-none max-h-dropdown', {\r\n              'navbar-card-pages': title === 'Pages',\r\n              'navbar-card-auth': title === 'Authentication'\r\n            })}\r\n          >\r\n            {title === 'Authentication' && (\r\n              <img src={AuthCornerImage} alt=\"\" className=\"position-absolute b-0 r-0\" width={130} />\r\n            )}\r\n            <CardBody className={classNames('scrollbar px-0 py-2', { 'p-0': title === 'Home' })}>\r\n              <div className=\"nav flex-column\">\r\n                {title === 'Home' ? (\r\n                  items.map(({ to, name }, index) => (\r\n                    <DropdownItem tag={Link} to={to} key={index} onClick={handleSetNavbarCollapsed}>\r\n                      {name}\r\n                    </DropdownItem>\r\n                  ))\r\n                ) : (\r\n                  <Row noGutters>\r\n                    {navItemGroup.map((groupItem, index) => {\r\n                      return (\r\n                        <Col\r\n                          xs={6}\r\n                          key={index}\r\n                          className={classNames('col-xl-3', {\r\n                            'col-xl-4': title === 'Pages',\r\n                            'col-xxl-3 col-xl-6  mb-xxl-0 mb-3': title === 'Authentication'\r\n                          })}\r\n                        >\r\n                          {groupItem.map((navItem, i) => {\r\n                            const title = getTitle(navItem, index);\r\n\r\n                            return (\r\n                              <Fragment key={`${index}-${i}`}>\r\n                                {title && <div className=\"nav-link  py-1 text-900 font-weight-bold\">{title}</div>}\r\n                                <DropdownItem tag={Link} to={navItem.to} key={i} onClick={handleSetNavbarCollapsed}>\r\n                                  {navItem.name}\r\n                                  {navItem.badge && (\r\n                                    <Badge color={navItem.badge.color || 'soft-success'} pill className=\"ml-2\">\r\n                                      {navItem.badge.text}\r\n                                    </Badge>\r\n                                  )}\r\n                                </DropdownItem>\r\n                              </Fragment>\r\n                            );\r\n                          })}\r\n                        </Col>\r\n                      );\r\n                    })}\r\n                  </Row>\r\n                )}\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n        )}\r\n        {children}\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nNavbarDropdown.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  handleSetNavbarCollapsed: PropTypes.func,\r\n  children: PropTypes.node,\r\n  items: PropTypes.array,\r\n  right: PropTypes.bool\r\n};\r\n\r\nNavbarDropdown.defaultProps = {\r\n  items: [],\r\n  right: false,\r\n  children: null\r\n};\r\n\r\nexport default NavbarDropdown;\r\n"]},"metadata":{},"sourceType":"module"}