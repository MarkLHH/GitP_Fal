{"ast":null,"code":"import _objectSpread from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useState,useEffect}from'react';import classNames from'classnames';import KanbanColumnHeder from'./KanbanColumnHeader';import{KanbanContext}from'../../context/Context';import{Droppable}from'react-beautiful-dnd';import AddAnotherCard from'./AddAnotherCard';import users from'../../data/dashboard/users';import ButtonIcon from'../common/ButtonIcon';import TaskCard from'./TaskCard';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var KanbanColumn=function KanbanColumn(_ref){var kanbanColumnItem=_ref.kanbanColumnItem,index=_ref.index;var _useContext=useContext(KanbanContext),kanbanTaskCards=_useContext.kanbanTaskCards;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showForm=_useState2[0],setShowForm=_useState2[1];useEffect(function(){var kanbanContainer=document.getElementById(\"container-\".concat(index));kanbanContainer.scrollTop=kanbanContainer.scrollHeight;},[showForm,index]);return/*#__PURE__*/_jsxs(\"div\",{className:classNames('kanban-column',{'form-added':showForm}),children:[/*#__PURE__*/_jsx(KanbanColumnHeder,{kanbanColumnItem:kanbanColumnItem}),/*#__PURE__*/_jsx(Droppable,{droppableId:kanbanColumnItem.id,children:function children(provided,snapshot){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",_objectSpread(_objectSpread({className:\"kanban-items-container scrollbar\",id:\"container-\".concat(index),ref:provided.innerRef},provided.droppableProps),{},{children:[kanbanColumnItem.items.map(function(taskCardItemId,taskCardIndex){var taskCard=kanbanTaskCards.find(function(_ref2){var id=_ref2.id;return id===taskCardItemId;});var taskCardImage=taskCard.attachments&&taskCard.attachments.find(function(_ref3){var type=_ref3.type;return type==='image';});var members=taskCard.members&&taskCard.members.map(function(member){return users.find(function(user){return member===user.id;});});return/*#__PURE__*/_jsx(TaskCard,{members:members,taskCardImage:taskCardImage,taskCard:taskCard,taskCardIndex:taskCardIndex,taskCardItemId:taskCardItemId},taskCardItemId);}),showForm&&/*#__PURE__*/_jsx(AddAnotherCard,{kanbanColumnItem:kanbanColumnItem,setShowForm:setShowForm}),provided.placeholder]})),!showForm&&/*#__PURE__*/_jsx(\"div\",{className:\"kanban-column-footer\",children:/*#__PURE__*/_jsx(ButtonIcon,{className:\"btn-add-card text-600 text-decoration-none\",color:\"link\",block:true,icon:\"plus\",iconClassName:\"mr-1\",size:\"sm\",onClick:function onClick(){setShowForm(true);},children:\"Add another card\"})})]});}})]});};export default KanbanColumn;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/kanban/KanbanColumn.js"],"names":["React","useContext","useState","useEffect","classNames","KanbanColumnHeder","KanbanContext","Droppable","AddAnotherCard","users","ButtonIcon","TaskCard","KanbanColumn","kanbanColumnItem","index","kanbanTaskCards","showForm","setShowForm","kanbanContainer","document","getElementById","scrollTop","scrollHeight","id","provided","snapshot","innerRef","droppableProps","items","map","taskCardItemId","taskCardIndex","taskCard","find","taskCardImage","attachments","type","members","member","user","placeholder"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport KanbanColumnHeder from './KanbanColumnHeader';\r\nimport { KanbanContext } from '../../context/Context';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nimport AddAnotherCard from './AddAnotherCard';\r\nimport users from '../../data/dashboard/users';\r\nimport ButtonIcon from '../common/ButtonIcon';\r\nimport TaskCard from './TaskCard';\r\n\r\nconst KanbanColumn = ({ kanbanColumnItem, index }) => {\r\n  const { kanbanTaskCards } = useContext(KanbanContext);\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const kanbanContainer = document.getElementById(`container-${index}`);\r\n    kanbanContainer.scrollTop = kanbanContainer.scrollHeight;\r\n  }, [showForm, index]);\r\n\r\n  return (\r\n    <div className={classNames('kanban-column', { 'form-added': showForm })}>\r\n      <KanbanColumnHeder kanbanColumnItem={kanbanColumnItem} />\r\n      <Droppable droppableId={kanbanColumnItem.id}>\r\n        {(provided, snapshot) => (\r\n          <>\r\n            <div\r\n              className=\"kanban-items-container scrollbar\"\r\n              id={`container-${index}`}\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}\r\n            >\r\n              {kanbanColumnItem.items.map((taskCardItemId, taskCardIndex) => {\r\n                const taskCard = kanbanTaskCards.find(({ id }) => id === taskCardItemId);\r\n\r\n                const taskCardImage = taskCard.attachments && taskCard.attachments.find(({ type }) => type === 'image');\r\n\r\n                const members =\r\n                  taskCard.members &&\r\n                  taskCard.members.map(member => {\r\n                    return users.find(user => member === user.id);\r\n                  });\r\n\r\n                return (\r\n                  <TaskCard\r\n                    members={members}\r\n                    taskCardImage={taskCardImage}\r\n                    taskCard={taskCard}\r\n                    key={taskCardItemId}\r\n                    taskCardIndex={taskCardIndex}\r\n                    taskCardItemId={taskCardItemId}\r\n                  />\r\n                );\r\n              })}\r\n              {showForm && <AddAnotherCard kanbanColumnItem={kanbanColumnItem} setShowForm={setShowForm} />}\r\n              {provided.placeholder}\r\n            </div>\r\n            {!showForm && (\r\n              <div className=\"kanban-column-footer\">\r\n                <ButtonIcon\r\n                  className=\"btn-add-card text-600 text-decoration-none\"\r\n                  color=\"link\"\r\n                  block\r\n                  icon=\"plus\"\r\n                  iconClassName=\"mr-1\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setShowForm(true);\r\n                  }}\r\n                >\r\n                  Add another card\r\n                </ButtonIcon>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\nKanbanColumn.propTypes = {\r\n  kanbanColumnItem: PropTypes.object.isRequired\r\n};\r\nexport default KanbanColumn;\r\n"]},"metadata":{},"sourceType":"module"}