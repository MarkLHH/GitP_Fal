{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/navbar/NavbarDropdownComponents.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport React, { Fragment, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Badge, Card, CardBody, Col, DropdownItem, DropdownMenu, DropdownToggle, Row, Dropdown } from 'reactstrap';\nimport { breakpoints, isIterableArray, routesSlicer } from '../../helpers/utils';\nimport { topNavbarBreakpoint } from '../../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NavbarDropdownComponents = ({\n  title,\n  items,\n  right,\n  handleSetNavbarCollapsed\n}) => {\n  _s();\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    nav: true,\n    inNavbar: true,\n    isOpen: dropdownOpen,\n    toggle: toggle,\n    onMouseOver: () => {\n      let windowWidth = window.innerWidth;\n\n      if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\n        setDropdownOpen(true);\n      }\n    },\n    onMouseLeave: () => {\n      let windowWidth = window.innerWidth;\n\n      if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\n        setDropdownOpen(false);\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n      nav: true,\n      caret: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n      right: right,\n      className: \"dropdown-menu-card mt-0\",\n      children: isIterableArray(items) && /*#__PURE__*/_jsxDEV(Card, {\n        className: \"navbar-card-components shadow-none\",\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          className: \"max-h-dropdown scrollbar px-0 py-2\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nav flex-column\",\n            children: items.map((groupItem, index) => {\n              const NavItemGroup = routesSlicer({\n                routes: groupItem.children,\n                columns: 4\n              });\n              return /*#__PURE__*/_jsxDEV(Fragment, {\n                children: [index !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"nav-link  py-1 text-900 font-weight-bold\",\n                  children: items[index].name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Row, {\n                  className: index + 1 === items.length ? 'mb-0' : 'mb-3',\n                  noGutters: true,\n                  children: NavItemGroup.map((navItems, i) => {\n                    return /*#__PURE__*/_jsxDEV(Fragment, {\n                      children: /*#__PURE__*/_jsxDEV(Col, {\n                        xs: 6,\n                        xl: 3,\n                        children: navItems.map((navItem, j) => {\n                          return /*#__PURE__*/_jsxDEV(DropdownItem, {\n                            tag: Link,\n                            to: navItem.to,\n                            onClick: handleSetNavbarCollapsed,\n                            children: [navItem.name, navItem.badge && /*#__PURE__*/_jsxDEV(Badge, {\n                              color: navItem.badge.color || 'soft-success',\n                              pill: true,\n                              className: \"ml-2\",\n                              children: navItem.badge.text\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 65,\n                              columnNumber: 41\n                            }, this)]\n                          }, `${index}-${i}-${j}`, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 57,\n                            columnNumber: 37\n                          }, this);\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 54,\n                        columnNumber: 31\n                      }, this)\n                    }, `${index}-${i}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 53,\n                      columnNumber: 29\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NavbarDropdownComponents, \"z5Nkh6K+y+CV4vT0AOyJ2ID9tJg=\");\n\n_c = NavbarDropdownComponents;\nNavbarDropdownComponents.propTypes = {\n  title: PropTypes.string.isRequired,\n  handleSetNavbarCollapsed: PropTypes.func.isRequired,\n  items: PropTypes.array,\n  right: PropTypes.bool\n};\nNavbarDropdownComponents.defaultProps = {\n  items: [],\n  right: false\n};\nexport default NavbarDropdownComponents;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavbarDropdownComponents\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/navbar/NavbarDropdownComponents.js"],"names":["PropTypes","React","Fragment","useState","Link","Badge","Card","CardBody","Col","DropdownItem","DropdownMenu","DropdownToggle","Row","Dropdown","breakpoints","isIterableArray","routesSlicer","topNavbarBreakpoint","NavbarDropdownComponents","title","items","right","handleSetNavbarCollapsed","dropdownOpen","setDropdownOpen","toggle","prevState","windowWidth","window","innerWidth","map","groupItem","index","NavItemGroup","routes","children","columns","name","length","navItems","i","navItem","j","to","badge","color","text","propTypes","string","isRequired","func","array","bool","defaultProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { Fragment, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Badge, Card, CardBody, Col, DropdownItem, DropdownMenu, DropdownToggle, Row, Dropdown } from 'reactstrap';\r\nimport { breakpoints, isIterableArray, routesSlicer } from '../../helpers/utils';\r\nimport { topNavbarBreakpoint } from '../../config';\r\n\r\nconst NavbarDropdownComponents = ({ title, items, right, handleSetNavbarCollapsed }) => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const toggle = () => setDropdownOpen(prevState => !prevState);\r\n\r\n  return (\r\n    <Dropdown\r\n      nav\r\n      inNavbar\r\n      isOpen={dropdownOpen}\r\n      toggle={toggle}\r\n      onMouseOver={() => {\r\n        let windowWidth = window.innerWidth;\r\n        if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\r\n          setDropdownOpen(true);\r\n        }\r\n      }}\r\n      onMouseLeave={() => {\r\n        let windowWidth = window.innerWidth;\r\n        if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\r\n          setDropdownOpen(false);\r\n        }\r\n      }}\r\n    >\r\n      <DropdownToggle nav caret>\r\n        {title}\r\n      </DropdownToggle>\r\n      <DropdownMenu right={right} className=\"dropdown-menu-card mt-0\">\r\n        {isIterableArray(items) && (\r\n          <Card className=\"navbar-card-components shadow-none\">\r\n            <CardBody className=\"max-h-dropdown scrollbar px-0 py-2\">\r\n              <div className=\"nav flex-column\">\r\n                {items.map((groupItem, index) => {\r\n                  const NavItemGroup = routesSlicer({\r\n                    routes: groupItem.children,\r\n                    columns: 4\r\n                  });\r\n\r\n                  return (\r\n                    <Fragment key={index}>\r\n                      {index !== 0 && (\r\n                        <div className=\"nav-link  py-1 text-900 font-weight-bold\">{items[index].name}</div>\r\n                      )}\r\n                      <Row className={index + 1 === items.length ? 'mb-0' : 'mb-3'} noGutters>\r\n                        {NavItemGroup.map((navItems, i) => {\r\n                          return (\r\n                            <Fragment key={`${index}-${i}`}>\r\n                              <Col xs={6} xl={3}>\r\n                                {navItems.map((navItem, j) => {\r\n                                  return (\r\n                                    <DropdownItem\r\n                                      tag={Link}\r\n                                      to={navItem.to}\r\n                                      key={`${index}-${i}-${j}`}\r\n                                      onClick={handleSetNavbarCollapsed}\r\n                                    >\r\n                                      {navItem.name}\r\n                                      {navItem.badge && (\r\n                                        <Badge color={navItem.badge.color || 'soft-success'} pill className=\"ml-2\">\r\n                                          {navItem.badge.text}\r\n                                        </Badge>\r\n                                      )}\r\n                                    </DropdownItem>\r\n                                  );\r\n                                })}\r\n                              </Col>\r\n                            </Fragment>\r\n                          );\r\n                        })}\r\n                      </Row>\r\n                    </Fragment>\r\n                  );\r\n                })}\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n        )}\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nNavbarDropdownComponents.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  handleSetNavbarCollapsed: PropTypes.func.isRequired,\r\n  items: PropTypes.array,\r\n  right: PropTypes.bool\r\n};\r\n\r\nNavbarDropdownComponents.defaultProps = {\r\n  items: [],\r\n  right: false\r\n};\r\n\r\nexport default NavbarDropdownComponents;\r\n"]},"metadata":{},"sourceType":"module"}