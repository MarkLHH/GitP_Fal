{"ast":null,"code":"import _objectSpread from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{Fragment,useContext,useEffect}from'react';import Loader from'../../common/Loader';import{isIterableArray}from'../../../helpers/utils';import EmailRow from'./InboxRow';import{Alert,CardBody}from'reactstrap';import classNames from'classnames';import{EmailContext}from'../../../context/Context';import useFakeFetch from'../../../hooks/useFakeFetch';import rawEmails from'../../../data/email/emails';import{jsx as _jsx}from\"react/jsx-runtime\";import{createElement as _createElement}from\"react\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var InboxTitle=function InboxTitle(_ref){var className=_ref.className,children=_ref.children,rest=_objectWithoutProperties(_ref,[\"className\",\"children\"]);return/*#__PURE__*/_jsx(\"h5\",_objectSpread(_objectSpread({className:classNames('fs-0 px-3 pt-3 pb-2 mb-0 border-bottom border-200',className)},rest),{},{children:children}));};var InboxBody=function InboxBody(_ref2){var isSelectedItem=_ref2.isSelectedItem,toggleSelectedItem=_ref2.toggleSelectedItem,currentItems=_ref2.currentItems;// Context\nvar _useContext=useContext(EmailContext),emails=_useContext.emails,setEmails=_useContext.setEmails;// State\nvar _useFakeFetch=useFakeFetch(rawEmails),loading=_useFakeFetch.loading,data=_useFakeFetch.data;var unreadEmails=emails.filter(function(email){return!email.read&&currentItems.includes(email.id);});var otherEmails=emails.filter(function(email){return email.read&&currentItems.includes(email.id);});useEffect(function(){setEmails(data);},[data,setEmails]);return/*#__PURE__*/_jsx(CardBody,{className:\"fs--1 border-top border-200 p-0\",children:loading?/*#__PURE__*/_jsx(Loader,{type:\"border\"}):isIterableArray(emails)?/*#__PURE__*/_jsxs(Fragment,{children:[isIterableArray(unreadEmails)&&/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(InboxTitle,{children:\"Unread\"}),unreadEmails.map(function(email){return/*#__PURE__*/_createElement(EmailRow,_objectSpread(_objectSpread({},email),{},{key:email.id,toggleSelectedItem:toggleSelectedItem,isSelectedItem:isSelectedItem}));})]}),isIterableArray(otherEmails)&&/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(InboxTitle,{children:\"Everything else\"}),otherEmails.map(function(email){return/*#__PURE__*/_createElement(EmailRow,_objectSpread(_objectSpread({},email),{},{key:email.id,toggleSelectedItem:toggleSelectedItem,isSelectedItem:isSelectedItem}));})]})]}):/*#__PURE__*/_jsxs(Alert,{color:\"info\",className:\"mb-0 rounded-0\",children:[/*#__PURE__*/_jsx(\"h5\",{className:\"alert-heading\",children:\"Inbox empty!\"}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(\"p\",{className:\"mb-0\",children:\"Emails will be shown here automatically.\"})]})});};export default InboxBody;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/email/inbox/InboxBody.js"],"names":["React","Fragment","useContext","useEffect","Loader","isIterableArray","EmailRow","Alert","CardBody","classNames","EmailContext","useFakeFetch","rawEmails","InboxTitle","className","children","rest","InboxBody","isSelectedItem","toggleSelectedItem","currentItems","emails","setEmails","loading","data","unreadEmails","filter","email","read","includes","id","otherEmails","map"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Loader from '../../common/Loader';\nimport { isIterableArray } from '../../../helpers/utils';\nimport EmailRow from './InboxRow';\nimport { Alert, CardBody } from 'reactstrap';\nimport classNames from 'classnames';\nimport { EmailContext } from '../../../context/Context';\nimport useFakeFetch from '../../../hooks/useFakeFetch';\nimport rawEmails from '../../../data/email/emails';\n\nconst InboxTitle = ({ className, children, ...rest }) => (\n  <h5 className={classNames('fs-0 px-3 pt-3 pb-2 mb-0 border-bottom border-200', className)} {...rest}>\n    {children}\n  </h5>\n);\n\nInboxTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string\n};\n\nconst InboxBody = ({ isSelectedItem, toggleSelectedItem, currentItems }) => {\n  // Context\n  const { emails, setEmails } = useContext(EmailContext);\n\n  // State\n  const { loading, data } = useFakeFetch(rawEmails);\n  const unreadEmails = emails.filter(email => !email.read && currentItems.includes(email.id));\n  const otherEmails = emails.filter(email => email.read && currentItems.includes(email.id));\n\n  useEffect(() => {\n    setEmails(data);\n  }, [data, setEmails]);\n\n  return (\n    <CardBody className=\"fs--1 border-top border-200 p-0\">\n      {loading ? (\n        <Loader type=\"border\" />\n      ) : isIterableArray(emails) ? (\n        <Fragment>\n          {isIterableArray(unreadEmails) && (\n            <Fragment>\n              <InboxTitle>Unread</InboxTitle>\n              {unreadEmails.map(email => (\n                <EmailRow\n                  {...email}\n                  key={email.id}\n                  toggleSelectedItem={toggleSelectedItem}\n                  isSelectedItem={isSelectedItem}\n                />\n              ))}\n            </Fragment>\n          )}\n\n          {isIterableArray(otherEmails) && (\n            <Fragment>\n              <InboxTitle>Everything else</InboxTitle>\n              {otherEmails.map(email => (\n                <EmailRow\n                  {...email}\n                  key={email.id}\n                  toggleSelectedItem={toggleSelectedItem}\n                  isSelectedItem={isSelectedItem}\n                />\n              ))}\n            </Fragment>\n          )}\n        </Fragment>\n      ) : (\n        <Alert color=\"info\" className=\"mb-0 rounded-0\">\n          <h5 className=\"alert-heading\">Inbox empty!</h5>\n          <hr />\n          <p className=\"mb-0\">Emails will be shown here automatically.</p>\n        </Alert>\n      )}\n    </CardBody>\n  );\n};\n\nInboxBody.propTypes = {\n  isSelectedItem: PropTypes.func.isRequired,\n  toggleSelectedItem: PropTypes.func.isRequired,\n  currentItems: PropTypes.array.isRequired\n};\n\nexport default InboxBody;\n"]},"metadata":{},"sourceType":"module"}