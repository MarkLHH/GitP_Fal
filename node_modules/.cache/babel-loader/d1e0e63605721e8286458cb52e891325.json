{"ast":null,"code":"import _objectSpread from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import{Card,CardBody,Row}from'reactstrap';import Flex from'../common/Flex';import{isIterableArray}from'../../helpers/utils';import StorageStatusProgressBar from'./StorageStatusProgressBar';import StorageStatusDot from'./StorageStatusDot';import FalconProgress from'../common/FalconProgress';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{createElement as _createElement}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var StorageStatus=function StorageStatus(_ref){var data=_ref.data,className=_ref.className;var totalStorage=data.map(function(d){return d.size;}).reduce(function(total,currentValue){return total+currentValue;},0);var freeStorage=data.find(function(d){return d.name==='Free';}).size;return/*#__PURE__*/_jsx(Card,{className:className,children:/*#__PURE__*/_jsx(CardBody,{tag:Flex,align:\"center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"w-100\",children:[/*#__PURE__*/_jsxs(\"h6\",{className:\"mb-3 text-800\",children:[\"Using Storage \",/*#__PURE__*/_jsxs(\"strong\",{className:\"text-dark\",children:[totalStorage-freeStorage,\" MB \"]}),\"of\",' ',Math.round(totalStorage/1024),\" GB\"]}),/*#__PURE__*/_jsx(FalconProgress,{multi:true,className:\"rounded-soft mb-3\",style:{height:'10px'},children:isIterableArray(data)&&data.map(function(d,index){return/*#__PURE__*/_createElement(StorageStatusProgressBar,_objectSpread(_objectSpread({},d),{},{percentage:d.size*100/totalStorage,isLast:data.length-1===index,key:index}));})}),/*#__PURE__*/_jsx(Row,{className:\"fs--1 font-weight-semi-bold text-500\",children:isIterableArray(data)&&data.map(function(d,index){return/*#__PURE__*/_createElement(StorageStatusDot,_objectSpread(_objectSpread({},d),{},{isFirst:index===0,isLast:data.length-1===index,key:index}));})})]})})});};export default StorageStatus;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/dashboard-alt/StorageStatus.js"],"names":["React","Card","CardBody","Row","Flex","isIterableArray","StorageStatusProgressBar","StorageStatusDot","FalconProgress","StorageStatus","data","className","totalStorage","map","d","size","reduce","total","currentValue","freeStorage","find","name","Math","round","height","index","length"],"mappings":"qGAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,IAAT,CAAeC,QAAf,CAAyBC,GAAzB,KAAoC,YAApC,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,OAASC,eAAT,KAAgC,qBAAhC,CACA,MAAOC,CAAAA,wBAAP,KAAqC,4BAArC,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CACA,MAAOC,CAAAA,cAAP,KAA2B,0BAA3B,C,2IAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAyB,IAAtBC,CAAAA,IAAsB,MAAtBA,IAAsB,CAAhBC,SAAgB,MAAhBA,SAAgB,CAC7C,GAAMC,CAAAA,YAAY,CAAGF,IAAI,CAACG,GAAL,CAAS,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,IAAN,EAAV,EAAsBC,MAAtB,CAA6B,SAACC,KAAD,CAAQC,YAAR,QAAyBD,CAAAA,KAAK,CAAGC,YAAjC,EAA7B,CAA4E,CAA5E,CAArB,CACA,GAAMC,CAAAA,WAAW,CAAGT,IAAI,CAACU,IAAL,CAAU,SAAAN,CAAC,QAAIA,CAAAA,CAAC,CAACO,IAAF,GAAW,MAAf,EAAX,EAAkCN,IAAtD,CAEA,mBACE,KAAC,IAAD,EAAM,SAAS,CAAEJ,SAAjB,uBACE,KAAC,QAAD,EAAU,GAAG,CAAEP,IAAf,CAAqB,KAAK,CAAC,QAA3B,uBACE,aAAK,SAAS,CAAC,OAAf,wBACE,YAAI,SAAS,CAAC,eAAd,yCACgB,gBAAQ,SAAS,CAAC,WAAlB,WAA+BQ,YAAY,CAAGO,WAA9C,UADhB,MAC0F,GAD1F,CAEGG,IAAI,CAACC,KAAL,CAAWX,YAAY,CAAG,IAA1B,CAFH,SADF,cAKE,KAAC,cAAD,EAAgB,KAAK,KAArB,CAAsB,SAAS,CAAC,mBAAhC,CAAoD,KAAK,CAAE,CAAEY,MAAM,CAAE,MAAV,CAA3D,UACGnB,eAAe,CAACK,IAAD,CAAf,EACCA,IAAI,CAACG,GAAL,CAAS,SAACC,CAAD,CAAIW,KAAJ,CAAc,CACrB,mBACE,eAAC,wBAAD,gCACMX,CADN,MAEE,UAAU,CAAGA,CAAC,CAACC,IAAF,CAAS,GAAV,CAAiBH,YAF/B,CAGE,MAAM,CAAEF,IAAI,CAACgB,MAAL,CAAc,CAAd,GAAoBD,KAH9B,CAIE,GAAG,CAAEA,KAJP,GADF,CAQD,CATD,CAFJ,EALF,cAkBE,KAAC,GAAD,EAAK,SAAS,CAAC,sCAAf,UACGpB,eAAe,CAACK,IAAD,CAAf,EACCA,IAAI,CAACG,GAAL,CAAS,SAACC,CAAD,CAAIW,KAAJ,qBACP,eAAC,gBAAD,gCAAsBX,CAAtB,MAAyB,OAAO,CAAEW,KAAK,GAAK,CAA5C,CAA+C,MAAM,CAAEf,IAAI,CAACgB,MAAL,CAAc,CAAd,GAAoBD,KAA3E,CAAkF,GAAG,CAAEA,KAAvF,GADO,EAAT,CAFJ,EAlBF,GADF,EADF,EADF,CA+BD,CAnCD,CA+CA,cAAehB,CAAAA,aAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, CardBody, Row } from 'reactstrap';\r\nimport Flex from '../common/Flex';\r\nimport { isIterableArray } from '../../helpers/utils';\r\nimport StorageStatusProgressBar from './StorageStatusProgressBar';\r\nimport StorageStatusDot from './StorageStatusDot';\r\nimport FalconProgress from '../common/FalconProgress';\r\n\r\nconst StorageStatus = ({ data, className }) => {\r\n  const totalStorage = data.map(d => d.size).reduce((total, currentValue) => total + currentValue, 0);\r\n  const freeStorage = data.find(d => d.name === 'Free').size;\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardBody tag={Flex} align=\"center\">\r\n        <div className=\"w-100\">\r\n          <h6 className=\"mb-3 text-800\">\r\n            Using Storage <strong className=\"text-dark\">{totalStorage - freeStorage} MB </strong>of{' '}\r\n            {Math.round(totalStorage / 1024)} GB\r\n          </h6>\r\n          <FalconProgress multi className=\"rounded-soft mb-3\" style={{ height: '10px' }}>\r\n            {isIterableArray(data) &&\r\n              data.map((d, index) => {\r\n                return (\r\n                  <StorageStatusProgressBar\r\n                    {...d}\r\n                    percentage={(d.size * 100) / totalStorage}\r\n                    isLast={data.length - 1 === index}\r\n                    key={index}\r\n                  />\r\n                );\r\n              })}\r\n          </FalconProgress>\r\n          <Row className=\"fs--1 font-weight-semi-bold text-500\">\r\n            {isIterableArray(data) &&\r\n              data.map((d, index) => (\r\n                <StorageStatusDot {...d} isFirst={index === 0} isLast={data.length - 1 === index} key={index} />\r\n              ))}\r\n          </Row>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nStorageStatus.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      size: PropTypes.number.isRequired,\r\n      color: PropTypes.string.isRequired\r\n    }).isRequired\r\n  )\r\n};\r\n\r\nexport default StorageStatus;\r\n"]},"metadata":{},"sourceType":"module"}