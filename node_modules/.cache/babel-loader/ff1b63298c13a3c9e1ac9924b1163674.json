{"ast":null,"code":"import React,{Fragment}from'react';import{Button,Card,CardHeader,CardBody}from'reactstrap';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import PageHeader from'../common/PageHeader';import FalconCardHeader from'../common/FalconCardHeader';import FalconEditor from'../common/FalconEditor';import ButtonIcon from'../common/ButtonIcon';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var buttonFalconCode=\"['primary', 'success', 'info','danger', 'warning'].map((color, index) => (\\n  <Button color={'falcon-'+color} key={index} className=\\\"mr-2\\\" >\\n    {color}\\n  </Button>\\n))\";var buttonCode=\"['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'].map((color, index) => (\\n  <Button color={color} size=\\\"sm\\\" key={index} className=\\\"mr-2\\\">\\n    {color}\\n  </Button>\\n))\";var buttonOutlineCode=\"['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'].map((color, index) => (\\n  <Button outline color={color} key={index} className=\\\"mr-2\\\">\\n    {color}\\n  </Button>\\n))\";var buttonSizeCode=\"<Fragment>\\n  <Button color=\\\"secondary\\\" size=\\\"sm\\\" className=\\\"mr-2\\\">Small</Button>\\n  <Button color=\\\"secondary\\\" className=\\\"mr-2\\\">Regular</Button>\\n  <Button color=\\\"secondary\\\" size=\\\"lg\\\" className=\\\"mr-2\\\">Large</Button>\\n</Fragment>\";var IconButtonCode=\"<Fragment>\\n  <ButtonIcon className=\\\"mr-2\\\" color=\\\"falcon-default\\\" size=\\\"sm\\\" icon=\\\"plus\\\" transform=\\\"shrink-3\\\">\\n    Small\\n  </ButtonIcon>\\n  <ButtonIcon className=\\\"mr-2\\\" color=\\\"falcon-default\\\" icon=\\\"plus\\\" transform=\\\"shrink-3\\\">\\n    Regular\\n  </ButtonIcon>\\n  <ButtonIcon color=\\\"falcon-default\\\" size=\\\"lg\\\" icon=\\\"plus\\\" transform=\\\"shrink-3\\\">\\n    Large\\n  </ButtonIcon>\\n  <hr />\\n  <ButtonIcon color=\\\"primary\\\" className=\\\"mr-2\\\"  icon=\\\"plus\\\" transform=\\\"shrink-3\\\">\\n    Regular\\n  </ButtonIcon>\\n  <ButtonIcon outline color=\\\"primary\\\"  icon=\\\"plus\\\" transform=\\\"shrink-3\\\">\\n    Outline\\n  </ButtonIcon>\\n  <hr />\\n  <ButtonIcon color=\\\"primary\\\"  icon=\\\"trash\\\" iconAlign=\\\"right\\\" transform=\\\"shrink-3\\\">\\n    Delete\\n  </ButtonIcon>\\n</Fragment>\";var capsuleButtonCode=\"<Fragment>\\n  <Button className=\\\"mr-2\\\" color=\\\"falcon-default\\\" className=\\\"rounded-capsule mr-1\\\">\\n    Example\\n  </Button>\\n  <ButtonIcon className=\\\"rounded-capsule mr-1\\\" color=\\\"falcon-default\\\" icon=\\\"align-left\\\" transform=\\\"shrink-3\\\">\\n    Icon Left\\n  </ButtonIcon>\\n  <ButtonIcon className=\\\"rounded-capsule mr-1\\\" color=\\\"falcon-default\\\" icon=\\\"align-right\\\" iconAlign=\\\"right\\\" transform=\\\"shrink-3\\\">\\n    Icon Right\\n  </ButtonIcon>\\n  <Button outline color=\\\"primary\\\" className=\\\"rounded-capsule mr-1\\\">\\n    Outline\\n  </Button>\\n  <hr />\\n  <Button color=\\\"falcon-default\\\" className=\\\"rounded-capsule mr-2\\\" size=\\\"sm\\\" >\\n    Capsule Small\\n  </Button>\\n  <Button color=\\\"falcon-default\\\" className=\\\"rounded-capsule mr-2\\\" >\\n    Capsule Regular\\n  </Button>\\n  <Button color=\\\"falcon-default\\\" className=\\\"rounded-capsule mr-2\\\" size=\\\"lg\\\" >\\n    Capsule large\\n  </Button>\\n</Fragment>\";var basicExampleCode=\"<Fragment>\\n  <ButtonGroup>\\n    <Button>Left</Button>\\n    <Button>Middle</Button>\\n    <Button>Right</Button>\\n  </ButtonGroup>\\n</Fragment>\";var buttonToolbarCode=\"<Fragment>\\n  <ButtonGroup aria-label=\\\"First group\\\" className=\\\"mr-2\\\">\\n    <Button>1</Button>\\n    <Button>2</Button>\\n    <Button>3</Button>\\n    <Button>4</Button>\\n  </ButtonGroup>\\n  <ButtonGroup aria-label=\\\"Second group\\\" className=\\\"mr-2\\\">\\n    <Button>5</Button>\\n    <Button>6</Button>\\n    <Button>7</Button>\\n  </ButtonGroup>\\n  <ButtonGroup aria-label=\\\"Third group\\\">\\n    <Button>8</Button>\\n  </ButtonGroup>\\n</Fragment>\";var buttonToolbarWithInputCode=\"<Fragment>\\n  <ButtonToolbar>\\n    <ButtonGroup>\\n      <Button>1</Button>\\n      <Button>2</Button>\\n      <Button>3</Button>\\n      <Button className=\\\"mr-3\\\">4</Button>\\n    </ButtonGroup>\\n    <InputGroup>\\n      <InputGroupAddon addonType=\\\"prepend\\\">@</InputGroupAddon>\\n      <Input />\\n    </InputGroup>\\n   </ButtonToolbar>\\n  <ButtonToolbar className=\\\"justify-content-between mt-3\\\">\\n    <ButtonGroup>\\n      <Button>1</Button>\\n      <Button>2</Button>\\n      <Button>3</Button>\\n      <Button className=\\\"mr-3\\\">4</Button>\\n    </ButtonGroup>\\n    <InputGroup>\\n      <InputGroupAddon addonType=\\\"prepend\\\">@</InputGroupAddon>\\n      <Input />\\n    </InputGroup>\\n  </ButtonToolbar>\\n</Fragment>\";var sizingCode=\"<Fragment>\\n  <ButtonGroup size=\\\"lg\\\" className=\\\"mr-2\\\">\\n    <Button>Left</Button>\\n    <Button>Middle</Button>\\n    <Button>Right</Button>\\n  </ButtonGroup>\\n  <ButtonGroup className=\\\"mr-2\\\">\\n    <Button>Left</Button>\\n    <Button>Middle</Button>\\n    <Button>Right</Button>\\n  </ButtonGroup>\\n  <ButtonGroup size=\\\"sm\\\">\\n    <Button>Left</Button>\\n    <Button>Middle</Button>\\n    <Button>Right</Button>\\n  </ButtonGroup>\\n</Fragment>\\n\";var buttonGroupVerticalCode=\"<ButtonGroup vertical>\\n  <Button>Button</Button>\\n  <Button>Button</Button>\\n  <Button>Button</Button>\\n</ButtonGroup>\";var buttonGroupVerticalVariationCode=\"function buttonGroupVerticalVariationCode() {\\n  const [isOpen, setIsOpen] = useState(false);\\n  \\n  return (\\n    <ButtonGroup vertical>\\n      <Button>Button</Button>\\n      <Button>Button</Button>\\n      <ButtonDropdown isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\\n        <DropdownToggle caret>Dropdown</DropdownToggle>\\n        <DropdownMenu>\\n          <DropdownItem header>Dropdown link</DropdownItem>\\n          <DropdownItem>Dropdown link</DropdownItem>\\n        </DropdownMenu>\\n      </ButtonDropdown>\\n    </ButtonGroup>\\n  );\\n};\";var selectRadioButtonCode=\"function SelectButton() {\\n  const [isSelected, setIsSelected] = useState(\\\"\\\");\\n  \\n  return (\\n    <Fragment>\\n      <ButtonGroup>\\n        <Button color=\\\"primary\\\" active={isSelected === 1} onClick={() => setIsSelected(1)}>\\n          One\\n        </Button>\\n        <Button color=\\\"primary\\\" active={isSelected === 2} onClick={() => setIsSelected(2)}>\\n          Two\\n        </Button>\\n        <Button color=\\\"primary\\\" active={isSelected === 3} onClick={() => setIsSelected(3)}>\\n          Three\\n        </Button>\\n      </ButtonGroup>\\n      <p className=\\\"mt-1\\\">Selected : {isSelected} </p>\\n    </Fragment>\\n  );\\n};\\n\";var multiSelectCheckboxExample=\"function multiSelectCheckboxExample() {\\n  const [checked, setChecked] = useState([1]);\\n  \\n  const handleChecked = id => {\\n    checked.includes(id)\\n      ? setChecked([...checked.filter(i => i !== id)])\\n      : setChecked([...checked, id]);\\n  };\\n  \\n  return (\\n    <Fragment>\\n      <ButtonGroup>\\n        <Button\\n          color=\\\"primary\\\"\\n          onClick={() => handleChecked(1)}\\n          active={checked.includes(1)}\\n        >\\n          One\\n        </Button>\\n        <Button\\n          color=\\\"primary\\\"\\n          onClick={() => handleChecked(2)}\\n          active={checked.includes(2)}\\n        >\\n          Two\\n        </Button>\\n        <Button\\n          color=\\\"primary\\\"\\n          onClick={() => handleChecked(3)}\\n          active={checked.includes(3)}\\n        >\\n          Three\\n        </Button>\\n      </ButtonGroup>\\n      <p>Selected: {JSON.stringify(checked)}</p>\\n    </Fragment>\\n  );\\n};\";var disabledButtonCode=\"<Fragment>\\n  <Button color=\\\"primary\\\" size=\\\"lg\\\" className=\\\"mr-2 mb-2\\\" disabled>Primary</Button>\\n  <Button color=\\\"secondary\\\" size=\\\"lg\\\" className=\\\"mr-2 mb-2\\\" disabled>Secondary</Button>\\n  <Button color=\\\"warning\\\" size=\\\"lg\\\" className=\\\"mr-2 mb-2\\\" disabled>Warning</Button>\\n  <Button color=\\\"danger\\\" size=\\\"lg\\\" className=\\\"mr-2 mb-2\\\" disabled>Danger</Button>\\n  <Button color=\\\"success\\\" size=\\\"lg\\\" className=\\\"mr-2 mb-2\\\" disabled>Success</Button>\\n  <Button color=\\\"light\\\" size=\\\"lg\\\" className=\\\"mr-2 mb-2\\\" disabled>Light</Button>\\n  <Button color=\\\"dark\\\" size=\\\"lg\\\" className=\\\"mr-2 mb-2\\\" disabled>Dark</Button>\\n  <Button color=\\\"info\\\" size=\\\"lg\\\" className=\\\"mr-2 mb-2\\\" disabled>Info</Button>\\n</Fragment>\";var blockLevelButtonCode=\"<Fragment>\\n  <Button color=\\\"primary\\\" size=\\\"lg\\\" block>\\n    Block level button\\n  </Button>\\n  <Button color=\\\"secondary\\\" size=\\\"lg\\\" block>\\n    Block level button\\n  </Button>\\n</Fragment>\";var buttonFalconPropertiesCode=\"Button.propTypes = {\\n  active: PropTypes.bool,\\n  'aria-label': PropTypes.string,\\n  block: PropTypes.bool,\\n  color: PropTypes.string, // default: 'secondary'\\n  disabled: PropTypes.bool,\\n  outline: PropTypes.bool,\\n\\n  // Pass in a Component to override default button element\\n  // example: react-router Link\\n  // default: 'button'\\n  tag: PropTypes.oneOfType([\\n    PropTypes.func,\\n    PropTypes.string,\\n    PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\\n    PropTypes.arrayOf(PropTypes.oneOfType([\\n      PropTypes.func,\\n      PropTypes.string,\\n      PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\\n    ]))\\n  ]),\\n\\n  // ref will only get you a reference to the Button component, use innerRef to get a reference to the DOM element (for things like focus management).\\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\\n\\n  onClick: PropTypes.func,\\n  size: PropTypes.string,\\n  children: PropTypes.node,\\n  className: PropTypes.string,\\n  cssModule: PropTypes.object,\\n\\n  // use close prop for BS4 close icon utility\\n  close: PropTypes.bool,\\n}\";var buttonFalconDefaultPropertiesCode=\"Button.defaultProps = {\\n  color: 'secondary',\\n  tag: 'button',\\n}\\n\";var buttonIconPropertiesCode=\"ButtonIcon.propTypes = {\\n  icon: PropTypes.string.isRequired,\\n  children: PropTypes.node.isRequired,\\n  iconAlign: PropTypes.oneOf(['left', 'right']), // default: 'left'\\n  iconClassName: PropTypes.string,\\n  transform: PropTypes.string\\n};\";var Buttons=function Buttons(){return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(PageHeader,{title:\"Buttons\",description:\"Use Falcon\\u2019s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.\",className:\"mb-3\",children:/*#__PURE__*/_jsxs(Button,{tag:\"a\",href:\"https://reactstrap.github.io/components/buttons\",target:\"_blank\",color:\"link\",size:\"sm\",className:\"pl-0\",children:[\"Buttons on reactstrap\",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"chevron-right\",className:\"ml-1 fs--2\"})]})}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Falcon Buttons\",light:false}),/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(FalconEditor,{code:buttonFalconCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Properties\",light:false}),/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsx(FalconEditor,{code:buttonFalconPropertiesCode,hidePreview:true}),/*#__PURE__*/_jsx(FalconEditor,{code:buttonFalconDefaultPropertiesCode,hidePreview:true})]})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Examples\",light:false}),/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(FalconEditor,{code:buttonCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Outline buttons\",light:false}),/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(FalconEditor,{code:buttonOutlineCode})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Button sizes\",light:false}),/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(FalconEditor,{code:buttonSizeCode})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Icon Buttons\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:IconButtonCode,scope:{FontAwesomeIcon:FontAwesomeIcon,ButtonIcon:ButtonIcon}})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Button Icon Properties\",light:false}),/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(FalconEditor,{code:buttonIconPropertiesCode,scope:{ButtonIcon:ButtonIcon},hidePreview:true})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Block level Button\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:blockLevelButtonCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Disabled Button\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:disabledButtonCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Button Capsule\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:capsuleButtonCode,scope:{FontAwesomeIcon:FontAwesomeIcon,ButtonIcon:ButtonIcon}})})]}),/*#__PURE__*/_jsx(PageHeader,{title:\"Button Group\",description:\"Group a series of buttons together on a single line with the button group, and super-power them with JavaScript.\",className:\"mb-3\",children:/*#__PURE__*/_jsxs(Button,{tag:\"a\",href:\"https://reactstrap.github.io/components/button-group\",target:\"_blank\",color:\"link\",size:\"sm\",className:\"pl-0\",children:[\"Buttons on reactstrap\",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"chevron-right\",className:\"ml-1 fs--2\"})]})}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsxs(CardHeader,{children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Basic Example\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"mb-0\",children:[\"Wrap a series of buttons with\",/*#__PURE__*/_jsx(\"code\",{children:\".btn\"}),\" in\",/*#__PURE__*/_jsx(\"code\",{children:\".btn-group\"}),\". Add on optional JavaScript radio and checkbox style behavior with\"]})]}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:basicExampleCode,scope:{ButtonIcon:ButtonIcon}})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsxs(CardHeader,{children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Button Toolbar\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mb-0\",children:\"Combine sets of button groups into button toolbars for more complex components. Use utility classes as needed to space out groups, buttons, and more.\"})]}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:buttonToolbarCode})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsxs(CardHeader,{children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Button toolbar with input group\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mb-0\",children:\"Feel free to mix input groups with button groups in your toolbars. Similar to the example above, you'll likely need some utilities though to space things properly.\"})]}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:buttonToolbarWithInputCode})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsxs(CardHeader,{children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Sizing\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mb-0\",children:\"Insteam of aplying button sizing classes to every button in a group, just add .btn-gorup-* to each .btn-group, including each one when nesting multiple groups.\"})]}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:sizingCode})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsxs(CardHeader,{children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Vertical variation\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mb-0\",children:\"Make a set of buttons appear vertically tacked rather than horizontally. Split button dropdowns ae not supported here.\"})]}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:buttonGroupVerticalCode})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(CardHeader,{children:/*#__PURE__*/_jsx(\"h5\",{children:\"Vertical variation with dropdown\"})}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:buttonGroupVerticalVariationCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Radio Buttons (Stateful Buttons)\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:selectRadioButtonCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\" Checkbox (Stateful Buttons)\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:multiSelectCheckboxExample,language:\"jsx\"})})]})]});};export default Buttons;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/bootstrap-components/Buttons.js"],"names":["React","Fragment","Button","Card","CardHeader","CardBody","FontAwesomeIcon","PageHeader","FalconCardHeader","FalconEditor","ButtonIcon","buttonFalconCode","buttonCode","buttonOutlineCode","buttonSizeCode","IconButtonCode","capsuleButtonCode","basicExampleCode","buttonToolbarCode","buttonToolbarWithInputCode","sizingCode","buttonGroupVerticalCode","buttonGroupVerticalVariationCode","selectRadioButtonCode","multiSelectCheckboxExample","disabledButtonCode","blockLevelButtonCode","buttonFalconPropertiesCode","buttonFalconDefaultPropertiesCode","buttonIconPropertiesCode","Buttons"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardHeader, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport ButtonIcon from '../common/ButtonIcon';\n\nconst buttonFalconCode = `['primary', 'success', 'info','danger', 'warning'].map((color, index) => (\n  <Button color={'falcon-'+color} key={index} className=\"mr-2\" >\n    {color}\n  </Button>\n))`;\n\nconst buttonCode = `['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'].map((color, index) => (\n  <Button color={color} size=\"sm\" key={index} className=\"mr-2\">\n    {color}\n  </Button>\n))`;\n\nconst buttonOutlineCode = `['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'].map((color, index) => (\n  <Button outline color={color} key={index} className=\"mr-2\">\n    {color}\n  </Button>\n))`;\n\nconst buttonSizeCode = `<Fragment>\n  <Button color=\"secondary\" size=\"sm\" className=\"mr-2\">Small</Button>\n  <Button color=\"secondary\" className=\"mr-2\">Regular</Button>\n  <Button color=\"secondary\" size=\"lg\" className=\"mr-2\">Large</Button>\n</Fragment>`;\n\nconst IconButtonCode = `<Fragment>\n  <ButtonIcon className=\"mr-2\" color=\"falcon-default\" size=\"sm\" icon=\"plus\" transform=\"shrink-3\">\n    Small\n  </ButtonIcon>\n  <ButtonIcon className=\"mr-2\" color=\"falcon-default\" icon=\"plus\" transform=\"shrink-3\">\n    Regular\n  </ButtonIcon>\n  <ButtonIcon color=\"falcon-default\" size=\"lg\" icon=\"plus\" transform=\"shrink-3\">\n    Large\n  </ButtonIcon>\n  <hr />\n  <ButtonIcon color=\"primary\" className=\"mr-2\"  icon=\"plus\" transform=\"shrink-3\">\n    Regular\n  </ButtonIcon>\n  <ButtonIcon outline color=\"primary\"  icon=\"plus\" transform=\"shrink-3\">\n    Outline\n  </ButtonIcon>\n  <hr />\n  <ButtonIcon color=\"primary\"  icon=\"trash\" iconAlign=\"right\" transform=\"shrink-3\">\n    Delete\n  </ButtonIcon>\n</Fragment>`;\n\nconst capsuleButtonCode = `<Fragment>\n  <Button className=\"mr-2\" color=\"falcon-default\" className=\"rounded-capsule mr-1\">\n    Example\n  </Button>\n  <ButtonIcon className=\"rounded-capsule mr-1\" color=\"falcon-default\" icon=\"align-left\" transform=\"shrink-3\">\n    Icon Left\n  </ButtonIcon>\n  <ButtonIcon className=\"rounded-capsule mr-1\" color=\"falcon-default\" icon=\"align-right\" iconAlign=\"right\" transform=\"shrink-3\">\n    Icon Right\n  </ButtonIcon>\n  <Button outline color=\"primary\" className=\"rounded-capsule mr-1\">\n    Outline\n  </Button>\n  <hr />\n  <Button color=\"falcon-default\" className=\"rounded-capsule mr-2\" size=\"sm\" >\n    Capsule Small\n  </Button>\n  <Button color=\"falcon-default\" className=\"rounded-capsule mr-2\" >\n    Capsule Regular\n  </Button>\n  <Button color=\"falcon-default\" className=\"rounded-capsule mr-2\" size=\"lg\" >\n    Capsule large\n  </Button>\n</Fragment>`;\n\nconst basicExampleCode = `<Fragment>\n  <ButtonGroup>\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n</Fragment>`;\n\nconst buttonToolbarCode = `<Fragment>\n  <ButtonGroup aria-label=\"First group\" className=\"mr-2\">\n    <Button>1</Button>\n    <Button>2</Button>\n    <Button>3</Button>\n    <Button>4</Button>\n  </ButtonGroup>\n  <ButtonGroup aria-label=\"Second group\" className=\"mr-2\">\n    <Button>5</Button>\n    <Button>6</Button>\n    <Button>7</Button>\n  </ButtonGroup>\n  <ButtonGroup aria-label=\"Third group\">\n    <Button>8</Button>\n  </ButtonGroup>\n</Fragment>`;\n\nconst buttonToolbarWithInputCode = `<Fragment>\n  <ButtonToolbar>\n    <ButtonGroup>\n      <Button>1</Button>\n      <Button>2</Button>\n      <Button>3</Button>\n      <Button className=\"mr-3\">4</Button>\n    </ButtonGroup>\n    <InputGroup>\n      <InputGroupAddon addonType=\"prepend\">@</InputGroupAddon>\n      <Input />\n    </InputGroup>\n   </ButtonToolbar>\n  <ButtonToolbar className=\"justify-content-between mt-3\">\n    <ButtonGroup>\n      <Button>1</Button>\n      <Button>2</Button>\n      <Button>3</Button>\n      <Button className=\"mr-3\">4</Button>\n    </ButtonGroup>\n    <InputGroup>\n      <InputGroupAddon addonType=\"prepend\">@</InputGroupAddon>\n      <Input />\n    </InputGroup>\n  </ButtonToolbar>\n</Fragment>`;\n\nconst sizingCode = `<Fragment>\n  <ButtonGroup size=\"lg\" className=\"mr-2\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n  <ButtonGroup className=\"mr-2\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n  <ButtonGroup size=\"sm\">\n    <Button>Left</Button>\n    <Button>Middle</Button>\n    <Button>Right</Button>\n  </ButtonGroup>\n</Fragment>\n`;\n\nconst buttonGroupVerticalCode = `<ButtonGroup vertical>\n  <Button>Button</Button>\n  <Button>Button</Button>\n  <Button>Button</Button>\n</ButtonGroup>`;\n\nconst buttonGroupVerticalVariationCode = `function buttonGroupVerticalVariationCode() {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return (\n    <ButtonGroup vertical>\n      <Button>Button</Button>\n      <Button>Button</Button>\n      <ButtonDropdown isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\n        <DropdownToggle caret>Dropdown</DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Dropdown link</DropdownItem>\n          <DropdownItem>Dropdown link</DropdownItem>\n        </DropdownMenu>\n      </ButtonDropdown>\n    </ButtonGroup>\n  );\n};`;\n\nconst selectRadioButtonCode = `function SelectButton() {\n  const [isSelected, setIsSelected] = useState(\"\");\n  \n  return (\n    <Fragment>\n      <ButtonGroup>\n        <Button color=\"primary\" active={isSelected === 1} onClick={() => setIsSelected(1)}>\n          One\n        </Button>\n        <Button color=\"primary\" active={isSelected === 2} onClick={() => setIsSelected(2)}>\n          Two\n        </Button>\n        <Button color=\"primary\" active={isSelected === 3} onClick={() => setIsSelected(3)}>\n          Three\n        </Button>\n      </ButtonGroup>\n      <p className=\"mt-1\">Selected : {isSelected} </p>\n    </Fragment>\n  );\n};\n`;\n\nconst multiSelectCheckboxExample = `function multiSelectCheckboxExample() {\n  const [checked, setChecked] = useState([1]);\n  \n  const handleChecked = id => {\n    checked.includes(id)\n      ? setChecked([...checked.filter(i => i !== id)])\n      : setChecked([...checked, id]);\n  };\n  \n  return (\n    <Fragment>\n      <ButtonGroup>\n        <Button\n          color=\"primary\"\n          onClick={() => handleChecked(1)}\n          active={checked.includes(1)}\n        >\n          One\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() => handleChecked(2)}\n          active={checked.includes(2)}\n        >\n          Two\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() => handleChecked(3)}\n          active={checked.includes(3)}\n        >\n          Three\n        </Button>\n      </ButtonGroup>\n      <p>Selected: {JSON.stringify(checked)}</p>\n    </Fragment>\n  );\n};`;\n\nconst disabledButtonCode = `<Fragment>\n  <Button color=\"primary\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Primary</Button>\n  <Button color=\"secondary\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Secondary</Button>\n  <Button color=\"warning\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Warning</Button>\n  <Button color=\"danger\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Danger</Button>\n  <Button color=\"success\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Success</Button>\n  <Button color=\"light\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Light</Button>\n  <Button color=\"dark\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Dark</Button>\n  <Button color=\"info\" size=\"lg\" className=\"mr-2 mb-2\" disabled>Info</Button>\n</Fragment>`;\n\nconst blockLevelButtonCode = `<Fragment>\n  <Button color=\"primary\" size=\"lg\" block>\n    Block level button\n  </Button>\n  <Button color=\"secondary\" size=\"lg\" block>\n    Block level button\n  </Button>\n</Fragment>`;\n\nconst buttonFalconPropertiesCode = `Button.propTypes = {\n  active: PropTypes.bool,\n  'aria-label': PropTypes.string,\n  block: PropTypes.bool,\n  color: PropTypes.string, // default: 'secondary'\n  disabled: PropTypes.bool,\n  outline: PropTypes.bool,\n\n  // Pass in a Component to override default button element\n  // example: react-router Link\n  // default: 'button'\n  tag: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\n    PropTypes.arrayOf(PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n      PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\n    ]))\n  ]),\n\n  // ref will only get you a reference to the Button component, use innerRef to get a reference to the DOM element (for things like focus management).\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n\n  onClick: PropTypes.func,\n  size: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n\n  // use close prop for BS4 close icon utility\n  close: PropTypes.bool,\n}`;\n\nconst buttonFalconDefaultPropertiesCode = `Button.defaultProps = {\n  color: 'secondary',\n  tag: 'button',\n}\n`;\n\nconst buttonIconPropertiesCode = `ButtonIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  iconAlign: PropTypes.oneOf(['left', 'right']), // default: 'left'\n  iconClassName: PropTypes.string,\n  transform: PropTypes.string\n};`;\n\nconst Buttons = () => (\n  <Fragment>\n    <PageHeader\n      title=\"Buttons\"\n      description=\"Use Falcon’s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/buttons\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Buttons on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Falcon Buttons\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonFalconCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Properties\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonFalconPropertiesCode} hidePreview />\n        <FalconEditor code={buttonFalconDefaultPropertiesCode} hidePreview />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Examples\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Outline buttons\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonOutlineCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Button sizes\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonSizeCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Icon Buttons\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={IconButtonCode} scope={{ FontAwesomeIcon, ButtonIcon }} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Button Icon Properties\" light={false} />\n      <CardBody>\n        <FalconEditor code={buttonIconPropertiesCode} scope={{ ButtonIcon }} hidePreview />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Block level Button\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={blockLevelButtonCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Disabled Button\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={disabledButtonCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Button Capsule\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={capsuleButtonCode} scope={{ FontAwesomeIcon, ButtonIcon }} />\n      </CardBody>\n    </Card>\n    <PageHeader\n      title=\"Button Group\"\n      description=\"Group a series of buttons together on a single line with the button group, and super-power them with JavaScript.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/button-group\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Buttons on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Basic Example</h5>\n        <p className=\"mb-0\">\n          Wrap a series of buttons with<code>.btn</code> in<code>.btn-group</code>. Add on optional JavaScript radio and\n          checkbox style behavior with\n        </p>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={basicExampleCode} scope={{ ButtonIcon }} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Button Toolbar</h5>\n        <p className=\"mb-0\">\n          Combine sets of button groups into button toolbars for more complex components. Use utility classes as needed\n          to space out groups, buttons, and more.\n        </p>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={buttonToolbarCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Button toolbar with input group</h5>\n        <p className=\"mb-0\">\n          Feel free to mix input groups with button groups in your toolbars. Similar to the example above, you'll likely\n          need some utilities though to space things properly.\n        </p>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={buttonToolbarWithInputCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Sizing</h5>\n        <p className=\"mb-0\">\n          Insteam of aplying button sizing classes to every button in a group, just add .btn-gorup-* to each .btn-group,\n          including each one when nesting multiple groups.\n        </p>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={sizingCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Vertical variation</h5>\n        <p className=\"mb-0\">\n          Make a set of buttons appear vertically tacked rather than horizontally. Split button dropdowns ae not\n          supported here.\n        </p>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={buttonGroupVerticalCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardHeader>\n        <h5>Vertical variation with dropdown</h5>\n      </CardHeader>\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={buttonGroupVerticalVariationCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Radio Buttons (Stateful Buttons)\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={selectRadioButtonCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card>\n      <FalconCardHeader title=\" Checkbox (Stateful Buttons)\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={multiSelectCheckboxExample} language=\"jsx\" />\n      </CardBody>\n    </Card>\n  </Fragment>\n);\n\nexport default Buttons;\n"]},"metadata":{},"sourceType":"module"}