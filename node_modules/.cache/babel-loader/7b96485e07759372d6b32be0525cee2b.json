{"ast":null,"code":"import React,{Fragment,useContext}from'react';import{Button,Card,CardBody,Row,Col}from'reactstrap';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import ReactEchartsCore from'echarts-for-react/lib/core';import echarts from'echarts/lib/echarts';import PageHeader from'../common/PageHeader';import FalconCardHeader from'../common/FalconCardHeader';import FalconEditor from'../common/FalconEditor';import AppContext from'../../context/Context';import{themeColors,getPosition,getGrays,rgbaColor}from'../../helpers/utils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var EchartCode=\"function echartBarExample() {\\n    const data = [6000, 10000, 7500, 4000, 3500, 5500, 6000];\\n    const yMax = Math.max(...data);\\n    const dataBackground = data.map(() => yMax);\\n\\n    const getOption = (data, dataBackground, isDark) => {\\n      const grays = getGrays(isDark);\\n      return {\\n        tooltip: {\\n          trigger: 'axis',\\n          padding: [7, 10],\\n          formatter: '{b1}: {c1}',\\n          backgroundColor: grays.white,\\n          borderColor: grays['300'],\\n          borderWidth: 1,\\n          textStyle: { color: themeColors.dark },\\n          transitionDuration: 0,\\n          position(pos, params, dom, rect, size) {\\n            return getPosition(pos, params, dom, rect, size);\\n          }\\n        },\\n        xAxis: {\\n          type: 'category',\\n          data: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\\n          boundaryGap: false,\\n          axisLine: { show: false },\\n          axisLabel: { show: false },\\n          axisTick: { show: false },\\n          axisPointer: { type: 'none' }\\n        },\\n        yAxis: {\\n          type: 'value',\\n          splitLine: { show: false },\\n          axisLine: { show: false },\\n          axisLabel: { show: false },\\n          axisTick: { show: false },\\n          axisPointer: { type: 'none' }\\n        },\\n        series: [\\n          {\\n            type: 'bar',\\n            barWidth: '5px',\\n            barGap: '-100%',\\n            itemStyle: {\\n              color: grays['200'],\\n              barBorderRadius: 10\\n            },\\n            data: dataBackground,\\n            animation: false,\\n            emphasis: { itemStyle: { color: grays['200'] } }\\n          },\\n          {\\n            type: 'bar',\\n            barWidth: '5px',\\n            itemStyle: {\\n              color: themeColors.primary,\\n              barBorderRadius: 10\\n            },\\n            data: data,\\n            emphasis: { itemStyle: { color: themeColors.primary } },\\n            z: 10\\n          }\\n        ],\\n        grid: { right: 5, left: 10, top: 0, bottom: 0 }\\n      };\\n    };\\n  \\n  return  (\\n    <ReactEchartsCore\\n      echarts={echarts}\\n      option={getOption(data, dataBackground, isDark)}\\n      style={{ width: '90%', height: '10rem' }}\\n    />\\n  )\\n}\";var lineChartCode=\"function linechartExample(){\\n      const totalOrderData= [15000, 43400];\\n\\n      const getOption = (totalOrderData, isDark) => {\\n        const grays = getGrays(isDark);\\n        return {\\n          tooltip: {\\n            triggerOn: 'mousemove',\\n            trigger: 'axis',\\n            padding: [7, 10],\\n            formatter: '{b0}: {c0}',\\n            backgroundColor: grays.white,\\n            borderColor: grays['300'],\\n            borderWidth: 1,\\n            transitionDuration: 0,\\n            position(pos, params, dom, rect, size) {\\n              return getPosition(pos, params, dom, rect, size);\\n            },\\n            textStyle: { color: themeColors.dark }\\n          },\\n          xAxis: {\\n            type: 'category',\\n            data: ['Week 4', 'Week 5'],\\n            boundaryGap: false,\\n            splitLine: { show: false },\\n            axisLine: {\\n              show: false,\\n              lineStyle: {\\n                color: grays['300'],\\n                type: 'dashed'\\n              }\\n            },\\n            axisLabel: { show: false },\\n            axisTick: { show: false },\\n            axisPointer: { type: 'none' }\\n          },\\n          yAxis: {\\n            type: 'value',\\n            splitLine: { show: false },\\n            axisLine: { show: false },\\n            axisLabel: { show: false },\\n            axisTick: { show: false },\\n            axisPointer: { show: false }\\n          },\\n          series: [\\n            {\\n              type: 'line',\\n              lineStyle: {\\n                color: themeColors.primary,\\n                width: 3\\n              },\\n              itemStyle: {\\n                color: grays['100'],\\n                borderColor: themeColors.primary,\\n                borderWidth: 2\\n              },\\n              hoverAnimation: true,\\n              data: totalOrderData,\\n              connectNulls: true,\\n              smooth: 0.6,\\n              smoothMonotone: 'x',\\n              symbol: 'circle',\\n              symbolSize: 8,\\n              areaStyle: {\\n                color: {\\n                  type: 'linear',\\n                  x: 0,\\n                  y: 0,\\n                  x2: 0,\\n                  y2: 1,\\n                  colorStops: [\\n                    {\\n                      offset: 0,\\n                      color: rgbaColor(themeColors.primary, 0.25)\\n                    },\\n                    {\\n                      offset: 1,\\n                      color: rgbaColor(themeColors.primary, 0)\\n                    }\\n                  ]\\n                }\\n              }\\n            }\\n          ],\\n          grid: { bottom: '2%', top: '0%', right: '10px', left: '10px' }\\n        };\\n      };\\n      return (\\n        <ReactEchartsCore\\n          echarts={echarts}\\n          option={getOption(totalOrderData, isDark)}\\n          style={{ width: '90%', height: '10rem' }}\\n        />\\n      )\\n};\";var Echarts=function Echarts(){var _useContext=useContext(AppContext),isDark=_useContext.isDark;return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(PageHeader,{title:\"Echarts\",description:\"A Declarative Framework for Rapid Construction of Web-based Visualization\",className:\"mb-3\",children:/*#__PURE__*/_jsxs(Button,{tag:\"a\",href:\"https://echarts.apache.org/en/index.html\",target:\"_blank\",color:\"link\",size:\"sm\",className:\"pl-0\",children:[\"Echarts Documentation\",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"chevron-right\",className:\"ml-1 fs--2\"})]})}),/*#__PURE__*/_jsxs(Row,{noGutters:true,className:\"overflow-hidden\",children:[/*#__PURE__*/_jsx(Col,{lg:6,className:\"pr-lg-2 overflow-hidden\",children:/*#__PURE__*/_jsxs(Card,{className:\"overflow-hiddem\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Bar chart\"}),/*#__PURE__*/_jsxs(CardBody,{className:\" overflow-hidden\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"pb-4 font-weight-bold\",children:\"Weekly Sales\"}),/*#__PURE__*/_jsx(FalconEditor,{code:EchartCode,scope:{echarts:echarts,ReactEchartsCore:ReactEchartsCore,isDark:isDark,getGrays:getGrays,themeColors:themeColors,getPosition:getPosition},language:\"jsx\"})]})]})}),/*#__PURE__*/_jsx(Col,{lg:6,className:\"mt-6 mt-lg-0 pl-lg-2 overflow-hidden\",children:/*#__PURE__*/_jsxs(Card,{className:\"overflow-hiddem\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Line chart\"}),/*#__PURE__*/_jsxs(CardBody,{className:\"overflow-hidden\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"pb-4 font-weight-bold\",children:\"Total Order\"}),/*#__PURE__*/_jsx(FalconEditor,{code:lineChartCode,scope:{echarts:echarts,ReactEchartsCore:ReactEchartsCore,isDark:isDark,getGrays:getGrays,themeColors:themeColors,getPosition:getPosition,rgbaColor:rgbaColor},language:\"jsx\"})]})]})})]})]});};export default Echarts;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/plugins/Echarts.js"],"names":["React","Fragment","useContext","Button","Card","CardBody","Row","Col","FontAwesomeIcon","ReactEchartsCore","echarts","PageHeader","FalconCardHeader","FalconEditor","AppContext","themeColors","getPosition","getGrays","rgbaColor","EchartCode","lineChartCode","Echarts","isDark"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,KAA4C,OAA5C,CACA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,QAAvB,CAAiCC,GAAjC,CAAsCC,GAAtC,KAAiD,YAAjD,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,MAAOC,CAAAA,gBAAP,KAA6B,4BAA7B,CACA,MAAOC,CAAAA,OAAP,KAAoB,qBAApB,CACA,MAAOC,CAAAA,UAAP,KAAuB,sBAAvB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,4BAA7B,CACA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,CACA,MAAOC,CAAAA,UAAP,KAAuB,uBAAvB,CACA,OAASC,WAAT,CAAsBC,WAAtB,CAAmCC,QAAnC,CAA6CC,SAA7C,KAA8D,qBAA9D,C,wFAEA,GAAMC,CAAAA,UAAU,6tEAAhB,CA2EA,GAAMC,CAAAA,aAAa,43FAAnB,CA+FA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,iBACDnB,UAAU,CAACY,UAAD,CADT,CACZQ,MADY,aACZA,MADY,CAGpB,mBACE,MAAC,QAAD,yBACE,KAAC,UAAD,EACE,KAAK,CAAC,SADR,CAEE,WAAW,CAAC,2EAFd,CAGE,SAAS,CAAC,MAHZ,uBAKE,MAAC,MAAD,EACE,GAAG,CAAC,GADN,CAEE,IAAI,CAAC,0CAFP,CAGE,MAAM,CAAC,QAHT,CAIE,KAAK,CAAC,MAJR,CAKE,IAAI,CAAC,IALP,CAME,SAAS,CAAC,MANZ,gDASE,KAAC,eAAD,EAAiB,IAAI,CAAC,eAAtB,CAAsC,SAAS,CAAC,YAAhD,EATF,GALF,EADF,cAkBE,MAAC,GAAD,EAAK,SAAS,KAAd,CAAe,SAAS,CAAC,iBAAzB,wBACE,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,yBAAtB,uBACE,MAAC,IAAD,EAAM,SAAS,CAAC,iBAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,WAAxB,EADF,cAEE,MAAC,QAAD,EAAU,SAAS,CAAC,kBAApB,wBACE,UAAG,SAAS,CAAC,uBAAb,0BADF,cAEE,KAAC,YAAD,EACE,IAAI,CAAEH,UADR,CAEE,KAAK,CAAE,CAAET,OAAO,CAAPA,OAAF,CAAWD,gBAAgB,CAAhBA,gBAAX,CAA6Ba,MAAM,CAANA,MAA7B,CAAqCL,QAAQ,CAARA,QAArC,CAA+CF,WAAW,CAAXA,WAA/C,CAA4DC,WAAW,CAAXA,WAA5D,CAFT,CAGE,QAAQ,CAAC,KAHX,EAFF,GAFF,GADF,EADF,cAcE,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,sCAAtB,uBACE,MAAC,IAAD,EAAM,SAAS,CAAC,iBAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,YAAxB,EADF,cAEE,MAAC,QAAD,EAAU,SAAS,CAAC,iBAApB,wBACE,UAAG,SAAS,CAAC,uBAAb,yBADF,cAEE,KAAC,YAAD,EACE,IAAI,CAAEI,aADR,CAEE,KAAK,CAAE,CACLV,OAAO,CAAPA,OADK,CAELD,gBAAgB,CAAhBA,gBAFK,CAGLa,MAAM,CAANA,MAHK,CAILL,QAAQ,CAARA,QAJK,CAKLF,WAAW,CAAXA,WALK,CAMLC,WAAW,CAAXA,WANK,CAOLE,SAAS,CAATA,SAPK,CAFT,CAWE,QAAQ,CAAC,KAXX,EAFF,GAFF,GADF,EAdF,GAlBF,GADF,CA+DD,CAlED,CAoEA,cAAeG,CAAAA,OAAf","sourcesContent":["import React, { Fragment, useContext } from 'react';\nimport { Button, Card, CardBody, Row, Col } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\nimport echarts from 'echarts/lib/echarts';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport AppContext from '../../context/Context';\nimport { themeColors, getPosition, getGrays, rgbaColor } from '../../helpers/utils';\n\nconst EchartCode = `function echartBarExample() {\n    const data = [6000, 10000, 7500, 4000, 3500, 5500, 6000];\n    const yMax = Math.max(...data);\n    const dataBackground = data.map(() => yMax);\n\n    const getOption = (data, dataBackground, isDark) => {\n      const grays = getGrays(isDark);\n      return {\n        tooltip: {\n          trigger: 'axis',\n          padding: [7, 10],\n          formatter: '{b1}: {c1}',\n          backgroundColor: grays.white,\n          borderColor: grays['300'],\n          borderWidth: 1,\n          textStyle: { color: themeColors.dark },\n          transitionDuration: 0,\n          position(pos, params, dom, rect, size) {\n            return getPosition(pos, params, dom, rect, size);\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n          boundaryGap: false,\n          axisLine: { show: false },\n          axisLabel: { show: false },\n          axisTick: { show: false },\n          axisPointer: { type: 'none' }\n        },\n        yAxis: {\n          type: 'value',\n          splitLine: { show: false },\n          axisLine: { show: false },\n          axisLabel: { show: false },\n          axisTick: { show: false },\n          axisPointer: { type: 'none' }\n        },\n        series: [\n          {\n            type: 'bar',\n            barWidth: '5px',\n            barGap: '-100%',\n            itemStyle: {\n              color: grays['200'],\n              barBorderRadius: 10\n            },\n            data: dataBackground,\n            animation: false,\n            emphasis: { itemStyle: { color: grays['200'] } }\n          },\n          {\n            type: 'bar',\n            barWidth: '5px',\n            itemStyle: {\n              color: themeColors.primary,\n              barBorderRadius: 10\n            },\n            data: data,\n            emphasis: { itemStyle: { color: themeColors.primary } },\n            z: 10\n          }\n        ],\n        grid: { right: 5, left: 10, top: 0, bottom: 0 }\n      };\n    };\n  \n  return  (\n    <ReactEchartsCore\n      echarts={echarts}\n      option={getOption(data, dataBackground, isDark)}\n      style={{ width: '90%', height: '10rem' }}\n    />\n  )\n}`;\nconst lineChartCode = `function linechartExample(){\n      const totalOrderData= [15000, 43400];\n\n      const getOption = (totalOrderData, isDark) => {\n        const grays = getGrays(isDark);\n        return {\n          tooltip: {\n            triggerOn: 'mousemove',\n            trigger: 'axis',\n            padding: [7, 10],\n            formatter: '{b0}: {c0}',\n            backgroundColor: grays.white,\n            borderColor: grays['300'],\n            borderWidth: 1,\n            transitionDuration: 0,\n            position(pos, params, dom, rect, size) {\n              return getPosition(pos, params, dom, rect, size);\n            },\n            textStyle: { color: themeColors.dark }\n          },\n          xAxis: {\n            type: 'category',\n            data: ['Week 4', 'Week 5'],\n            boundaryGap: false,\n            splitLine: { show: false },\n            axisLine: {\n              show: false,\n              lineStyle: {\n                color: grays['300'],\n                type: 'dashed'\n              }\n            },\n            axisLabel: { show: false },\n            axisTick: { show: false },\n            axisPointer: { type: 'none' }\n          },\n          yAxis: {\n            type: 'value',\n            splitLine: { show: false },\n            axisLine: { show: false },\n            axisLabel: { show: false },\n            axisTick: { show: false },\n            axisPointer: { show: false }\n          },\n          series: [\n            {\n              type: 'line',\n              lineStyle: {\n                color: themeColors.primary,\n                width: 3\n              },\n              itemStyle: {\n                color: grays['100'],\n                borderColor: themeColors.primary,\n                borderWidth: 2\n              },\n              hoverAnimation: true,\n              data: totalOrderData,\n              connectNulls: true,\n              smooth: 0.6,\n              smoothMonotone: 'x',\n              symbol: 'circle',\n              symbolSize: 8,\n              areaStyle: {\n                color: {\n                  type: 'linear',\n                  x: 0,\n                  y: 0,\n                  x2: 0,\n                  y2: 1,\n                  colorStops: [\n                    {\n                      offset: 0,\n                      color: rgbaColor(themeColors.primary, 0.25)\n                    },\n                    {\n                      offset: 1,\n                      color: rgbaColor(themeColors.primary, 0)\n                    }\n                  ]\n                }\n              }\n            }\n          ],\n          grid: { bottom: '2%', top: '0%', right: '10px', left: '10px' }\n        };\n      };\n      return (\n        <ReactEchartsCore\n          echarts={echarts}\n          option={getOption(totalOrderData, isDark)}\n          style={{ width: '90%', height: '10rem' }}\n        />\n      )\n};`;\nconst Echarts = () => {\n  const { isDark } = useContext(AppContext);\n\n  return (\n    <Fragment>\n      <PageHeader\n        title=\"Echarts\"\n        description=\"A Declarative Framework for Rapid Construction of Web-based Visualization\"\n        className=\"mb-3\"\n      >\n        <Button\n          tag=\"a\"\n          href=\"https://echarts.apache.org/en/index.html\"\n          target=\"_blank\"\n          color=\"link\"\n          size=\"sm\"\n          className=\"pl-0\"\n        >\n          Echarts Documentation\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n        </Button>\n      </PageHeader>\n      <Row noGutters className=\"overflow-hidden\">\n        <Col lg={6} className=\"pr-lg-2 overflow-hidden\">\n          <Card className=\"overflow-hiddem\">\n            <FalconCardHeader title=\"Bar chart\" />\n            <CardBody className=\" overflow-hidden\">\n              <p className=\"pb-4 font-weight-bold\">Weekly Sales</p>\n              <FalconEditor\n                code={EchartCode}\n                scope={{ echarts, ReactEchartsCore, isDark, getGrays, themeColors, getPosition }}\n                language=\"jsx\"\n              />\n            </CardBody>\n          </Card>\n        </Col>\n        <Col lg={6} className=\"mt-6 mt-lg-0 pl-lg-2 overflow-hidden\">\n          <Card className=\"overflow-hiddem\">\n            <FalconCardHeader title=\"Line chart\" />\n            <CardBody className=\"overflow-hidden\">\n              <p className=\"pb-4 font-weight-bold\">Total Order</p>\n              <FalconEditor\n                code={lineChartCode}\n                scope={{\n                  echarts,\n                  ReactEchartsCore,\n                  isDark,\n                  getGrays,\n                  themeColors,\n                  getPosition,\n                  rgbaColor\n                }}\n                language=\"jsx\"\n              />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      {/* <Card className=\"overflow-hidden\">\n        <FalconCardHeader title=\"Bar chart\" />\n        <CardBody>\n          \n        </CardBody>\n      </Card> */}\n    </Fragment>\n  );\n};\n\nexport default Echarts;\n"]},"metadata":{},"sourceType":"module"}