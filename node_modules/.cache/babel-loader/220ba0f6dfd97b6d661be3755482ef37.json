{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/plugins/Echarts.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useContext } from 'react';\nimport { Button, Card, CardBody, Row, Col } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\nimport echarts from 'echarts/lib/echarts';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport AppContext from '../../context/Context';\nimport { themeColors, getPosition, getGrays, rgbaColor } from '../../helpers/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EchartCode = `function echartBarExample() {\n    const data = [6000, 10000, 7500, 4000, 3500, 5500, 6000];\n    const yMax = Math.max(...data);\n    const dataBackground = data.map(() => yMax);\n\n    const getOption = (data, dataBackground, isDark) => {\n      const grays = getGrays(isDark);\n      return {\n        tooltip: {\n          trigger: 'axis',\n          padding: [7, 10],\n          formatter: '{b1}: {c1}',\n          backgroundColor: grays.white,\n          borderColor: grays['300'],\n          borderWidth: 1,\n          textStyle: { color: themeColors.dark },\n          transitionDuration: 0,\n          position(pos, params, dom, rect, size) {\n            return getPosition(pos, params, dom, rect, size);\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n          boundaryGap: false,\n          axisLine: { show: false },\n          axisLabel: { show: false },\n          axisTick: { show: false },\n          axisPointer: { type: 'none' }\n        },\n        yAxis: {\n          type: 'value',\n          splitLine: { show: false },\n          axisLine: { show: false },\n          axisLabel: { show: false },\n          axisTick: { show: false },\n          axisPointer: { type: 'none' }\n        },\n        series: [\n          {\n            type: 'bar',\n            barWidth: '5px',\n            barGap: '-100%',\n            itemStyle: {\n              color: grays['200'],\n              barBorderRadius: 10\n            },\n            data: dataBackground,\n            animation: false,\n            emphasis: { itemStyle: { color: grays['200'] } }\n          },\n          {\n            type: 'bar',\n            barWidth: '5px',\n            itemStyle: {\n              color: themeColors.primary,\n              barBorderRadius: 10\n            },\n            data: data,\n            emphasis: { itemStyle: { color: themeColors.primary } },\n            z: 10\n          }\n        ],\n        grid: { right: 5, left: 10, top: 0, bottom: 0 }\n      };\n    };\n  \n  return  (\n    <ReactEchartsCore\n      echarts={echarts}\n      option={getOption(data, dataBackground, isDark)}\n      style={{ width: '90%', height: '10rem' }}\n    />\n  )\n}`;\nconst lineChartCode = `function linechartExample(){\n      const totalOrderData= [15000, 43400];\n\n      const getOption = (totalOrderData, isDark) => {\n        const grays = getGrays(isDark);\n        return {\n          tooltip: {\n            triggerOn: 'mousemove',\n            trigger: 'axis',\n            padding: [7, 10],\n            formatter: '{b0}: {c0}',\n            backgroundColor: grays.white,\n            borderColor: grays['300'],\n            borderWidth: 1,\n            transitionDuration: 0,\n            position(pos, params, dom, rect, size) {\n              return getPosition(pos, params, dom, rect, size);\n            },\n            textStyle: { color: themeColors.dark }\n          },\n          xAxis: {\n            type: 'category',\n            data: ['Week 4', 'Week 5'],\n            boundaryGap: false,\n            splitLine: { show: false },\n            axisLine: {\n              show: false,\n              lineStyle: {\n                color: grays['300'],\n                type: 'dashed'\n              }\n            },\n            axisLabel: { show: false },\n            axisTick: { show: false },\n            axisPointer: { type: 'none' }\n          },\n          yAxis: {\n            type: 'value',\n            splitLine: { show: false },\n            axisLine: { show: false },\n            axisLabel: { show: false },\n            axisTick: { show: false },\n            axisPointer: { show: false }\n          },\n          series: [\n            {\n              type: 'line',\n              lineStyle: {\n                color: themeColors.primary,\n                width: 3\n              },\n              itemStyle: {\n                color: grays['100'],\n                borderColor: themeColors.primary,\n                borderWidth: 2\n              },\n              hoverAnimation: true,\n              data: totalOrderData,\n              connectNulls: true,\n              smooth: 0.6,\n              smoothMonotone: 'x',\n              symbol: 'circle',\n              symbolSize: 8,\n              areaStyle: {\n                color: {\n                  type: 'linear',\n                  x: 0,\n                  y: 0,\n                  x2: 0,\n                  y2: 1,\n                  colorStops: [\n                    {\n                      offset: 0,\n                      color: rgbaColor(themeColors.primary, 0.25)\n                    },\n                    {\n                      offset: 1,\n                      color: rgbaColor(themeColors.primary, 0)\n                    }\n                  ]\n                }\n              }\n            }\n          ],\n          grid: { bottom: '2%', top: '0%', right: '10px', left: '10px' }\n        };\n      };\n      return (\n        <ReactEchartsCore\n          echarts={echarts}\n          option={getOption(totalOrderData, isDark)}\n          style={{ width: '90%', height: '10rem' }}\n        />\n      )\n};`;\n\nconst Echarts = () => {\n  _s();\n\n  const {\n    isDark\n  } = useContext(AppContext);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      title: \"Echarts\",\n      description: \"A Declarative Framework for Rapid Construction of Web-based Visualization\",\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        tag: \"a\",\n        href: \"https://echarts.apache.org/en/index.html\",\n        target: \"_blank\",\n        color: \"link\",\n        size: \"sm\",\n        className: \"pl-0\",\n        children: [\"Echarts Documentation\", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: \"chevron-right\",\n          className: \"ml-1 fs--2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      noGutters: true,\n      className: \"overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        lg: 6,\n        className: \"pr-lg-2 overflow-hidden\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"overflow-hiddem\",\n          children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n            title: \"Bar chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n            className: \" overflow-hidden\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"pb-4 font-weight-bold\",\n              children: \"Weekly Sales\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FalconEditor, {\n              code: EchartCode,\n              scope: {\n                echarts,\n                ReactEchartsCore,\n                isDark,\n                getGrays,\n                themeColors,\n                getPosition\n              },\n              language: \"jsx\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        lg: 6,\n        className: \"mt-6 mt-lg-0 pl-lg-2 overflow-hidden\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"overflow-hiddem\",\n          children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n            title: \"Line chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n            className: \"overflow-hidden\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"pb-4 font-weight-bold\",\n              children: \"Total Order\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FalconEditor, {\n              code: lineChartCode,\n              scope: {\n                echarts,\n                ReactEchartsCore,\n                isDark,\n                getGrays,\n                themeColors,\n                getPosition,\n                rgbaColor\n              },\n              language: \"jsx\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Echarts, \"ZZPd8S4Q8+HbJqQU/UnuUPtUjgA=\");\n\n_c = Echarts;\nexport default Echarts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Echarts\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/plugins/Echarts.js"],"names":["React","Fragment","useContext","Button","Card","CardBody","Row","Col","FontAwesomeIcon","ReactEchartsCore","echarts","PageHeader","FalconCardHeader","FalconEditor","AppContext","themeColors","getPosition","getGrays","rgbaColor","EchartCode","lineChartCode","Echarts","isDark"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,GAAjC,EAAsCC,GAAtC,QAAiD,YAAjD;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,QAAnC,EAA6CC,SAA7C,QAA8D,qBAA9D;;AAEA,MAAMC,UAAU,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EA1EA;AA2EA,MAAMC,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","sourcesContent":["import React, { Fragment, useContext } from 'react';\nimport { Button, Card, CardBody, Row, Col } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\nimport echarts from 'echarts/lib/echarts';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport AppContext from '../../context/Context';\nimport { themeColors, getPosition, getGrays, rgbaColor } from '../../helpers/utils';\n\nconst EchartCode = `function echartBarExample() {\n    const data = [6000, 10000, 7500, 4000, 3500, 5500, 6000];\n    const yMax = Math.max(...data);\n    const dataBackground = data.map(() => yMax);\n\n    const getOption = (data, dataBackground, isDark) => {\n      const grays = getGrays(isDark);\n      return {\n        tooltip: {\n          trigger: 'axis',\n          padding: [7, 10],\n          formatter: '{b1}: {c1}',\n          backgroundColor: grays.white,\n          borderColor: grays['300'],\n          borderWidth: 1,\n          textStyle: { color: themeColors.dark },\n          transitionDuration: 0,\n          position(pos, params, dom, rect, size) {\n            return getPosition(pos, params, dom, rect, size);\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n          boundaryGap: false,\n          axisLine: { show: false },\n          axisLabel: { show: false },\n          axisTick: { show: false },\n          axisPointer: { type: 'none' }\n        },\n        yAxis: {\n          type: 'value',\n          splitLine: { show: false },\n          axisLine: { show: false },\n          axisLabel: { show: false },\n          axisTick: { show: false },\n          axisPointer: { type: 'none' }\n        },\n        series: [\n          {\n            type: 'bar',\n            barWidth: '5px',\n            barGap: '-100%',\n            itemStyle: {\n              color: grays['200'],\n              barBorderRadius: 10\n            },\n            data: dataBackground,\n            animation: false,\n            emphasis: { itemStyle: { color: grays['200'] } }\n          },\n          {\n            type: 'bar',\n            barWidth: '5px',\n            itemStyle: {\n              color: themeColors.primary,\n              barBorderRadius: 10\n            },\n            data: data,\n            emphasis: { itemStyle: { color: themeColors.primary } },\n            z: 10\n          }\n        ],\n        grid: { right: 5, left: 10, top: 0, bottom: 0 }\n      };\n    };\n  \n  return  (\n    <ReactEchartsCore\n      echarts={echarts}\n      option={getOption(data, dataBackground, isDark)}\n      style={{ width: '90%', height: '10rem' }}\n    />\n  )\n}`;\nconst lineChartCode = `function linechartExample(){\n      const totalOrderData= [15000, 43400];\n\n      const getOption = (totalOrderData, isDark) => {\n        const grays = getGrays(isDark);\n        return {\n          tooltip: {\n            triggerOn: 'mousemove',\n            trigger: 'axis',\n            padding: [7, 10],\n            formatter: '{b0}: {c0}',\n            backgroundColor: grays.white,\n            borderColor: grays['300'],\n            borderWidth: 1,\n            transitionDuration: 0,\n            position(pos, params, dom, rect, size) {\n              return getPosition(pos, params, dom, rect, size);\n            },\n            textStyle: { color: themeColors.dark }\n          },\n          xAxis: {\n            type: 'category',\n            data: ['Week 4', 'Week 5'],\n            boundaryGap: false,\n            splitLine: { show: false },\n            axisLine: {\n              show: false,\n              lineStyle: {\n                color: grays['300'],\n                type: 'dashed'\n              }\n            },\n            axisLabel: { show: false },\n            axisTick: { show: false },\n            axisPointer: { type: 'none' }\n          },\n          yAxis: {\n            type: 'value',\n            splitLine: { show: false },\n            axisLine: { show: false },\n            axisLabel: { show: false },\n            axisTick: { show: false },\n            axisPointer: { show: false }\n          },\n          series: [\n            {\n              type: 'line',\n              lineStyle: {\n                color: themeColors.primary,\n                width: 3\n              },\n              itemStyle: {\n                color: grays['100'],\n                borderColor: themeColors.primary,\n                borderWidth: 2\n              },\n              hoverAnimation: true,\n              data: totalOrderData,\n              connectNulls: true,\n              smooth: 0.6,\n              smoothMonotone: 'x',\n              symbol: 'circle',\n              symbolSize: 8,\n              areaStyle: {\n                color: {\n                  type: 'linear',\n                  x: 0,\n                  y: 0,\n                  x2: 0,\n                  y2: 1,\n                  colorStops: [\n                    {\n                      offset: 0,\n                      color: rgbaColor(themeColors.primary, 0.25)\n                    },\n                    {\n                      offset: 1,\n                      color: rgbaColor(themeColors.primary, 0)\n                    }\n                  ]\n                }\n              }\n            }\n          ],\n          grid: { bottom: '2%', top: '0%', right: '10px', left: '10px' }\n        };\n      };\n      return (\n        <ReactEchartsCore\n          echarts={echarts}\n          option={getOption(totalOrderData, isDark)}\n          style={{ width: '90%', height: '10rem' }}\n        />\n      )\n};`;\nconst Echarts = () => {\n  const { isDark } = useContext(AppContext);\n\n  return (\n    <Fragment>\n      <PageHeader\n        title=\"Echarts\"\n        description=\"A Declarative Framework for Rapid Construction of Web-based Visualization\"\n        className=\"mb-3\"\n      >\n        <Button\n          tag=\"a\"\n          href=\"https://echarts.apache.org/en/index.html\"\n          target=\"_blank\"\n          color=\"link\"\n          size=\"sm\"\n          className=\"pl-0\"\n        >\n          Echarts Documentation\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n        </Button>\n      </PageHeader>\n      <Row noGutters className=\"overflow-hidden\">\n        <Col lg={6} className=\"pr-lg-2 overflow-hidden\">\n          <Card className=\"overflow-hiddem\">\n            <FalconCardHeader title=\"Bar chart\" />\n            <CardBody className=\" overflow-hidden\">\n              <p className=\"pb-4 font-weight-bold\">Weekly Sales</p>\n              <FalconEditor\n                code={EchartCode}\n                scope={{ echarts, ReactEchartsCore, isDark, getGrays, themeColors, getPosition }}\n                language=\"jsx\"\n              />\n            </CardBody>\n          </Card>\n        </Col>\n        <Col lg={6} className=\"mt-6 mt-lg-0 pl-lg-2 overflow-hidden\">\n          <Card className=\"overflow-hiddem\">\n            <FalconCardHeader title=\"Line chart\" />\n            <CardBody className=\"overflow-hidden\">\n              <p className=\"pb-4 font-weight-bold\">Total Order</p>\n              <FalconEditor\n                code={lineChartCode}\n                scope={{\n                  echarts,\n                  ReactEchartsCore,\n                  isDark,\n                  getGrays,\n                  themeColors,\n                  getPosition,\n                  rgbaColor\n                }}\n                language=\"jsx\"\n              />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      {/* <Card className=\"overflow-hidden\">\n        <FalconCardHeader title=\"Bar chart\" />\n        <CardBody>\n          \n        </CardBody>\n      </Card> */}\n    </Fragment>\n  );\n};\n\nexport default Echarts;\n"]},"metadata":{},"sourceType":"module"}