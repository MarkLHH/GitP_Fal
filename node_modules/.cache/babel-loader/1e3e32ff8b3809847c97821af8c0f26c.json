{"ast":null,"code":"import _toConsumableArray from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';var useBulkSelect=function useBulkSelect(items){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),selectedItems=_useState2[0],setSelectedItems=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isAllSelected=_useState4[0],setIsAllSelected=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isIndeterminate=_useState6[0],setIsIndeterminate=_useState6[1];var toggleSelectedItem=function toggleSelectedItem(id){var isAlreadySelected=selectedItems.find(function(item){return item===id;});if(isAlreadySelected){setSelectedItems(selectedItems.filter(function(item){return item!==id;}));}else{setSelectedItems([].concat(_toConsumableArray(selectedItems),[id]));}};var toggleIsAllSelected=function toggleIsAllSelected(){if(isAllSelected||isIndeterminate){setSelectedItems([]);}else{setSelectedItems(items);}};var isSelectedItem=function isSelectedItem(id){return!!selectedItems.find(function(item){return item===id;});};useEffect(function(){setIsAllSelected(selectedItems.length===items.length);setIsIndeterminate(!!selectedItems.length&&selectedItems.length<items.length);},[selectedItems,items]);return{selectedItems:selectedItems,isAllSelected:isAllSelected,isIndeterminate:isIndeterminate,toggleSelectedItem:toggleSelectedItem,toggleIsAllSelected:toggleIsAllSelected,isSelectedItem:isSelectedItem};};export default useBulkSelect;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/hooks/useBulkSelect.js"],"names":["useEffect","useState","useBulkSelect","items","selectedItems","setSelectedItems","isAllSelected","setIsAllSelected","isIndeterminate","setIsIndeterminate","toggleSelectedItem","id","isAlreadySelected","find","item","filter","toggleIsAllSelected","isSelectedItem","length"],"mappings":"oNAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,KAAK,CAAI,eACaF,QAAQ,CAAC,EAAD,CADrB,wCACtBG,aADsB,eACPC,gBADO,8BAEaJ,QAAQ,CAAC,KAAD,CAFrB,yCAEtBK,aAFsB,eAEPC,gBAFO,8BAGiBN,QAAQ,CAAC,KAAD,CAHzB,yCAGtBO,eAHsB,eAGLC,kBAHK,eAK7B,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,EAAE,CAAI,CAC/B,GAAMC,CAAAA,iBAAiB,CAAGR,aAAa,CAACS,IAAd,CAAmB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,GAAKH,EAAb,EAAvB,CAA1B,CACA,GAAIC,iBAAJ,CAAuB,CACrBP,gBAAgB,CAACD,aAAa,CAACW,MAAd,CAAqB,SAAAD,IAAI,QAAIA,CAAAA,IAAI,GAAKH,EAAb,EAAzB,CAAD,CAAhB,CACD,CAFD,IAEO,CACLN,gBAAgB,8BAAKD,aAAL,GAAoBO,EAApB,GAAhB,CACD,CACF,CAPD,CASA,GAAMK,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAChC,GAAIV,aAAa,EAAIE,eAArB,CAAsC,CACpCH,gBAAgB,CAAC,EAAD,CAAhB,CACD,CAFD,IAEO,CACLA,gBAAgB,CAACF,KAAD,CAAhB,CACD,CACF,CAND,CAQA,GAAMc,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAN,EAAE,CAAI,CAC3B,MAAO,CAAC,CAACP,aAAa,CAACS,IAAd,CAAmB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,GAAKH,EAAb,EAAvB,CAAT,CACD,CAFD,CAIAX,SAAS,CAAC,UAAM,CACdO,gBAAgB,CAACH,aAAa,CAACc,MAAd,GAAyBf,KAAK,CAACe,MAAhC,CAAhB,CACAT,kBAAkB,CAAC,CAAC,CAACL,aAAa,CAACc,MAAhB,EAA0Bd,aAAa,CAACc,MAAd,CAAuBf,KAAK,CAACe,MAAxD,CAAlB,CACD,CAHQ,CAGN,CAACd,aAAD,CAAgBD,KAAhB,CAHM,CAAT,CAKA,MAAO,CAAEC,aAAa,CAAbA,aAAF,CAAiBE,aAAa,CAAbA,aAAjB,CAAgCE,eAAe,CAAfA,eAAhC,CAAiDE,kBAAkB,CAAlBA,kBAAjD,CAAqEM,mBAAmB,CAAnBA,mBAArE,CAA0FC,cAAc,CAAdA,cAA1F,CAAP,CACD,CAhCD,CAkCA,cAAef,CAAAA,aAAf","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useBulkSelect = items => {\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [isAllSelected, setIsAllSelected] = useState(false);\n  const [isIndeterminate, setIsIndeterminate] = useState(false);\n\n  const toggleSelectedItem = id => {\n    const isAlreadySelected = selectedItems.find(item => item === id);\n    if (isAlreadySelected) {\n      setSelectedItems(selectedItems.filter(item => item !== id));\n    } else {\n      setSelectedItems([...selectedItems, id]);\n    }\n  };\n\n  const toggleIsAllSelected = () => {\n    if (isAllSelected || isIndeterminate) {\n      setSelectedItems([]);\n    } else {\n      setSelectedItems(items);\n    }\n  };\n\n  const isSelectedItem = id => {\n    return !!selectedItems.find(item => item === id);\n  };\n\n  useEffect(() => {\n    setIsAllSelected(selectedItems.length === items.length);\n    setIsIndeterminate(!!selectedItems.length && selectedItems.length < items.length);\n  }, [selectedItems, items]);\n\n  return { selectedItems, isAllSelected, isIndeterminate, toggleSelectedItem, toggleIsAllSelected, isSelectedItem };\n};\n\nexport default useBulkSelect;\n"]},"metadata":{},"sourceType":"module"}