{"ast":null,"code":"import _objectSpread from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{Fragment,useState}from'react';import{isIterableArray}from'../../helpers/utils';import{Card,CardBody,Collapse}from'reactstrap';import FalconCardHeader from'../common/FalconCardHeader';import ExperienceSummary from'./ExperienceSummary';import classNames from'classnames';import Loader from'../common/Loader';import ExperienceForm from'./ExperienceForm';import Flex from'../common/Flex';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import useFakeFetch from'../../hooks/useFakeFetch';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{createElement as _createElement}from\"react\";var Experience=function Experience(_ref){var rawExperiences=_ref.experiences,isEditable=_ref.isEditable,isOpen=_ref.isOpen,rest=_objectWithoutProperties(_ref,[\"experiences\",\"isEditable\",\"isOpen\"]);// Data\nvar _useFakeFetch=useFakeFetch(rawExperiences),loadingExperiences=_useFakeFetch.loading,experiences=_useFakeFetch.data,setExperiences=_useFakeFetch.setData;var _useState=useState(isOpen),_useState2=_slicedToArray(_useState,2),collapse=_useState2[0],setCollapse=_useState2[1];return/*#__PURE__*/_jsxs(Card,_objectSpread(_objectSpread({},rest),{},{children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Experience\",light:!isEditable}),/*#__PURE__*/_jsxs(CardBody,{className:classNames('fs--1',{'bg-light':isEditable}),children:[isEditable&&/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsxs(Flex,{align:\"center\",className:\"mb-4 text-primary cursor-pointer fs-0\",id:\"togglerAddExperience\",onClick:function onClick(){setCollapse(!collapse);},children:[/*#__PURE__*/_jsx(\"span\",{className:\"circle-dashed\",children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"plus\"})}),/*#__PURE__*/_jsx(\"span\",{className:\"ml-3\",children:\"Add new experience\"})]}),/*#__PURE__*/_jsxs(Collapse,{toggler:\"#togglerAddExperience\",isOpen:collapse,children:[/*#__PURE__*/_jsx(ExperienceForm,{experiences:experiences,setExperiences:setExperiences}),/*#__PURE__*/_jsx(\"hr\",{className:\"border-dashed border-bottom-0 my-4\"})]})]}),loadingExperiences?/*#__PURE__*/_jsx(Loader,{}):isIterableArray(experiences)&&experiences.map(function(experience,index){return/*#__PURE__*/_createElement(ExperienceSummary,_objectSpread(_objectSpread({},experience),{},{isEditable:isEditable,key:index}));})]})]}));};Experience.defaultProps={isEditable:false,isOpen:false};export default Experience;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/experience/Experience.js"],"names":["React","Fragment","useState","isIterableArray","Card","CardBody","Collapse","FalconCardHeader","ExperienceSummary","classNames","Loader","ExperienceForm","Flex","FontAwesomeIcon","useFakeFetch","Experience","rawExperiences","experiences","isEditable","isOpen","rest","loadingExperiences","loading","data","setExperiences","setData","collapse","setCollapse","map","experience","index","defaultProps"],"mappings":"qUAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,QAA1B,KAA0C,OAA1C,CAEA,OAASC,eAAT,KAAgC,qBAAhC,CACA,OAASC,IAAT,CAAeC,QAAf,CAAyBC,QAAzB,KAAyC,YAAzC,CACA,MAAOC,CAAAA,gBAAP,KAA6B,4BAA7B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,qBAA9B,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,MAAOC,CAAAA,MAAP,KAAmB,kBAAnB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,MAAOC,CAAAA,YAAP,KAAyB,0BAAzB,C,2IAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAAkE,IAAlDC,CAAAA,cAAkD,MAA/DC,WAA+D,CAAlCC,UAAkC,MAAlCA,UAAkC,CAAtBC,MAAsB,MAAtBA,MAAsB,CAAXC,IAAW,sEACnF;AADmF,kBAECN,YAAY,CAACE,cAAD,CAFb,CAElEK,kBAFkE,eAE3EC,OAF2E,CAExCL,WAFwC,eAE9CM,IAF8C,CAElBC,cAFkB,eAE3BC,OAF2B,eAInDvB,QAAQ,CAACiB,MAAD,CAJ2C,wCAI5EO,QAJ4E,eAIlEC,WAJkE,eAMnF,mBACE,MAAC,IAAD,gCAAUP,IAAV,6BACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,YAAxB,CAAqC,KAAK,CAAE,CAACF,UAA7C,EADF,cAEE,MAAC,QAAD,EAAU,SAAS,CAAET,UAAU,CAAC,OAAD,CAAU,CAAE,WAAYS,UAAd,CAAV,CAA/B,WACGA,UAAU,eACT,MAAC,QAAD,yBACE,MAAC,IAAD,EACE,KAAK,CAAC,QADR,CAEE,SAAS,CAAC,uCAFZ,CAGE,EAAE,CAAC,sBAHL,CAIE,OAAO,CAAE,kBAAM,CACbS,WAAW,CAAC,CAACD,QAAF,CAAX,CACD,CANH,wBAQE,aAAM,SAAS,CAAC,eAAhB,uBACE,KAAC,eAAD,EAAiB,IAAI,CAAC,MAAtB,EADF,EARF,cAWE,aAAM,SAAS,CAAC,MAAhB,gCAXF,GADF,cAcE,MAAC,QAAD,EAAU,OAAO,CAAC,uBAAlB,CAA0C,MAAM,CAAEA,QAAlD,wBACE,KAAC,cAAD,EAAgB,WAAW,CAAET,WAA7B,CAA0C,cAAc,CAAEO,cAA1D,EADF,cAEE,WAAI,SAAS,CAAC,oCAAd,EAFF,GAdF,GAFJ,CAsBGH,kBAAkB,cACjB,KAAC,MAAD,IADiB,CAGjBlB,eAAe,CAACc,WAAD,CAAf,EACAA,WAAW,CAACW,GAAZ,CAAgB,SAACC,UAAD,CAAaC,KAAb,qBACd,eAAC,iBAAD,gCAAuBD,UAAvB,MAAmC,UAAU,CAAEX,UAA/C,CAA2D,GAAG,CAAEY,KAAhE,GADc,EAAhB,CA1BJ,GAFF,IADF,CAoCD,CA1CD,CAkDAf,UAAU,CAACgB,YAAX,CAA0B,CAAEb,UAAU,CAAE,KAAd,CAAqBC,MAAM,CAAE,KAA7B,CAA1B,CAEA,cAAeJ,CAAAA,UAAf","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { isIterableArray } from '../../helpers/utils';\nimport { Card, CardBody, Collapse } from 'reactstrap';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport ExperienceSummary from './ExperienceSummary';\nimport classNames from 'classnames';\nimport Loader from '../common/Loader';\nimport ExperienceForm from './ExperienceForm';\nimport Flex from '../common/Flex';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport useFakeFetch from '../../hooks/useFakeFetch';\n\nconst Experience = ({ experiences: rawExperiences, isEditable, isOpen, ...rest }) => {\n  // Data\n  const { loading: loadingExperiences, data: experiences, setData: setExperiences } = useFakeFetch(rawExperiences);\n\n  const [collapse, setCollapse] = useState(isOpen);\n\n  return (\n    <Card {...rest}>\n      <FalconCardHeader title=\"Experience\" light={!isEditable} />\n      <CardBody className={classNames('fs--1', { 'bg-light': isEditable })}>\n        {isEditable && (\n          <Fragment>\n            <Flex\n              align=\"center\"\n              className=\"mb-4 text-primary cursor-pointer fs-0\"\n              id=\"togglerAddExperience\"\n              onClick={() => {\n                setCollapse(!collapse);\n              }}\n            >\n              <span className=\"circle-dashed\">\n                <FontAwesomeIcon icon=\"plus\" />\n              </span>\n              <span className=\"ml-3\">Add new experience</span>\n            </Flex>\n            <Collapse toggler=\"#togglerAddExperience\" isOpen={collapse}>\n              <ExperienceForm experiences={experiences} setExperiences={setExperiences} />\n              <hr className=\"border-dashed border-bottom-0 my-4\" />\n            </Collapse>\n          </Fragment>\n        )}\n        {loadingExperiences ? (\n          <Loader />\n        ) : (\n          isIterableArray(experiences) &&\n          experiences.map((experience, index) => (\n            <ExperienceSummary {...experience} isEditable={isEditable} key={index} />\n          ))\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nExperience.propTypes = {\n  experiences: PropTypes.array,\n  isEditable: PropTypes.bool,\n  isOpen: PropTypes.bool\n};\n\nExperience.defaultProps = { isEditable: false, isOpen: false };\n\nexport default Experience;\n"]},"metadata":{},"sourceType":"module"}