{"ast":null,"code":"import React,{Fragment}from'react';import{Button,Card,CardBody}from'reactstrap';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import PageHeader from'../common/PageHeader';import FalconCardHeader from'../common/FalconCardHeader';import FalconEditor from'../common/FalconEditor';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var popoversExampleCode=\"function popoversExample() {\\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\\n  const [isOpenRight, setIsOpenRight] = useState(false);\\n  const [isOpenTop, setIsOpenTop] = useState(false);\\n  const [isOpenBottom, setIsOpenBottom] = useState(false);\\n  \\n  return(\\n    <Fragment>\\n      <Button id=\\\"Popover3\\\" className=\\\"mr-2\\\" type=\\\"button\\\">\\n        Popover on top\\n      </Button>\\n      <Popover \\n        placement=\\\"top\\\" \\n        isOpen={isOpenTop} \\n        target=\\\"Popover3\\\" \\n        toggle={() => setIsOpenTop(!isOpenTop)}\\n      >\\n        <PopoverHeader>Popover Title</PopoverHeader>\\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\\n      </Popover>\\n\\n      <Button id=\\\"Popover4\\\" className=\\\"mr-2\\\" type=\\\"button\\\">\\n        Popover on Bottom\\n      </Button>\\n      <Popover\\n        placement=\\\"bottom\\\"\\n        isOpen={isOpenBottom}\\n        target=\\\"Popover4\\\"\\n        toggle={() => setIsOpenBottom(!isOpenBottom)}\\n      >\\n        <PopoverHeader>Popover Title</PopoverHeader>\\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\\n      </Popover>\\n      \\n      <Button id=\\\"Popover1\\\" className=\\\"mr-2\\\" type=\\\"button\\\">\\n        Popover on left\\n      </Button>\\n      \\n      <Popover \\n        placement=\\\"left\\\" \\n        isOpen={isOpenLeft} \\n        target=\\\"Popover1\\\" \\n        toggle={() => setIsOpenLeft(!isOpenLeft)}\\n      >\\n        <PopoverHeader>Popover Title</PopoverHeader>\\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\\n      </Popover>\\n\\n      <Button id=\\\"Popover2\\\" type=\\\"button\\\">\\n        Popover on right\\n      </Button>\\n      <Popover \\n        placement=\\\"right\\\" \\n        isOpen={isOpenRight} \\n        target=\\\"Popover2\\\" \\n        toggle={() => setIsOpenRight(!isOpenRight)}\\n      >\\n        <PopoverHeader>Popover Title</PopoverHeader>\\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\\n      </Popover>\\n     </Fragment>\\n  );\\n}\";var propertiesCode=\"Popover.propTypes = {\\n  // space separated list of triggers (e.g. \\\"click hover focus\\\")\\n  trigger: PropTypes.string,\\n  // boolean to control the state of the popover\\n  isOpen:  PropTypes.bool,\\n  // callback for toggling isOpen in the controlling component\\n  toggle:  PropTypes.func,\\n  // boundaries for popper, can be scrollParent, window, viewport, or any DOM element\\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\\n  target:  PropTypes.oneOfType([\\n    PropTypes.string,\\n    PropTypes.func,\\n    DOMElement, // instanceof Element (https://developer.mozilla.org/en-US/docs/Web/API/Element)\\n  ]).isRequired,\\n  // Where to inject the popper DOM node, default to body\\n  container: PropTypes.oneOfType([PropTypes.string, PropTypes.func, DOMElement]),\\n  className: PropTypes.string,\\n  // Apply class to the inner-popover\\n  innerClassName: PropTypes.string,\\n  disabled: PropTypes.bool,\\n  hideArrow: PropTypes.bool,\\n  placementPrefix: PropTypes.string,\\n  delay: PropTypes.oneOfType([\\n    PropTypes.shape({ show: PropTypes.number, hide: PropTypes.number }),\\n    PropTypes.number,\\n  ]),\\n  placement: PropTypes.oneOf([\\n    'auto',\\n    'auto-start',\\n    'auto-end',\\n    'top',\\n    'top-start',\\n    'top-end',\\n    'right',\\n    'right-start',\\n    'right-end',\\n    'bottom',\\n    'bottom-start',\\n    'bottom-end',\\n    'left',\\n    'left-start',\\n    'left-end',\\n  ]),\\n  // Custom modifiers that are passed to Popper.js, see https://popper.js.org/popper-documentation.html#modifiers\\n  modifiers: PropTypes.object,\\n  offset: PropTypes.oneOfType([\\n    PropTypes.string,\\n    PropTypes.number\\n  ]),\\n\\n  // Whether to show/hide the popover with a fade effect\\n  // (default: true)\\n  fade: PropTypes.bool,\\n\\n  // Whether to flip the direction of the popover if too close to\\n  // the container edge\\n  // (default: true)\\n  flip: PropTypes.bool,\\n}\";var Popovers=function Popovers(){return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(PageHeader,{title:\"Popovers\",description:\"Documentation and examples for showing pagination to indicate a series of related content exists across multiple pages.\",className:\"mb-3\",children:/*#__PURE__*/_jsxs(Button,{tag:\"a\",href:\"https://reactstrap.github.io/components/buttons\",target:\"_blank\",color:\"link\",size:\"sm\",className:\"pl-0\",children:[\"Popovers on reactstrap\",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"chevron-right\",className:\"ml-1 fs--2\"})]})}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Examples\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:popoversExampleCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Properties\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(\"code\",{className:\"bg-dark d-block p-2\",children:/*#__PURE__*/_jsx(\"pre\",{className:\"text-300\",children:propertiesCode})})})]})]});};export default Popovers;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/bootstrap-components/Popovers.js"],"names":["React","Fragment","Button","Card","CardBody","FontAwesomeIcon","PageHeader","FalconCardHeader","FalconEditor","popoversExampleCode","propertiesCode","Popovers"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,QAAvB,KAAuC,YAAvC,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,MAAOC,CAAAA,UAAP,KAAuB,sBAAvB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,4BAA7B,CACA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,C,wFAEA,GAAMC,CAAAA,mBAAmB,wiEAAzB,CAgEA,GAAMC,CAAAA,cAAc,g3DAApB,CA4DA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,mBACE,MAAC,QAAD,yBACE,KAAC,UAAD,EACE,KAAK,CAAC,UADR,CAEE,WAAW,CAAC,yHAFd,CAGE,SAAS,CAAC,MAHZ,uBAKE,MAAC,MAAD,EACE,GAAG,CAAC,GADN,CAEE,IAAI,CAAC,iDAFP,CAGE,MAAM,CAAC,QAHT,CAIE,KAAK,CAAC,MAJR,CAKE,IAAI,CAAC,IALP,CAME,SAAS,CAAC,MANZ,iDASE,KAAC,eAAD,EAAiB,IAAI,CAAC,eAAtB,CAAsC,SAAS,CAAC,YAAhD,EATF,GALF,EADF,cAkBE,MAAC,IAAD,EAAM,SAAS,CAAC,MAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,UAAxB,CAAmC,KAAK,CAAE,KAA1C,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEF,mBAApB,CAAyC,QAAQ,CAAC,KAAlD,EADF,EAFF,GAlBF,cAwBE,MAAC,IAAD,yBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,YAAxB,CAAqC,KAAK,CAAE,KAA5C,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,aAAM,SAAS,CAAC,qBAAhB,uBACE,YAAK,SAAS,CAAC,UAAf,UAA2BC,cAA3B,EADF,EADF,EAFF,GAxBF,GADF,CAmCD,CApCD,CAsCA,cAAeC,CAAAA,QAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\n\nconst popoversExampleCode = `function popoversExample() {\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\n  const [isOpenRight, setIsOpenRight] = useState(false);\n  const [isOpenTop, setIsOpenTop] = useState(false);\n  const [isOpenBottom, setIsOpenBottom] = useState(false);\n  \n  return(\n    <Fragment>\n      <Button id=\"Popover3\" className=\"mr-2\" type=\"button\">\n        Popover on top\n      </Button>\n      <Popover \n        placement=\"top\" \n        isOpen={isOpenTop} \n        target=\"Popover3\" \n        toggle={() => setIsOpenTop(!isOpenTop)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n\n      <Button id=\"Popover4\" className=\"mr-2\" type=\"button\">\n        Popover on Bottom\n      </Button>\n      <Popover\n        placement=\"bottom\"\n        isOpen={isOpenBottom}\n        target=\"Popover4\"\n        toggle={() => setIsOpenBottom(!isOpenBottom)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n      \n      <Button id=\"Popover1\" className=\"mr-2\" type=\"button\">\n        Popover on left\n      </Button>\n      \n      <Popover \n        placement=\"left\" \n        isOpen={isOpenLeft} \n        target=\"Popover1\" \n        toggle={() => setIsOpenLeft(!isOpenLeft)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n\n      <Button id=\"Popover2\" type=\"button\">\n        Popover on right\n      </Button>\n      <Popover \n        placement=\"right\" \n        isOpen={isOpenRight} \n        target=\"Popover2\" \n        toggle={() => setIsOpenRight(!isOpenRight)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n     </Fragment>\n  );\n}`;\n\nconst propertiesCode = `Popover.propTypes = {\n  // space separated list of triggers (e.g. \"click hover focus\")\n  trigger: PropTypes.string,\n  // boolean to control the state of the popover\n  isOpen:  PropTypes.bool,\n  // callback for toggling isOpen in the controlling component\n  toggle:  PropTypes.func,\n  // boundaries for popper, can be scrollParent, window, viewport, or any DOM element\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\n  target:  PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    DOMElement, // instanceof Element (https://developer.mozilla.org/en-US/docs/Web/API/Element)\n  ]).isRequired,\n  // Where to inject the popper DOM node, default to body\n  container: PropTypes.oneOfType([PropTypes.string, PropTypes.func, DOMElement]),\n  className: PropTypes.string,\n  // Apply class to the inner-popover\n  innerClassName: PropTypes.string,\n  disabled: PropTypes.bool,\n  hideArrow: PropTypes.bool,\n  placementPrefix: PropTypes.string,\n  delay: PropTypes.oneOfType([\n    PropTypes.shape({ show: PropTypes.number, hide: PropTypes.number }),\n    PropTypes.number,\n  ]),\n  placement: PropTypes.oneOf([\n    'auto',\n    'auto-start',\n    'auto-end',\n    'top',\n    'top-start',\n    'top-end',\n    'right',\n    'right-start',\n    'right-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'left',\n    'left-start',\n    'left-end',\n  ]),\n  // Custom modifiers that are passed to Popper.js, see https://popper.js.org/popper-documentation.html#modifiers\n  modifiers: PropTypes.object,\n  offset: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n\n  // Whether to show/hide the popover with a fade effect\n  // (default: true)\n  fade: PropTypes.bool,\n\n  // Whether to flip the direction of the popover if too close to\n  // the container edge\n  // (default: true)\n  flip: PropTypes.bool,\n}`;\n\nconst Popovers = () => {\n  return (\n    <Fragment>\n      <PageHeader\n        title=\"Popovers\"\n        description=\"Documentation and examples for showing pagination to indicate a series of related content exists across multiple pages.\"\n        className=\"mb-3\"\n      >\n        <Button\n          tag=\"a\"\n          href=\"https://reactstrap.github.io/components/buttons\"\n          target=\"_blank\"\n          color=\"link\"\n          size=\"sm\"\n          className=\"pl-0\"\n        >\n          Popovers on reactstrap\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n        </Button>\n      </PageHeader>\n      <Card className=\"mb-3\">\n        <FalconCardHeader title=\"Examples\" light={false} />\n        <CardBody className=\"bg-light\">\n          <FalconEditor code={popoversExampleCode} language=\"jsx\" />\n        </CardBody>\n      </Card>\n      <Card>\n        <FalconCardHeader title=\"Properties\" light={false} />\n        <CardBody className=\"bg-light\">\n          <code className=\"bg-dark d-block p-2\">\n            <pre className=\"text-300\">{propertiesCode}</pre>\n          </code>\n        </CardBody>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default Popovers;\n"]},"metadata":{},"sourceType":"module"}