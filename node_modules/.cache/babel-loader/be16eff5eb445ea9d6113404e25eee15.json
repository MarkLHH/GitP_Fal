{"ast":null,"code":"import _objectSpread from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment}from'react';import{DragDropContext,Droppable,Draggable}from'react-beautiful-dnd';import PageHeader from'../common/PageHeader';import{Button,Card,CardBody,CardHeader,Row,Col}from'reactstrap';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import FalconEditor from'../common/FalconEditor';import{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var DragAndDropCode=\"function DragAndDropExample() {\\n\\n  return (\\n    <DragDropContext onDragEnd={onDragEnd} >\\n      <Row>\\n        <Col>\\n        <h5>List 1</h5>\\n        <Droppable droppableId=\\\"droppable\\\">\\n        {(provided, snapshot) => (\\n            <div\\n                ref={provided.innerRef}\\n                style={getListStyle(snapshot.isDraggingOver)}>\\n                {data.items.map((item, index) => (\\n                    <Draggable\\n                        key={item.id}\\n                        draggableId={item.id}\\n                        index={index}>\\n                        {(provided, snapshot) => (\\n                            <div\\n                                ref={provided.innerRef}\\n                                {...provided.draggableProps}\\n                                {...provided.dragHandleProps}\\n                                style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                )}>\\n                                {item.content}\\n                            </div>\\n                        )}\\n                    </Draggable>\\n                ))}\\n                {provided.placeholder}\\n            </div>\\n            )}\\n         </Droppable>\\n        </Col>\\n        <Col>\\n        <h5>List 2</h5>\\n        <Droppable droppableId=\\\"droppable2\\\">\\n        {(provided, snapshot) => (\\n            <div\\n                ref={provided.innerRef}\\n                style={getListStyle(snapshot.isDraggingOver)}>\\n                {data.selected.map((item, index) => (\\n                    <Draggable\\n                        key={item.id}\\n                        draggableId={item.id}\\n                        index={index}>\\n                        {(provided, snapshot) => (\\n                            <div\\n                                ref={provided.innerRef}\\n                                {...provided.draggableProps}\\n                                {...provided.dragHandleProps}\\n                                style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                )}>\\n                                {item.content}\\n                            </div>\\n                        )}\\n                    </Draggable>\\n                ))}\\n                {provided.placeholder}\\n            </div>\\n           )}\\n          </Droppable>\\n        </Col>\\n      </Row>\\n</DragDropContext>)\\n}\";var getItems=function getItems(count){var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;return Array.from({length:count},function(v,k){return k;}).map(function(k){return{id:\"item-\".concat(k+offset),content:\"item \".concat(k+offset)};});};// a little function to help us with reordering the result\nvar reorder=function reorder(list,startIndex,endIndex){var result=Array.from(list);var _result$splice=result.splice(startIndex,1),_result$splice2=_slicedToArray(_result$splice,1),removed=_result$splice2[0];result.splice(endIndex,0,removed);return result;};/**\r\n * Moves an item from one list to another list.\r\n */var move=function move(source,destination,droppableSource,droppableDestination){var sourceClone=Array.from(source);var destClone=Array.from(destination);var _sourceClone$splice=sourceClone.splice(droppableSource.index,1),_sourceClone$splice2=_slicedToArray(_sourceClone$splice,1),removed=_sourceClone$splice2[0];destClone.splice(droppableDestination.index,0,removed);var result={};result[droppableSource.droppableId]=sourceClone;result[droppableDestination.droppableId]=destClone;return result;};var grid=8;var getItemStyle=function getItemStyle(isDragging,draggableStyle){return _objectSpread({// some basic styles to make the items look a bit nicer\nuserSelect:'none',padding:grid*2,margin:\"0 0 \".concat(grid,\"px 0\"),// change background colour if dragging\nbackground:isDragging?'lightgreen':'#FFF'},draggableStyle);};var getListStyle=function getListStyle(isDraggingOver){return{background:isDraggingOver?'lightblue':'lightgrey',padding:grid,width:250};};var ReactBootstrapTable2=function ReactBootstrapTable2(){var _useState=useState({items:getItems(10),selected:getItems(5,10)}),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var id2List={droppable:'items',droppable2:'selected'};var getList=function getList(id){return data[id2List[id]];};var onDragEnd=function onDragEnd(result){var source=result.source,destination=result.destination;// dropped outside the list\nif(!destination){return;}if(source.droppableId===destination.droppableId){var reorderData=reorder(getList(source.droppableId),source.index,destination.index);setData({items:reorderData,selected:data.selected});if(source.droppableId==='droppable2'){setData(_objectSpread(_objectSpread({},data),{},{selected:reorderData}));}}else{var _result=move(getList(source.droppableId),getList(destination.droppableId),source,destination);setData({items:_result.droppable,selected:_result.droppable2});}};return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(PageHeader,{title:\"React Beautiful DnD\",description:\"Intuitive to use.\\r Compatible for Bootstrap 3 and 4.\\r Better than legacy react-bootstrap-table!!. It has Rich Functionality - Sortable, Row Selection, Cell Editor, Row Expand, Column Filter Pagination etc. Easy to Configurable and customizable table.\",className:\"mb-3\",children:/*#__PURE__*/_jsxs(Button,{tag:\"a\",href:\"https://github.com/atlassian/react-beautiful-dnd\",target:\"_blank\",color:\"link\",size:\"sm\",className:\"pl-0\",children:[\"React Beautiful DnD Documentation\",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"chevron-right\",className:\"ml-1 fs--2\"})]})}),/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(CardHeader,{className:\"bg-light\",children:/*#__PURE__*/_jsx(\"h4\",{className:\"mb-0\",children:\"Example\"})}),/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(FalconEditor,{code:DragAndDropCode,scope:{DragDropContext:DragDropContext,Droppable:Droppable,Draggable:Draggable,data:data,setData:setData,onDragEnd:onDragEnd,getListStyle:getListStyle,getItemStyle:getItemStyle},language:\"jsx\"})})})})]})]});};export default ReactBootstrapTable2;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/plugins/ReactBeautifulDnD.js"],"names":["React","Fragment","DragDropContext","Droppable","Draggable","PageHeader","Button","Card","CardBody","CardHeader","Row","Col","FontAwesomeIcon","FalconEditor","useState","DragAndDropCode","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","ReactBootstrapTable2","items","selected","data","setData","id2List","droppable","droppable2","getList","onDragEnd","reorderData"],"mappings":"2MAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,eAAT,CAA0BC,SAA1B,CAAqCC,SAArC,KAAsD,qBAAtD,CAEA,MAAOC,CAAAA,UAAP,KAAuB,sBAAvB,CACA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,QAAvB,CAAiCC,UAAjC,CAA6CC,GAA7C,CAAkDC,GAAlD,KAA6D,YAA7D,CACA,OAASC,eAAT,KAAgC,gCAAhC,CAEA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,CACA,OAASC,QAAT,KAAyB,OAAzB,C,wFAEA,GAAMC,CAAAA,eAAe,iiFAArB,CAuEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,KAAQC,CAAAA,MAAR,2DAAiB,CAAjB,OACfC,CAAAA,KAAK,CAACC,IAAN,CAAW,CAAEC,MAAM,CAAEJ,KAAV,CAAX,CAA8B,SAACK,CAAD,CAAIC,CAAJ,QAAUA,CAAAA,CAAV,EAA9B,EAA2CC,GAA3C,CAA+C,SAAAD,CAAC,QAAK,CACnDE,EAAE,gBAAUF,CAAC,CAAGL,MAAd,CADiD,CAEnDQ,OAAO,gBAAUH,CAAC,CAAGL,MAAd,CAF4C,CAAL,EAAhD,CADe,EAAjB,CAMA;AACA,GAAMS,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,IAAD,CAAOC,UAAP,CAAmBC,QAAnB,CAAgC,CAC9C,GAAMC,CAAAA,MAAM,CAAGZ,KAAK,CAACC,IAAN,CAAWQ,IAAX,CAAf,CAD8C,mBAE5BG,MAAM,CAACC,MAAP,CAAcH,UAAd,CAA0B,CAA1B,CAF4B,kDAEvCI,OAFuC,oBAG9CF,MAAM,CAACC,MAAP,CAAcF,QAAd,CAAwB,CAAxB,CAA2BG,OAA3B,EAEA,MAAOF,CAAAA,MAAP,CACD,CAND,CAQA;AACA;AACA,GACA,GAAMG,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,MAAD,CAASC,WAAT,CAAsBC,eAAtB,CAAuCC,oBAAvC,CAAgE,CAC3E,GAAMC,CAAAA,WAAW,CAAGpB,KAAK,CAACC,IAAN,CAAWe,MAAX,CAApB,CACA,GAAMK,CAAAA,SAAS,CAAGrB,KAAK,CAACC,IAAN,CAAWgB,WAAX,CAAlB,CAF2E,wBAGzDG,WAAW,CAACP,MAAZ,CAAmBK,eAAe,CAACI,KAAnC,CAA0C,CAA1C,CAHyD,4DAGpER,OAHoE,yBAK3EO,SAAS,CAACR,MAAV,CAAiBM,oBAAoB,CAACG,KAAtC,CAA6C,CAA7C,CAAgDR,OAAhD,EAEA,GAAMF,CAAAA,MAAM,CAAG,EAAf,CACAA,MAAM,CAACM,eAAe,CAACK,WAAjB,CAAN,CAAsCH,WAAtC,CACAR,MAAM,CAACO,oBAAoB,CAACI,WAAtB,CAAN,CAA2CF,SAA3C,CAEA,MAAOT,CAAAA,MAAP,CACD,CAZD,CAcA,GAAMY,CAAAA,IAAI,CAAG,CAAb,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,UAAD,CAAaC,cAAb,wBACnB;AACAC,UAAU,CAAE,MAFO,CAGnBC,OAAO,CAAEL,IAAI,CAAG,CAHG,CAInBM,MAAM,eAASN,IAAT,QAJa,CAMnB;AACAO,UAAU,CAAEL,UAAU,CAAG,YAAH,CAAkB,MAPrB,EAUhBC,cAVgB,GAArB,CAaA,GAAMK,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,cAAc,QAAK,CACtCF,UAAU,CAAEE,cAAc,CAAG,WAAH,CAAiB,WADL,CAEtCJ,OAAO,CAAEL,IAF6B,CAGtCU,KAAK,CAAE,GAH+B,CAAL,EAAnC,CAMA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,eACTxC,QAAQ,CAAC,CAAEyC,KAAK,CAAEvC,QAAQ,CAAC,EAAD,CAAjB,CAAuBwC,QAAQ,CAAExC,QAAQ,CAAC,CAAD,CAAI,EAAJ,CAAzC,CAAD,CADC,wCAC1ByC,IAD0B,eACpBC,OADoB,eAGjC,GAAMC,CAAAA,OAAO,CAAG,CACdC,SAAS,CAAE,OADG,CAEdC,UAAU,CAAE,UAFE,CAAhB,CAKA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAArC,EAAE,QAAIgC,CAAAA,IAAI,CAACE,OAAO,CAAClC,EAAD,CAAR,CAAR,EAAlB,CAEA,GAAMsC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAhC,MAAM,CAAI,IAClBI,CAAAA,MADkB,CACMJ,MADN,CAClBI,MADkB,CACVC,WADU,CACML,MADN,CACVK,WADU,CAG1B;AACA,GAAI,CAACA,WAAL,CAAkB,CAChB,OACD,CAED,GAAID,MAAM,CAACO,WAAP,GAAuBN,WAAW,CAACM,WAAvC,CAAoD,CAClD,GAAMsB,CAAAA,WAAW,CAAGrC,OAAO,CAACmC,OAAO,CAAC3B,MAAM,CAACO,WAAR,CAAR,CAA8BP,MAAM,CAACM,KAArC,CAA4CL,WAAW,CAACK,KAAxD,CAA3B,CAEAiB,OAAO,CAAC,CAAEH,KAAK,CAAES,WAAT,CAAsBR,QAAQ,CAAEC,IAAI,CAACD,QAArC,CAAD,CAAP,CAEA,GAAIrB,MAAM,CAACO,WAAP,GAAuB,YAA3B,CAAyC,CACvCgB,OAAO,gCAAMD,IAAN,MAAYD,QAAQ,CAAEQ,WAAtB,GAAP,CACD,CACF,CARD,IAQO,CACL,GAAMjC,CAAAA,OAAM,CAAGG,IAAI,CAAC4B,OAAO,CAAC3B,MAAM,CAACO,WAAR,CAAR,CAA8BoB,OAAO,CAAC1B,WAAW,CAACM,WAAb,CAArC,CAAgEP,MAAhE,CAAwEC,WAAxE,CAAnB,CAEAsB,OAAO,CAAC,CACNH,KAAK,CAAExB,OAAM,CAAC6B,SADR,CAENJ,QAAQ,CAAEzB,OAAM,CAAC8B,UAFX,CAAD,CAAP,CAID,CACF,CAxBD,CA0BA,mBACE,MAAC,QAAD,yBACE,KAAC,UAAD,EACE,KAAK,CAAC,qBADR,CAEE,WAAW,CAAC,8PAFd,CAKE,SAAS,CAAC,MALZ,uBAOE,MAAC,MAAD,EACE,GAAG,CAAC,GADN,CAEE,IAAI,CAAC,kDAFP,CAGE,MAAM,CAAC,QAHT,CAIE,KAAK,CAAC,MAJR,CAKE,IAAI,CAAC,IALP,CAME,SAAS,CAAC,MANZ,4DASE,KAAC,eAAD,EAAiB,IAAI,CAAC,eAAtB,CAAsC,SAAS,CAAC,YAAhD,EATF,GAPF,EADF,cAoBE,MAAC,IAAD,yBACE,KAAC,UAAD,EAAY,SAAS,CAAC,UAAtB,uBACE,WAAI,SAAS,CAAC,MAAd,qBADF,EADF,cAIE,KAAC,QAAD,wBACE,KAAC,GAAD,wBACE,KAAC,GAAD,wBACE,KAAC,YAAD,EACE,IAAI,CAAE9C,eADR,CAEE,KAAK,CAAE,CAAEb,eAAe,CAAfA,eAAF,CAAmBC,SAAS,CAATA,SAAnB,CAA8BC,SAAS,CAATA,SAA9B,CAAyCqD,IAAI,CAAJA,IAAzC,CAA+CC,OAAO,CAAPA,OAA/C,CAAwDK,SAAS,CAATA,SAAxD,CAAmEZ,YAAY,CAAZA,YAAnE,CAAiFP,YAAY,CAAZA,YAAjF,CAFT,CAGE,QAAQ,CAAC,KAHX,EADF,EADF,EADF,EAJF,GApBF,GADF,CAwCD,CA5ED,CA8EA,cAAeU,CAAAA,oBAAf","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nimport PageHeader from '../common/PageHeader';\r\nimport { Button, Card, CardBody, CardHeader, Row, Col } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport FalconEditor from '../common/FalconEditor';\r\nimport { useState } from 'react';\r\n\r\nconst DragAndDropCode = `function DragAndDropExample() {\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd} >\r\n      <Row>\r\n        <Col>\r\n        <h5>List 1</h5>\r\n        <Droppable droppableId=\"droppable\">\r\n        {(provided, snapshot) => (\r\n            <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {data.items.map((item, index) => (\r\n                    <Draggable\r\n                        key={item.id}\r\n                        draggableId={item.id}\r\n                        index={index}>\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.draggableProps}\r\n                                {...provided.dragHandleProps}\r\n                                style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                )}>\r\n                                {item.content}\r\n                            </div>\r\n                        )}\r\n                    </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n            </div>\r\n            )}\r\n         </Droppable>\r\n        </Col>\r\n        <Col>\r\n        <h5>List 2</h5>\r\n        <Droppable droppableId=\"droppable2\">\r\n        {(provided, snapshot) => (\r\n            <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {data.selected.map((item, index) => (\r\n                    <Draggable\r\n                        key={item.id}\r\n                        draggableId={item.id}\r\n                        index={index}>\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.draggableProps}\r\n                                {...provided.dragHandleProps}\r\n                                style={getItemStyle(\r\n                                    snapshot.isDragging,\r\n                                    provided.draggableProps.style\r\n                                )}>\r\n                                {item.content}\r\n                            </div>\r\n                        )}\r\n                    </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n            </div>\r\n           )}\r\n          </Droppable>\r\n        </Col>\r\n      </Row>\r\n</DragDropContext>)\r\n}`;\r\n\r\nconst getItems = (count, offset = 0) =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k + offset}`,\r\n    content: `item ${k + offset}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : '#FFF',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  padding: grid,\r\n  width: 250\r\n});\r\n\r\nconst ReactBootstrapTable2 = () => {\r\n  const [data, setData] = useState({ items: getItems(10), selected: getItems(5, 10) });\r\n\r\n  const id2List = {\r\n    droppable: 'items',\r\n    droppable2: 'selected'\r\n  };\r\n\r\n  const getList = id => data[id2List[id]];\r\n\r\n  const onDragEnd = result => {\r\n    const { source, destination } = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const reorderData = reorder(getList(source.droppableId), source.index, destination.index);\r\n\r\n      setData({ items: reorderData, selected: data.selected });\r\n\r\n      if (source.droppableId === 'droppable2') {\r\n        setData({ ...data, selected: reorderData });\r\n      }\r\n    } else {\r\n      const result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\r\n\r\n      setData({\r\n        items: result.droppable,\r\n        selected: result.droppable2\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageHeader\r\n        title=\"React Beautiful DnD\"\r\n        description=\"Intuitive to use.\r\n        Compatible for Bootstrap 3 and 4.\r\n        Better than legacy react-bootstrap-table!!. It has Rich Functionality - Sortable, Row Selection, Cell Editor, Row Expand, Column Filter Pagination etc. Easy to Configurable and customizable table.\"\r\n        className=\"mb-3\"\r\n      >\r\n        <Button\r\n          tag=\"a\"\r\n          href=\"https://github.com/atlassian/react-beautiful-dnd\"\r\n          target=\"_blank\"\r\n          color=\"link\"\r\n          size=\"sm\"\r\n          className=\"pl-0\"\r\n        >\r\n          React Beautiful DnD Documentation\r\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\r\n        </Button>\r\n      </PageHeader>\r\n      <Card>\r\n        <CardHeader className=\"bg-light\">\r\n          <h4 className=\"mb-0\">Example</h4>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Col>\r\n              <FalconEditor\r\n                code={DragAndDropCode}\r\n                scope={{ DragDropContext, Droppable, Draggable, data, setData, onDragEnd, getListStyle, getItemStyle }}\r\n                language=\"jsx\"\r\n              />\r\n              {/* <PurchasesTable /> */}\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ReactBootstrapTable2;\r\n"]},"metadata":{},"sourceType":"module"}