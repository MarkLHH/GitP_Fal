{"ast":null,"code":"import React from'react';import{isIterableArray}from'../../helpers/utils';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import Flex from'./Flex';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Avatar=function Avatar(_ref){var size=_ref.size,rounded=_ref.rounded,src=_ref.src,name=_ref.name,emoji=_ref.emoji,className=_ref.className,mediaClass=_ref.mediaClass,isExact=_ref.isExact,icon=_ref.icon;var classNames=['avatar',\"avatar-\".concat(size),className].join(' ');var mediaClasses=[rounded?\"rounded-\".concat(rounded):'rounded',mediaClass].join(' ');var getAvatar=function getAvatar(){if(src){if(isIterableArray(src)){return/*#__PURE__*/_jsxs(\"div\",{className:\"\".concat(mediaClasses,\" overflow-hidden h-100 d-flex\"),children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-50 border-right\",children:/*#__PURE__*/_jsx(\"img\",{src:src[0],alt:\"\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"w-50 d-flex flex-column\",children:[/*#__PURE__*/_jsx(\"img\",{src:src[1],alt:\"\",className:\"h-50 border-bottom\"}),/*#__PURE__*/_jsx(\"img\",{src:src[2],alt:\"\",className:\"h-50\"})]})]});}else{return/*#__PURE__*/_jsx(\"img\",{className:mediaClasses,src:src,alt:\"\"});}}if(name){return/*#__PURE__*/_jsx(\"div\",{className:\"avatar-name \".concat(mediaClasses),children:/*#__PURE__*/_jsx(\"span\",{children:isExact?name:name.match(/\\b\\w/g).join('')})});}if(icon){return/*#__PURE__*/_jsx(Flex,{className:\"avatar-name \".concat(mediaClasses,\" flex-center\"),children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:icon})});}return/*#__PURE__*/_jsx(\"div\",{className:\"avatar-emoji \".concat(mediaClasses),children:/*#__PURE__*/_jsx(\"span\",{role:\"img\",\"aria-label\":\"Emoji\",children:emoji})});};return/*#__PURE__*/_jsx(\"div\",{className:classNames,children:getAvatar()});};Avatar.defaultProps={size:'xl',rounded:'circle',emoji:'ðŸ˜Š',isExact:false};export default Avatar;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/common/Avatar.js"],"names":["React","isIterableArray","FontAwesomeIcon","Flex","Avatar","size","rounded","src","name","emoji","className","mediaClass","isExact","icon","classNames","join","mediaClasses","getAvatar","match","defaultProps"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,eAAT,KAAgC,qBAAhC,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,C,wFAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAA+E,IAA5EC,CAAAA,IAA4E,MAA5EA,IAA4E,CAAtEC,OAAsE,MAAtEA,OAAsE,CAA7DC,GAA6D,MAA7DA,GAA6D,CAAxDC,IAAwD,MAAxDA,IAAwD,CAAlDC,KAAkD,MAAlDA,KAAkD,CAA3CC,SAA2C,MAA3CA,SAA2C,CAAhCC,UAAgC,MAAhCA,UAAgC,CAApBC,OAAoB,MAApBA,OAAoB,CAAXC,IAAW,MAAXA,IAAW,CAC5F,GAAMC,CAAAA,UAAU,CAAG,CAAC,QAAD,kBAAqBT,IAArB,EAA6BK,SAA7B,EAAwCK,IAAxC,CAA6C,GAA7C,CAAnB,CACA,GAAMC,CAAAA,YAAY,CAAG,CAACV,OAAO,mBAAcA,OAAd,EAA0B,SAAlC,CAA6CK,UAA7C,EAAyDI,IAAzD,CAA8D,GAA9D,CAArB,CAEA,GAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAIV,GAAJ,CAAS,CACP,GAAIN,eAAe,CAACM,GAAD,CAAnB,CAA0B,CACxB,mBACE,aAAK,SAAS,WAAKS,YAAL,iCAAd,wBACE,YAAK,SAAS,CAAC,mBAAf,uBACE,YAAK,GAAG,CAAET,GAAG,CAAC,CAAD,CAAb,CAAkB,GAAG,CAAC,EAAtB,EADF,EADF,cAIE,aAAK,SAAS,CAAC,yBAAf,wBACE,YAAK,GAAG,CAAEA,GAAG,CAAC,CAAD,CAAb,CAAkB,GAAG,CAAC,EAAtB,CAAyB,SAAS,CAAC,oBAAnC,EADF,cAEE,YAAK,GAAG,CAAEA,GAAG,CAAC,CAAD,CAAb,CAAkB,GAAG,CAAC,EAAtB,CAAyB,SAAS,CAAC,MAAnC,EAFF,GAJF,GADF,CAWD,CAZD,IAYO,CACL,mBAAO,YAAK,SAAS,CAAES,YAAhB,CAA8B,GAAG,CAAET,GAAnC,CAAwC,GAAG,CAAC,EAA5C,EAAP,CACD,CACF,CAED,GAAIC,IAAJ,CAAU,CACR,mBACE,YAAK,SAAS,uBAAiBQ,YAAjB,CAAd,uBACE,sBAAOJ,OAAO,CAAGJ,IAAH,CAAUA,IAAI,CAACU,KAAL,CAAW,OAAX,EAAoBH,IAApB,CAAyB,EAAzB,CAAxB,EADF,EADF,CAKD,CAED,GAAIF,IAAJ,CAAU,CACR,mBACE,KAAC,IAAD,EAAM,SAAS,uBAAiBG,YAAjB,gBAAf,uBACE,KAAC,eAAD,EAAiB,IAAI,CAAEH,IAAvB,EADF,EADF,CAKD,CAED,mBACE,YAAK,SAAS,wBAAkBG,YAAlB,CAAd,uBACE,aAAM,IAAI,CAAC,KAAX,CAAiB,aAAW,OAA5B,UACGP,KADH,EADF,EADF,CAOD,CA1CD,CA4CA,mBAAO,YAAK,SAAS,CAAEK,UAAhB,UAA6BG,SAAS,EAAtC,EAAP,CACD,CAjDD,CA8DAb,MAAM,CAACe,YAAP,CAAsB,CACpBd,IAAI,CAAE,IADc,CAEpBC,OAAO,CAAE,QAFW,CAGpBG,KAAK,CAAE,IAHa,CAIpBG,OAAO,CAAE,KAJW,CAAtB,CAOA,cAAeR,CAAAA,MAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes, { array, string } from 'prop-types';\r\nimport { isIterableArray } from '../../helpers/utils';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Flex from './Flex';\r\n\r\nconst Avatar = ({ size, rounded, src, name, emoji, className, mediaClass, isExact, icon }) => {\r\n  const classNames = ['avatar', `avatar-${size}`, className].join(' ');\r\n  const mediaClasses = [rounded ? `rounded-${rounded}` : 'rounded', mediaClass].join(' ');\r\n\r\n  const getAvatar = () => {\r\n    if (src) {\r\n      if (isIterableArray(src)) {\r\n        return (\r\n          <div className={`${mediaClasses} overflow-hidden h-100 d-flex`}>\r\n            <div className=\"w-50 border-right\">\r\n              <img src={src[0]} alt=\"\" />\r\n            </div>\r\n            <div className=\"w-50 d-flex flex-column\">\r\n              <img src={src[1]} alt=\"\" className=\"h-50 border-bottom\" />\r\n              <img src={src[2]} alt=\"\" className=\"h-50\" />\r\n            </div>\r\n          </div>\r\n        );\r\n      } else {\r\n        return <img className={mediaClasses} src={src} alt=\"\" />;\r\n      }\r\n    }\r\n\r\n    if (name) {\r\n      return (\r\n        <div className={`avatar-name ${mediaClasses}`}>\r\n          <span>{isExact ? name : name.match(/\\b\\w/g).join('')}</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (icon) {\r\n      return (\r\n        <Flex className={`avatar-name ${mediaClasses} flex-center`}>\r\n          <FontAwesomeIcon icon={icon} />\r\n        </Flex>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={`avatar-emoji ${mediaClasses}`}>\r\n        <span role=\"img\" aria-label=\"Emoji\">\r\n          {emoji}\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return <div className={classNames}>{getAvatar()}</div>;\r\n};\r\n\r\nAvatar.propTypes = {\r\n  size: PropTypes.oneOf(['s', 'm', 'l', 'xl', '2xl', '3xl', '4xl', '5xl']),\r\n  rounded: PropTypes.string,\r\n  src: PropTypes.oneOfType([array, string]),\r\n  name: PropTypes.string,\r\n  emoji: PropTypes.string,\r\n  className: PropTypes.string,\r\n  mediaClass: PropTypes.string,\r\n  isExact: PropTypes.bool\r\n};\r\n\r\nAvatar.defaultProps = {\r\n  size: 'xl',\r\n  rounded: 'circle',\r\n  emoji: 'ðŸ˜Š',\r\n  isExact: false\r\n};\r\n\r\nexport default Avatar;\r\n"]},"metadata":{},"sourceType":"module"}