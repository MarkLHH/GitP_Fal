{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/auth/PasswordResetForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { Button, Form, FormGroup, Input } from 'reactstrap';\nimport withRedirect from '../../hoc/withRedirect';\nimport Label from 'reactstrap/es/Label';\nimport classNames from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PasswordResetForm = ({\n  setRedirect,\n  setRedirectUrl,\n  layout,\n  hasLabel\n}) => {\n  _s();\n\n  // State\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [isDisabled, setIsDisabled] = useState(true); // Handler\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    toast.success('Login with your new password');\n    setRedirect(true);\n  };\n\n  useEffect(() => {\n    setRedirectUrl(`/authentication/${layout}/login`);\n  }, [setRedirectUrl, layout]);\n  useEffect(() => {\n    if (password === '' || confirmPassword === '') return setIsDisabled(true);\n    setIsDisabled(password !== confirmPassword);\n  }, [password, confirmPassword]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: classNames('mt-3', {\n      'text-left': hasLabel\n    }),\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [hasLabel && /*#__PURE__*/_jsxDEV(Label, {\n        children: \"New Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: !hasLabel ? 'New Password' : '',\n        value: password,\n        onChange: ({\n          target\n        }) => setPassword(target.value),\n        type: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [hasLabel && /*#__PURE__*/_jsxDEV(Label, {\n        children: \"Confirm Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: !hasLabel ? 'Confirm Password' : '',\n        value: confirmPassword,\n        onChange: ({\n          target\n        }) => setConfirmPassword(target.value),\n        type: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      block: true,\n      className: \"mt-3\",\n      disabled: isDisabled,\n      children: \"Set password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PasswordResetForm, \"B6TNcH5eV+EjZK/a/LwcyJgXPoc=\");\n\n_c = PasswordResetForm;\nPasswordResetForm.propTypes = {\n  setRedirect: PropTypes.func.isRequired,\n  setRedirectUrl: PropTypes.func.isRequired,\n  layout: PropTypes.string,\n  hasLabel: PropTypes.bool\n};\nPasswordResetForm.defaultProps = {\n  layout: 'basic',\n  hasLabel: false\n};\nexport default _c2 = withRedirect(PasswordResetForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PasswordResetForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/auth/PasswordResetForm.js"],"names":["React","useState","useEffect","PropTypes","toast","Button","Form","FormGroup","Input","withRedirect","Label","classNames","PasswordResetForm","setRedirect","setRedirectUrl","layout","hasLabel","password","setPassword","confirmPassword","setConfirmPassword","isDisabled","setIsDisabled","handleSubmit","e","preventDefault","success","target","value","propTypes","func","isRequired","string","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { Button, Form, FormGroup, Input } from 'reactstrap';\nimport withRedirect from '../../hoc/withRedirect';\nimport Label from 'reactstrap/es/Label';\nimport classNames from 'classnames';\n\nconst PasswordResetForm = ({ setRedirect, setRedirectUrl, layout, hasLabel }) => {\n  // State\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [isDisabled, setIsDisabled] = useState(true);\n\n  // Handler\n  const handleSubmit = e => {\n    e.preventDefault();\n    toast.success('Login with your new password');\n    setRedirect(true);\n  };\n\n  useEffect(() => {\n    setRedirectUrl(`/authentication/${layout}/login`);\n  }, [setRedirectUrl, layout]);\n\n  useEffect(() => {\n    if (password === '' || confirmPassword === '') return setIsDisabled(true);\n\n    setIsDisabled(password !== confirmPassword);\n  }, [password, confirmPassword]);\n\n  return (\n    <Form className={classNames('mt-3', { 'text-left': hasLabel })} onSubmit={handleSubmit}>\n      <FormGroup>\n        {hasLabel && <Label>New Password</Label>}\n        <Input\n          placeholder={!hasLabel ? 'New Password' : ''}\n          value={password}\n          onChange={({ target }) => setPassword(target.value)}\n          type=\"password\"\n        />\n      </FormGroup>\n      <FormGroup>\n        {hasLabel && <Label>Confirm Password</Label>}\n        <Input\n          placeholder={!hasLabel ? 'Confirm Password' : ''}\n          value={confirmPassword}\n          onChange={({ target }) => setConfirmPassword(target.value)}\n          type=\"password\"\n        />\n      </FormGroup>\n      <Button color=\"primary\" block className=\"mt-3\" disabled={isDisabled}>\n        Set password\n      </Button>\n    </Form>\n  );\n};\n\nPasswordResetForm.propTypes = {\n  setRedirect: PropTypes.func.isRequired,\n  setRedirectUrl: PropTypes.func.isRequired,\n  layout: PropTypes.string,\n  hasLabel: PropTypes.bool\n};\n\nPasswordResetForm.defaultProps = { layout: 'basic', hasLabel: false };\n\nexport default withRedirect(PasswordResetForm);\n"]},"metadata":{},"sourceType":"module"}