{"ast":null,"code":"import _slicedToArray from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment,useState}from'react';import Lightbox from'react-image-lightbox';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var FalconLightBox=function FalconLightBox(_ref){var imgSrc=_ref.imgSrc,children=_ref.children;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isOpen=_useState2[0],setIsOpen=_useState2[1];return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"cursor-pointer\",onClick:function onClick(){return setIsOpen(true);},children:children}),isOpen&&/*#__PURE__*/_jsx(Lightbox,{mainSrc:imgSrc,onCloseRequest:function onCloseRequest(){return setIsOpen(false);},reactModalStyle:{overlay:{zIndex:999999}}})]});};export default FalconLightBox;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/common/FalconLightBox.js"],"names":["React","Fragment","useState","Lightbox","FalconLightBox","imgSrc","children","isOpen","setIsOpen","overlay","zIndex"],"mappings":"sGAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,QAA1B,KAA0C,OAA1C,CAEA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,C,wFAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAA0B,IAAvBC,CAAAA,MAAuB,MAAvBA,MAAuB,CAAfC,QAAe,MAAfA,QAAe,eACnBJ,QAAQ,CAAC,KAAD,CADW,wCACxCK,MADwC,eAChCC,SADgC,eAE/C,mBACE,MAAC,QAAD,yBACE,YAAK,SAAS,CAAC,gBAAf,CAAgC,OAAO,CAAE,yBAAMA,CAAAA,SAAS,CAAC,IAAD,CAAf,EAAzC,UACGF,QADH,EADF,CAIGC,MAAM,eACL,KAAC,QAAD,EACE,OAAO,CAAEF,MADX,CAEE,cAAc,CAAE,gCAAMG,CAAAA,SAAS,CAAC,KAAD,CAAf,EAFlB,CAGE,eAAe,CAAE,CAAEC,OAAO,CAAE,CAAEC,MAAM,CAAE,MAAV,CAAX,CAHnB,EALJ,GADF,CAcD,CAhBD,CAoBA,cAAeN,CAAAA,cAAf","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Lightbox from 'react-image-lightbox';\n\nconst FalconLightBox = ({ imgSrc, children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <Fragment>\n      <div className=\"cursor-pointer\" onClick={() => setIsOpen(true)}>\n        {children}\n      </div>\n      {isOpen && (\n        <Lightbox\n          mainSrc={imgSrc}\n          onCloseRequest={() => setIsOpen(false)}\n          reactModalStyle={{ overlay: { zIndex: 999999 } }}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nFalconLightBox.propTypes = { imgSrc: PropTypes.string.isRequired };\n\nexport default FalconLightBox;\n"]},"metadata":{},"sourceType":"module"}