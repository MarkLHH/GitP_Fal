{"ast":null,"code":"import _slicedToArray from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';var useFakeFetch=function useFakeFetch(resolvedData){var waitingTime=arguments.length>1&&arguments[1]!==undefined?arguments[1]:500;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),data=_useState4[0],setData=_useState4[1];useEffect(function(){var isMounted=true;setTimeout(function(){if(isMounted){setData(resolvedData);setLoading(false);}},waitingTime);return function(){return isMounted=false;};},[resolvedData,waitingTime]);return{loading:loading,setLoading:setLoading,data:data,setData:setData};};export default useFakeFetch;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/hooks/useFakeFetch.js"],"names":["useEffect","useState","useFakeFetch","resolvedData","waitingTime","loading","setLoading","data","setData","isMounted","setTimeout"],"mappings":"sGAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,YAAD,CAAqC,IAAtBC,CAAAA,WAAsB,2DAAR,GAAQ,eAC1BH,QAAQ,CAAC,IAAD,CADkB,wCACjDI,OADiD,eACxCC,UADwC,8BAEhCL,QAAQ,CAAC,EAAD,CAFwB,yCAEjDM,IAFiD,eAE3CC,OAF2C,eAIxDR,SAAS,CAAC,UAAM,CACd,GAAIS,CAAAA,SAAS,CAAG,IAAhB,CACAC,UAAU,CAAC,UAAM,CACf,GAAID,SAAJ,CAAe,CACbD,OAAO,CAACL,YAAD,CAAP,CACAG,UAAU,CAAC,KAAD,CAAV,CACD,CACF,CALS,CAKPF,WALO,CAAV,CAOA,MAAO,kBAAOK,CAAAA,SAAS,CAAG,KAAnB,EAAP,CACD,CAVQ,CAUN,CAACN,YAAD,CAAeC,WAAf,CAVM,CAAT,CAYA,MAAO,CAAEC,OAAO,CAAPA,OAAF,CAAWC,UAAU,CAAVA,UAAX,CAAuBC,IAAI,CAAJA,IAAvB,CAA6BC,OAAO,CAAPA,OAA7B,CAAP,CACD,CAjBD,CAmBA,cAAeN,CAAAA,YAAf","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useFakeFetch = (resolvedData, waitingTime = 500) => {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    let isMounted = true;\n    setTimeout(() => {\n      if (isMounted) {\n        setData(resolvedData);\n        setLoading(false);\n      }\n    }, waitingTime);\n\n    return () => (isMounted = false);\n  }, [resolvedData, waitingTime]);\n\n  return { loading, setLoading, data, setData };\n};\n\nexport default useFakeFetch;\n"]},"metadata":{},"sourceType":"module"}