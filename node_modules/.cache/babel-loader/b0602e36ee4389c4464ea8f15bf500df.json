{"ast":null,"code":"import React,{Fragment,useContext}from'react';import{Button,CardHeader,Col,CustomInput,Row}from'reactstrap';import Flex from'../../common/Flex';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import DropdownFilter from'./DropdownFilter';import InboxBulkActions from'./InboxBulkActions';import{Link}from'react-router-dom';import{EmailContext}from'../../../context/Context';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var InboxHeader=function InboxHeader(_ref){var isAllSelected=_ref.isAllSelected,toggleIsAllSelected=_ref.toggleIsAllSelected,selectedItems=_ref.selectedItems,isIndeterminate=_ref.isIndeterminate;// Context\nvar _useContext=useContext(EmailContext),filters=_useContext.filters,handleFilter=_useContext.handleFilter,currentFilter=_useContext.currentFilter;return/*#__PURE__*/_jsx(CardHeader,{children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsxs(Col,{tag:Flex,align:\"center\",children:[/*#__PURE__*/_jsx(CustomInput,{id:\"checkbox-bulk\",type:\"checkbox\",checked:isAllSelected,onChange:function onChange(){return toggleIsAllSelected();},innerRef:function innerRef(input){return input&&(input.indeterminate=isIndeterminate);}}),isAllSelected||isIndeterminate?/*#__PURE__*/_jsx(InboxBulkActions,{selectedItems:selectedItems}):/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(Button,{color:\"falcon-default\",className:\"btn-sm ml-sm-1\",onClick:function onClick(){return handleFilter('all');},children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"redo\"})}),/*#__PURE__*/_jsx(DropdownFilter,{className:\"ml-2\",filters:filters,handleFilter:handleFilter,currentFilter:currentFilter,icon:\"sliders-h\"})]})]}),/*#__PURE__*/_jsx(Col,{xs:\"auto\",children:/*#__PURE__*/_jsxs(Button,{tag:Link,color:\"falcon-primary\",size:\"sm\",to:\"/email/compose\",children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"plus\",transform:\"shrink-3\",className:\"mr-1\"}),\"Compose new\"]})})]})});};export default InboxHeader;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/email/inbox/InboxHeader.js"],"names":["React","Fragment","useContext","Button","CardHeader","Col","CustomInput","Row","Flex","FontAwesomeIcon","DropdownFilter","InboxBulkActions","Link","EmailContext","InboxHeader","isAllSelected","toggleIsAllSelected","selectedItems","isIndeterminate","filters","handleFilter","currentFilter","input","indeterminate"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,KAA4C,OAA5C,CAEA,OAASC,MAAT,CAAiBC,UAAjB,CAA6BC,GAA7B,CAAkCC,WAAlC,CAA+CC,GAA/C,KAA0D,YAA1D,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,YAAT,KAA6B,0BAA7B,C,wFAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAA4E,IAAzEC,CAAAA,aAAyE,MAAzEA,aAAyE,CAA1DC,mBAA0D,MAA1DA,mBAA0D,CAArCC,aAAqC,MAArCA,aAAqC,CAAtBC,eAAsB,MAAtBA,eAAsB,CAC9F;AAD8F,gBAE7ChB,UAAU,CAACW,YAAD,CAFmC,CAEtFM,OAFsF,aAEtFA,OAFsF,CAE7EC,YAF6E,aAE7EA,YAF6E,CAE/DC,aAF+D,aAE/DA,aAF+D,CAI9F,mBACE,KAAC,UAAD,wBACE,MAAC,GAAD,yBACE,MAAC,GAAD,EAAK,GAAG,CAAEb,IAAV,CAAgB,KAAK,CAAC,QAAtB,wBACE,KAAC,WAAD,EACE,EAAE,CAAC,eADL,CAEE,IAAI,CAAC,UAFP,CAGE,OAAO,CAAEO,aAHX,CAIE,QAAQ,CAAE,0BAAMC,CAAAA,mBAAmB,EAAzB,EAJZ,CAKE,QAAQ,CAAE,kBAAAM,KAAK,QAAIA,CAAAA,KAAK,GAAKA,KAAK,CAACC,aAAN,CAAsBL,eAA3B,CAAT,EALjB,EADF,CASGH,aAAa,EAAIG,eAAjB,cACC,KAAC,gBAAD,EAAkB,aAAa,CAAED,aAAjC,EADD,cAGC,MAAC,QAAD,yBACE,KAAC,MAAD,EAAQ,KAAK,CAAC,gBAAd,CAA+B,SAAS,CAAC,gBAAzC,CAA0D,OAAO,CAAE,yBAAMG,CAAAA,YAAY,CAAC,KAAD,CAAlB,EAAnE,uBACE,KAAC,eAAD,EAAiB,IAAI,CAAC,MAAtB,EADF,EADF,cAIE,KAAC,cAAD,EACE,SAAS,CAAC,MADZ,CAEE,OAAO,CAAED,OAFX,CAGE,YAAY,CAAEC,YAHhB,CAIE,aAAa,CAAEC,aAJjB,CAKE,IAAI,CAAC,WALP,EAJF,GAZJ,GADF,cA2BE,KAAC,GAAD,EAAK,EAAE,CAAC,MAAR,uBACE,MAAC,MAAD,EAAQ,GAAG,CAAET,IAAb,CAAmB,KAAK,CAAC,gBAAzB,CAA0C,IAAI,CAAC,IAA/C,CAAoD,EAAE,CAAC,gBAAvD,wBACE,KAAC,eAAD,EAAiB,IAAI,CAAC,MAAtB,CAA6B,SAAS,CAAC,UAAvC,CAAkD,SAAS,CAAC,MAA5D,EADF,iBADF,EA3BF,GADF,EADF,CAsCD,CA1CD,CAkDA,cAAeE,CAAAA,WAAf","sourcesContent":["import React, { Fragment, useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, CardHeader, Col, CustomInput, Row } from 'reactstrap';\r\nimport Flex from '../../common/Flex';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport DropdownFilter from './DropdownFilter';\r\nimport InboxBulkActions from './InboxBulkActions';\r\nimport { Link } from 'react-router-dom';\r\nimport { EmailContext } from '../../../context/Context';\r\n\r\nconst InboxHeader = ({ isAllSelected, toggleIsAllSelected, selectedItems, isIndeterminate }) => {\r\n  // Context\r\n  const { filters, handleFilter, currentFilter } = useContext(EmailContext);\r\n\r\n  return (\r\n    <CardHeader>\r\n      <Row>\r\n        <Col tag={Flex} align=\"center\">\r\n          <CustomInput\r\n            id=\"checkbox-bulk\"\r\n            type=\"checkbox\"\r\n            checked={isAllSelected}\r\n            onChange={() => toggleIsAllSelected()}\r\n            innerRef={input => input && (input.indeterminate = isIndeterminate)}\r\n          />\r\n\r\n          {isAllSelected || isIndeterminate ? (\r\n            <InboxBulkActions selectedItems={selectedItems} />\r\n          ) : (\r\n            <Fragment>\r\n              <Button color=\"falcon-default\" className=\"btn-sm ml-sm-1\" onClick={() => handleFilter('all')}>\r\n                <FontAwesomeIcon icon=\"redo\" />\r\n              </Button>\r\n              <DropdownFilter\r\n                className=\"ml-2\"\r\n                filters={filters}\r\n                handleFilter={handleFilter}\r\n                currentFilter={currentFilter}\r\n                icon=\"sliders-h\"\r\n              />\r\n            </Fragment>\r\n          )}\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button tag={Link} color=\"falcon-primary\" size=\"sm\" to=\"/email/compose\">\r\n            <FontAwesomeIcon icon=\"plus\" transform=\"shrink-3\" className=\"mr-1\" />\r\n            Compose new\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </CardHeader>\r\n  );\r\n};\r\n\r\nInboxHeader.propTypes = {\r\n  isAllSelected: PropTypes.bool.isRequired,\r\n  toggleIsAllSelected: PropTypes.func.isRequired,\r\n  selectedItems: PropTypes.array.isRequired\r\n};\r\n\r\nexport default InboxHeader;\r\n"]},"metadata":{},"sourceType":"module"}