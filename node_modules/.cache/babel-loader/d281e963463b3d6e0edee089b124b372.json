{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/experience/Experience.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { isIterableArray } from '../../helpers/utils';\nimport { Card, CardBody, Collapse } from 'reactstrap';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport ExperienceSummary from './ExperienceSummary';\nimport classNames from 'classnames';\nimport Loader from '../common/Loader';\nimport ExperienceForm from './ExperienceForm';\nimport Flex from '../common/Flex';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport useFakeFetch from '../../hooks/useFakeFetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\n\nconst Experience = ({\n  experiences: rawExperiences,\n  isEditable,\n  isOpen,\n  ...rest\n}) => {\n  _s();\n\n  // Data\n  const {\n    loading: loadingExperiences,\n    data: experiences,\n    setData: setExperiences\n  } = useFakeFetch(rawExperiences);\n  const [collapse, setCollapse] = useState(isOpen);\n  return /*#__PURE__*/_jsxDEV(Card, { ...rest,\n    children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n      title: \"Experience\",\n      light: !isEditable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      className: classNames('fs--1', {\n        'bg-light': isEditable\n      }),\n      children: [isEditable && /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          align: \"center\",\n          className: \"mb-4 text-primary cursor-pointer fs-0\",\n          id: \"togglerAddExperience\",\n          onClick: () => {\n            setCollapse(!collapse);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"circle-dashed\",\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: \"plus\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-3\",\n            children: \"Add new experience\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n          toggler: \"#togglerAddExperience\",\n          isOpen: collapse,\n          children: [/*#__PURE__*/_jsxDEV(ExperienceForm, {\n            experiences: experiences,\n            setExperiences: setExperiences\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"border-dashed border-bottom-0 my-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this), loadingExperiences ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this) : isIterableArray(experiences) && experiences.map((experience, index) => /*#__PURE__*/_createElement(ExperienceSummary, { ...experience,\n        isEditable: isEditable,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }\n      }))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Experience, \"Mto3RSEQKaOBHqxhXdvk1cjN15o=\", false, function () {\n  return [useFakeFetch];\n});\n\n_c = Experience;\nExperience.propTypes = {\n  experiences: PropTypes.array,\n  isEditable: PropTypes.bool,\n  isOpen: PropTypes.bool\n};\nExperience.defaultProps = {\n  isEditable: false,\n  isOpen: false\n};\nexport default Experience;\n\nvar _c;\n\n$RefreshReg$(_c, \"Experience\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/experience/Experience.js"],"names":["React","Fragment","useState","PropTypes","isIterableArray","Card","CardBody","Collapse","FalconCardHeader","ExperienceSummary","classNames","Loader","ExperienceForm","Flex","FontAwesomeIcon","useFakeFetch","Experience","experiences","rawExperiences","isEditable","isOpen","rest","loading","loadingExperiences","data","setData","setExperiences","collapse","setCollapse","map","experience","index","propTypes","array","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { isIterableArray } from '../../helpers/utils';\nimport { Card, CardBody, Collapse } from 'reactstrap';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport ExperienceSummary from './ExperienceSummary';\nimport classNames from 'classnames';\nimport Loader from '../common/Loader';\nimport ExperienceForm from './ExperienceForm';\nimport Flex from '../common/Flex';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport useFakeFetch from '../../hooks/useFakeFetch';\n\nconst Experience = ({ experiences: rawExperiences, isEditable, isOpen, ...rest }) => {\n  // Data\n  const { loading: loadingExperiences, data: experiences, setData: setExperiences } = useFakeFetch(rawExperiences);\n\n  const [collapse, setCollapse] = useState(isOpen);\n\n  return (\n    <Card {...rest}>\n      <FalconCardHeader title=\"Experience\" light={!isEditable} />\n      <CardBody className={classNames('fs--1', { 'bg-light': isEditable })}>\n        {isEditable && (\n          <Fragment>\n            <Flex\n              align=\"center\"\n              className=\"mb-4 text-primary cursor-pointer fs-0\"\n              id=\"togglerAddExperience\"\n              onClick={() => {\n                setCollapse(!collapse);\n              }}\n            >\n              <span className=\"circle-dashed\">\n                <FontAwesomeIcon icon=\"plus\" />\n              </span>\n              <span className=\"ml-3\">Add new experience</span>\n            </Flex>\n            <Collapse toggler=\"#togglerAddExperience\" isOpen={collapse}>\n              <ExperienceForm experiences={experiences} setExperiences={setExperiences} />\n              <hr className=\"border-dashed border-bottom-0 my-4\" />\n            </Collapse>\n          </Fragment>\n        )}\n        {loadingExperiences ? (\n          <Loader />\n        ) : (\n          isIterableArray(experiences) &&\n          experiences.map((experience, index) => (\n            <ExperienceSummary {...experience} isEditable={isEditable} key={index} />\n          ))\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nExperience.propTypes = {\n  experiences: PropTypes.array,\n  isEditable: PropTypes.bool,\n  isOpen: PropTypes.bool\n};\n\nExperience.defaultProps = { isEditable: false, isOpen: false };\n\nexport default Experience;\n"]},"metadata":{},"sourceType":"module"}