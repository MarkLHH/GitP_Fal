{"ast":null,"code":"import React,{Fragment}from'react';import{useForm}from'react-hook-form';import PageHeader from'../common/PageHeader';import{Button,Card,CardBody,CardHeader}from'reactstrap';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import FalconEditor from'../common/FalconEditor';import classNames from'classnames';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ReactHookFormCode=\" function ReactHookFormExample (){\\n  const { register, handleSubmit, errors, watch } = useForm();\\n\\n  const [formData, setData] = useState({});\\n\\n\\n  const OnSubmit = (data, e) => {\\n    setData(data);\\n  };\\n\\n  return (\\n    <Row>\\n    <Col md={7}>\\n      <Form onSubmit={handleSubmit(OnSubmit)}>\\n        <FormGroup>\\n          <Label for=\\\"name\\\">Name</Label>\\n          <Input\\n            type=\\\"text\\\"\\n            name=\\\"name\\\"\\n            id=\\\"name\\\"\\n            placeholder=\\\"Enter your name\\\"\\n            innerRef={register({\\n              required: 'required',\\n              minLength: {\\n                value: 2,\\n                message: 'Minimum two word'\\n              }\\n            })}\\n            className={classNames({ 'border-danger': errors.name })}\\n          />\\n          {errors.name && <span className=\\\"text-danger fs--1\\\">{errors.name.message}</span>}\\n        </FormGroup>\\n        <FormGroup>\\n          <Label for=\\\"exampleEmail\\\">Email</Label>\\n          <Input\\n            type=\\\"email\\\"\\n            name=\\\"email\\\"\\n            id=\\\"exampleEmail\\\"\\n            placeholder=\\\"Enter your email\\\"\\n            className={classNames({ 'border-danger': errors.email })}\\n            innerRef={register({\\n              required: 'Email is required',\\n              pattern: {\\n                value: /[A-Za-z0-9._%+-]{3,}@[a-zA-Z]{3,}([.]{1}[a-zA-Z]{2,}|[.]{1}[a-zA-Z]{2,}[.]{1}[a-zA-Z]{2,})/i,\\n                message: 'Email must be valid'\\n              }\\n            })}\\n          />\\n          {errors.email && <span className=\\\"text-danger fs--1\\\">{errors.email.message}</span>}\\n        </FormGroup>\\n        <Row>\\n          <Col>\\n            <FormGroup>\\n              <Label for=\\\"password\\\">Password</Label>\\n              <Input\\n                type=\\\"password\\\"\\n                name=\\\"password\\\"\\n                id=\\\"password\\\"\\n                placeholder=\\\"Enter your password\\\"\\n                innerRef={register({\\n                  required: 'You must specify a password',\\n                  minLength: {\\n                    value: 2,\\n                    message: 'Password must have at least 2 characters'\\n                  }\\n                })}\\n              />\\n              {errors.password && <span className=\\\"text-danger fs--1\\\">{errors.password.message}</span>}\\n            </FormGroup>\\n          </Col>\\n          <Col>\\n            <FormGroup>\\n              <Label for=\\\"confirmPassord\\\">Confirm Passord</Label>\\n              <Input\\n                type=\\\"password\\\"\\n                name=\\\"confirmPassord\\\"\\n                id=\\\"confirmPassord\\\"\\n                placeholder=\\\"Confirm Password\\\"\\n                innerRef={register({\\n                  validate: value => value === watch('password') || 'The password do not match'\\n                })}\\n              />\\n              {errors.confirmPassord && (\\n                <span className=\\\"text-danger fs--1\\\">{errors.confirmPassord.message}</span>\\n              )}\\n            </FormGroup>\\n          </Col>\\n        </Row>\\n        <Button type=\\\"submit\\\" color=\\\"primary\\\">\\n          Submit\\n        </Button>\\n      </Form>\\n    </Col>\\n    <Col md=\\\"auto\\\">\\n      <h5 className=\\\"mt-4\\\">Result</h5>\\n      <pre>{JSON.stringify(formData, null, 2)}</pre>\\n    </Col>\\n  </Row>\\n  );\\n}\";var ReactHookFrom=function ReactHookFrom(){return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(PageHeader,{title:\"React Hook Form\",description:\"React Hook Form Performant, flexible and extensible forms with easy-to-use validation.\",className:\"mb-3\",children:/*#__PURE__*/_jsxs(Button,{tag:\"a\",href:\"https://www.react-hook-form.com/\",target:\"_blank\",color:\"link\",size:\"sm\",className:\"pl-0\",children:[\"React hook Form Documentation\",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"chevron-right\",className:\"ml-1 fs--2\"})]})}),/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(CardHeader,{className:\"bg-light\",children:/*#__PURE__*/_jsx(\"h4\",{className:\"mb-0\",children:\"Example of form with validation\"})}),/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(FalconEditor,{code:ReactHookFormCode,scope:{useForm:useForm,classNames:classNames},language:\"jsx\"})})]})]});};export default ReactHookFrom;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/plugins/ReactHookFrom.js"],"names":["React","Fragment","useForm","PageHeader","Button","Card","CardBody","CardHeader","FontAwesomeIcon","FalconEditor","classNames","ReactHookFormCode","ReactHookFrom"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,OAAT,KAAwB,iBAAxB,CAEA,MAAOC,CAAAA,UAAP,KAAuB,sBAAvB,CACA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,QAAvB,CAAiCC,UAAjC,KAAmD,YAAnD,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,C,wFAEA,GAAMC,CAAAA,iBAAiB,gxGAAvB,CAqGA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,mBACE,MAAC,QAAD,yBACE,KAAC,UAAD,EACE,KAAK,CAAC,iBADR,CAEE,WAAW,CAAC,wFAFd,CAGE,SAAS,CAAC,MAHZ,uBAKE,MAAC,MAAD,EAAQ,GAAG,CAAC,GAAZ,CAAgB,IAAI,CAAC,kCAArB,CAAwD,MAAM,CAAC,QAA/D,CAAwE,KAAK,CAAC,MAA9E,CAAqF,IAAI,CAAC,IAA1F,CAA+F,SAAS,CAAC,MAAzG,wDAEE,KAAC,eAAD,EAAiB,IAAI,CAAC,eAAtB,CAAsC,SAAS,CAAC,YAAhD,EAFF,GALF,EADF,cAWE,MAAC,IAAD,yBACE,KAAC,UAAD,EAAY,SAAS,CAAC,UAAtB,uBACE,WAAI,SAAS,CAAC,MAAd,6CADF,EADF,cAIE,KAAC,QAAD,wBACE,KAAC,YAAD,EAAc,IAAI,CAAED,iBAApB,CAAuC,KAAK,CAAE,CAAET,OAAO,CAAPA,OAAF,CAAWQ,UAAU,CAAVA,UAAX,CAA9C,CAAuE,QAAQ,CAAC,KAAhF,EADF,EAJF,GAXF,GADF,CAsBD,CAvBD,CAyBA,cAAeE,CAAAA,aAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport PageHeader from '../common/PageHeader';\nimport { Button, Card, CardBody, CardHeader } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FalconEditor from '../common/FalconEditor';\nimport classNames from 'classnames';\n\nconst ReactHookFormCode = ` function ReactHookFormExample (){\n  const { register, handleSubmit, errors, watch } = useForm();\n\n  const [formData, setData] = useState({});\n\n\n  const OnSubmit = (data, e) => {\n    setData(data);\n  };\n\n  return (\n    <Row>\n    <Col md={7}>\n      <Form onSubmit={handleSubmit(OnSubmit)}>\n        <FormGroup>\n          <Label for=\"name\">Name</Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            placeholder=\"Enter your name\"\n            innerRef={register({\n              required: 'required',\n              minLength: {\n                value: 2,\n                message: 'Minimum two word'\n              }\n            })}\n            className={classNames({ 'border-danger': errors.name })}\n          />\n          {errors.name && <span className=\"text-danger fs--1\">{errors.name.message}</span>}\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"exampleEmail\">Email</Label>\n          <Input\n            type=\"email\"\n            name=\"email\"\n            id=\"exampleEmail\"\n            placeholder=\"Enter your email\"\n            className={classNames({ 'border-danger': errors.email })}\n            innerRef={register({\n              required: 'Email is required',\n              pattern: {\n                value: /[A-Za-z0-9._%+-]{3,}@[a-zA-Z]{3,}([.]{1}[a-zA-Z]{2,}|[.]{1}[a-zA-Z]{2,}[.]{1}[a-zA-Z]{2,})/i,\n                message: 'Email must be valid'\n              }\n            })}\n          />\n          {errors.email && <span className=\"text-danger fs--1\">{errors.email.message}</span>}\n        </FormGroup>\n        <Row>\n          <Col>\n            <FormGroup>\n              <Label for=\"password\">Password</Label>\n              <Input\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                placeholder=\"Enter your password\"\n                innerRef={register({\n                  required: 'You must specify a password',\n                  minLength: {\n                    value: 2,\n                    message: 'Password must have at least 2 characters'\n                  }\n                })}\n              />\n              {errors.password && <span className=\"text-danger fs--1\">{errors.password.message}</span>}\n            </FormGroup>\n          </Col>\n          <Col>\n            <FormGroup>\n              <Label for=\"confirmPassord\">Confirm Passord</Label>\n              <Input\n                type=\"password\"\n                name=\"confirmPassord\"\n                id=\"confirmPassord\"\n                placeholder=\"Confirm Password\"\n                innerRef={register({\n                  validate: value => value === watch('password') || 'The password do not match'\n                })}\n              />\n              {errors.confirmPassord && (\n                <span className=\"text-danger fs--1\">{errors.confirmPassord.message}</span>\n              )}\n            </FormGroup>\n          </Col>\n        </Row>\n        <Button type=\"submit\" color=\"primary\">\n          Submit\n        </Button>\n      </Form>\n    </Col>\n    <Col md=\"auto\">\n      <h5 className=\"mt-4\">Result</h5>\n      <pre>{JSON.stringify(formData, null, 2)}</pre>\n    </Col>\n  </Row>\n  );\n}`;\n\nconst ReactHookFrom = () => {\n  return (\n    <Fragment>\n      <PageHeader\n        title=\"React Hook Form\"\n        description=\"React Hook Form Performant, flexible and extensible forms with easy-to-use validation.\"\n        className=\"mb-3\"\n      >\n        <Button tag=\"a\" href=\"https://www.react-hook-form.com/\" target=\"_blank\" color=\"link\" size=\"sm\" className=\"pl-0\">\n          React hook Form Documentation\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n        </Button>\n      </PageHeader>\n      <Card>\n        <CardHeader className=\"bg-light\">\n          <h4 className=\"mb-0\">Example of form with validation</h4>\n        </CardHeader>\n        <CardBody>\n          <FalconEditor code={ReactHookFormCode} scope={{ useForm, classNames }} language=\"jsx\" />\n        </CardBody>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default ReactHookFrom;\n"]},"metadata":{},"sourceType":"module"}