{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/dashboard-alt/TotalSales.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { Card, CardBody, CustomInput } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport echarts from 'echarts/lib/echarts';\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\nimport { getPosition, getGrays, themeColors, rgbaColor, isIterableArray, capitalize } from '../../helpers/utils';\nimport CardDropdown from './CardDropdown';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport Flex from '../common/Flex';\nimport AppContext from '../../context/Context';\nimport 'echarts/lib/chart/bar';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/legend';\nimport { totalSalesByMonth } from '../../data/dashboard/topProducts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getFormatter(params) {\n  const {\n    name,\n    value\n  } = params[0];\n  return `${Object.keys(totalSalesByMonth)[0]} ${name}, ${value}`;\n}\n\nconst getOption = (month, isDark) => {\n  const grays = getGrays(isDark);\n  return {\n    tooltip: {\n      trigger: 'axis',\n      padding: [7, 10],\n      backgroundColor: grays.white,\n      borderColor: grays['300'],\n      borderWidth: 1,\n      textStyle: {\n        color: themeColors.dark\n      },\n\n      formatter(params) {\n        return getFormatter(params);\n      },\n\n      transitionDuration: 0,\n\n      position(pos, params, dom, rect, size) {\n        return getPosition(pos, params, dom, rect, size);\n      }\n\n    },\n    xAxis: {\n      type: 'category',\n      data: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25],\n      boundaryGap: false,\n      axisPointer: {\n        lineStyle: {\n          color: grays['300'],\n          type: 'dashed'\n        }\n      },\n      splitLine: {\n        show: false\n      },\n      axisLine: {\n        lineStyle: {\n          color: rgbaColor('#000', 0.01),\n          type: 'dashed'\n        }\n      },\n      axisTick: {\n        show: false\n      },\n      axisLabel: {\n        color: grays['400'],\n        formatter: function (value) {\n          return `${capitalize(month.slice(0, 3))} ${value}`;\n        },\n        margin: 15\n      }\n    },\n    yAxis: {\n      type: 'value',\n      axisPointer: {\n        show: false\n      },\n      splitLine: {\n        lineStyle: {\n          color: grays['300'],\n          type: 'dashed'\n        }\n      },\n      boundaryGap: false,\n      axisLabel: {\n        show: true,\n        color: grays['400'],\n        margin: 15\n      },\n      axisTick: {\n        show: false\n      },\n      axisLine: {\n        show: false\n      }\n    },\n    series: [{\n      type: 'line',\n      data: totalSalesByMonth[month],\n      lineStyle: {\n        color: themeColors.primary\n      },\n      itemStyle: {\n        color: grays['100'],\n        borderColor: themeColors.primary,\n        borderWidth: 2\n      },\n      symbol: 'circle',\n      symbolSize: 10,\n      smooth: false,\n      hoverAnimation: true,\n      areaStyle: {\n        color: {\n          type: 'linear',\n          x: 0,\n          y: 0,\n          x2: 0,\n          y2: 1,\n          colorStops: [{\n            offset: 0,\n            color: rgbaColor(themeColors.primary, 0.2)\n          }, {\n            offset: 1,\n            color: rgbaColor(themeColors.primary, 0)\n          }]\n        }\n      }\n    }],\n    animationDuration: 90000,\n    grid: {\n      right: '28px',\n      left: '40px',\n      bottom: '15%',\n      top: '5%'\n    }\n  };\n};\n\nconst TotalSales = ({\n  className\n}) => {\n  _s();\n\n  const {\n    isDark\n  } = useContext(AppContext);\n  const [month, setMonth] = useState('january');\n  const months = Object.keys(totalSalesByMonth);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n      title: \"Total Sales\",\n      light: false,\n      titleTag: \"h6\",\n      className: \"pb-0\",\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        children: [/*#__PURE__*/_jsxDEV(CustomInput, {\n          type: \"select\",\n          id: \"exampleCustomSelect\",\n          bsSize: \"sm\",\n          className: \"select-month mr-2\",\n          value: month,\n          onChange: ({\n            target\n          }) => setMonth(target.value),\n          children: isIterableArray(months) && months.map((month, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: month,\n            children: capitalize(month)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardDropdown, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      className: \"h-100\",\n      children: /*#__PURE__*/_jsxDEV(ReactEchartsCore, {\n        echarts: echarts,\n        option: getOption(month, isDark),\n        style: {\n          minHeight: '18.75rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TotalSales, \"dgZYH60VWiio2Q7D9s/wGv0dqYI=\");\n\n_c = TotalSales;\nTotalSales.propTypes = {\n  className: PropTypes.string\n};\nexport default TotalSales;\n\nvar _c;\n\n$RefreshReg$(_c, \"TotalSales\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/dashboard-alt/TotalSales.js"],"names":["React","useContext","useState","Card","CardBody","CustomInput","PropTypes","echarts","ReactEchartsCore","getPosition","getGrays","themeColors","rgbaColor","isIterableArray","capitalize","CardDropdown","FalconCardHeader","Flex","AppContext","totalSalesByMonth","getFormatter","params","name","value","Object","keys","getOption","month","isDark","grays","tooltip","trigger","padding","backgroundColor","white","borderColor","borderWidth","textStyle","color","dark","formatter","transitionDuration","position","pos","dom","rect","size","xAxis","type","data","boundaryGap","axisPointer","lineStyle","splitLine","show","axisLine","axisTick","axisLabel","slice","margin","yAxis","series","primary","itemStyle","symbol","symbolSize","smooth","hoverAnimation","areaStyle","x","y","x2","y2","colorStops","offset","animationDuration","grid","right","left","bottom","top","TotalSales","className","setMonth","months","target","map","index","minHeight","propTypes","string"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,WAAzB,QAA4C,YAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,WAAhC,EAA6CC,SAA7C,EAAwDC,eAAxD,EAAyEC,UAAzE,QAA2F,qBAA3F;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,OAAO,uBAAP;AACA,OAAO,+BAAP;AACA,OAAO,8BAAP;AAEA,SAASC,iBAAT,QAAkC,kCAAlC;;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBF,MAAM,CAAC,CAAD,CAA9B;AACA,SAAQ,GAAEG,MAAM,CAACC,IAAP,CAAYN,iBAAZ,EAA+B,CAA/B,CAAkC,IAAGG,IAAK,KAAIC,KAAM,EAA9D;AACD;;AAED,MAAMG,SAAS,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,QAAMC,KAAK,GAAGnB,QAAQ,CAACkB,MAAD,CAAtB;AACA,SAAO;AACLE,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,MADF;AAEPC,MAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,EAAJ,CAFF;AAGPC,MAAAA,eAAe,EAAEJ,KAAK,CAACK,KAHhB;AAIPC,MAAAA,WAAW,EAAEN,KAAK,CAAC,KAAD,CAJX;AAKPO,MAAAA,WAAW,EAAE,CALN;AAMPC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAE3B,WAAW,CAAC4B;AAArB,OANJ;;AAOPC,MAAAA,SAAS,CAACnB,MAAD,EAAS;AAChB,eAAOD,YAAY,CAACC,MAAD,CAAnB;AACD,OATM;;AAUPoB,MAAAA,kBAAkB,EAAE,CAVb;;AAWPC,MAAAA,QAAQ,CAACC,GAAD,EAAMtB,MAAN,EAAcuB,GAAd,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AACrC,eAAOrC,WAAW,CAACkC,GAAD,EAAMtB,MAAN,EAAcuB,GAAd,EAAmBC,IAAnB,EAAyBC,IAAzB,CAAlB;AACD;;AAbM,KADJ;AAgBLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,UADD;AAELC,MAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,CAFD;AAGLC,MAAAA,WAAW,EAAE,KAHR;AAILC,MAAAA,WAAW,EAAE;AACXC,QAAAA,SAAS,EAAE;AACTd,UAAAA,KAAK,EAAET,KAAK,CAAC,KAAD,CADH;AAETmB,UAAAA,IAAI,EAAE;AAFG;AADA,OAJR;AAULK,MAAAA,SAAS,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAVN;AAWLC,MAAAA,QAAQ,EAAE;AACRH,QAAAA,SAAS,EAAE;AACTd,UAAAA,KAAK,EAAE1B,SAAS,CAAC,MAAD,EAAS,IAAT,CADP;AAEToC,UAAAA,IAAI,EAAE;AAFG;AADH,OAXL;AAiBLQ,MAAAA,QAAQ,EAAE;AAAEF,QAAAA,IAAI,EAAE;AAAR,OAjBL;AAkBLG,MAAAA,SAAS,EAAE;AACTnB,QAAAA,KAAK,EAAET,KAAK,CAAC,KAAD,CADH;AAETW,QAAAA,SAAS,EAAE,UAASjB,KAAT,EAAgB;AACzB,iBAAQ,GAAET,UAAU,CAACa,KAAK,CAAC+B,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAD,CAAoB,IAAGnC,KAAM,EAAjD;AACD,SAJQ;AAKToC,QAAAA,MAAM,EAAE;AALC;AAlBN,KAhBF;AA0CLC,IAAAA,KAAK,EAAE;AACLZ,MAAAA,IAAI,EAAE,OADD;AAELG,MAAAA,WAAW,EAAE;AAAEG,QAAAA,IAAI,EAAE;AAAR,OAFR;AAGLD,MAAAA,SAAS,EAAE;AACTD,QAAAA,SAAS,EAAE;AACTd,UAAAA,KAAK,EAAET,KAAK,CAAC,KAAD,CADH;AAETmB,UAAAA,IAAI,EAAE;AAFG;AADF,OAHN;AASLE,MAAAA,WAAW,EAAE,KATR;AAULO,MAAAA,SAAS,EAAE;AACTH,QAAAA,IAAI,EAAE,IADG;AAEThB,QAAAA,KAAK,EAAET,KAAK,CAAC,KAAD,CAFH;AAGT8B,QAAAA,MAAM,EAAE;AAHC,OAVN;AAeLH,MAAAA,QAAQ,EAAE;AAAEF,QAAAA,IAAI,EAAE;AAAR,OAfL;AAgBLC,MAAAA,QAAQ,EAAE;AAAED,QAAAA,IAAI,EAAE;AAAR;AAhBL,KA1CF;AA4DLO,IAAAA,MAAM,EAAE,CACN;AACEb,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAE9B,iBAAiB,CAACQ,KAAD,CAFzB;AAGEyB,MAAAA,SAAS,EAAE;AAAEd,QAAAA,KAAK,EAAE3B,WAAW,CAACmD;AAArB,OAHb;AAIEC,MAAAA,SAAS,EAAE;AACTzB,QAAAA,KAAK,EAAET,KAAK,CAAC,KAAD,CADH;AAETM,QAAAA,WAAW,EAAExB,WAAW,CAACmD,OAFhB;AAGT1B,QAAAA,WAAW,EAAE;AAHJ,OAJb;AASE4B,MAAAA,MAAM,EAAE,QATV;AAUEC,MAAAA,UAAU,EAAE,EAVd;AAWEC,MAAAA,MAAM,EAAE,KAXV;AAYEC,MAAAA,cAAc,EAAE,IAZlB;AAaEC,MAAAA,SAAS,EAAE;AACT9B,QAAAA,KAAK,EAAE;AACLU,UAAAA,IAAI,EAAE,QADD;AAELqB,UAAAA,CAAC,EAAE,CAFE;AAGLC,UAAAA,CAAC,EAAE,CAHE;AAILC,UAAAA,EAAE,EAAE,CAJC;AAKLC,UAAAA,EAAE,EAAE,CALC;AAMLC,UAAAA,UAAU,EAAE,CACV;AACEC,YAAAA,MAAM,EAAE,CADV;AAEEpC,YAAAA,KAAK,EAAE1B,SAAS,CAACD,WAAW,CAACmD,OAAb,EAAsB,GAAtB;AAFlB,WADU,EAKV;AACEY,YAAAA,MAAM,EAAE,CADV;AAEEpC,YAAAA,KAAK,EAAE1B,SAAS,CAACD,WAAW,CAACmD,OAAb,EAAsB,CAAtB;AAFlB,WALU;AANP;AADE;AAbb,KADM,CA5DH;AA+FLa,IAAAA,iBAAiB,EAAE,KA/Fd;AAgGLC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,IAAI,EAAE,MAAvB;AAA+BC,MAAAA,MAAM,EAAE,KAAvC;AAA8CC,MAAAA,GAAG,EAAE;AAAnD;AAhGD,GAAP;AAkGD,CApGD;;AAsGA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAAA;;AACpC,QAAM;AAAEtD,IAAAA;AAAF,MAAa3B,UAAU,CAACiB,UAAD,CAA7B;AACA,QAAM,CAACS,KAAD,EAAQwD,QAAR,IAAoBjF,QAAQ,CAAC,SAAD,CAAlC;AAEA,QAAMkF,MAAM,GAAG5D,MAAM,CAACC,IAAP,CAAYN,iBAAZ,CAAf;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAE+D,SAAjB;AAAA,4BACE,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAC,aAAxB;AAAsC,MAAA,KAAK,EAAE,KAA7C;AAAoD,MAAA,QAAQ,EAAC,IAA7D;AAAkE,MAAA,SAAS,EAAC,MAA5E;AAAA,6BACE,QAAC,IAAD;AAAA,gCACE,QAAC,WAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,EAAE,EAAC,qBAFL;AAGE,UAAA,MAAM,EAAC,IAHT;AAIE,UAAA,SAAS,EAAC,mBAJZ;AAKE,UAAA,KAAK,EAAEvD,KALT;AAME,UAAA,QAAQ,EAAE,CAAC;AAAE0D,YAAAA;AAAF,WAAD,KAAgBF,QAAQ,CAACE,MAAM,CAAC9D,KAAR,CANpC;AAAA,oBAQGV,eAAe,CAACuE,MAAD,CAAf,IACCA,MAAM,CAACE,GAAP,CAAW,CAAC3D,KAAD,EAAQ4D,KAAR,kBACT;AAAoB,YAAA,KAAK,EAAE5D,KAA3B;AAAA,sBACGb,UAAU,CAACa,KAAD;AADb,aAAa4D,KAAb;AAAA;AAAA;AAAA;AAAA,kBADF;AATJ;AAAA;AAAA;AAAA;AAAA,gBADF,eAgBE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAsBE,QAAC,QAAD;AAAU,MAAA,SAAS,EAAC,OAApB;AAAA,6BACE,QAAC,gBAAD;AAAkB,QAAA,OAAO,EAAEhF,OAA3B;AAAoC,QAAA,MAAM,EAAEmB,SAAS,CAACC,KAAD,EAAQC,MAAR,CAArD;AAAsE,QAAA,KAAK,EAAE;AAAE4D,UAAAA,SAAS,EAAE;AAAb;AAA7E;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CAlCD;;GAAMP,U;;KAAAA,U;AAoCNA,UAAU,CAACQ,SAAX,GAAuB;AACrBP,EAAAA,SAAS,EAAE5E,SAAS,CAACoF;AADA,CAAvB;AAIA,eAAeT,UAAf","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Card, CardBody, CustomInput } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport echarts from 'echarts/lib/echarts';\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\nimport { getPosition, getGrays, themeColors, rgbaColor, isIterableArray, capitalize } from '../../helpers/utils';\nimport CardDropdown from './CardDropdown';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport Flex from '../common/Flex';\nimport AppContext from '../../context/Context';\n\nimport 'echarts/lib/chart/bar';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/legend';\n\nimport { totalSalesByMonth } from '../../data/dashboard/topProducts';\n\nfunction getFormatter(params) {\n  const { name, value } = params[0];\n  return `${Object.keys(totalSalesByMonth)[0]} ${name}, ${value}`;\n}\n\nconst getOption = (month, isDark) => {\n  const grays = getGrays(isDark);\n  return {\n    tooltip: {\n      trigger: 'axis',\n      padding: [7, 10],\n      backgroundColor: grays.white,\n      borderColor: grays['300'],\n      borderWidth: 1,\n      textStyle: { color: themeColors.dark },\n      formatter(params) {\n        return getFormatter(params);\n      },\n      transitionDuration: 0,\n      position(pos, params, dom, rect, size) {\n        return getPosition(pos, params, dom, rect, size);\n      }\n    },\n    xAxis: {\n      type: 'category',\n      data: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25],\n      boundaryGap: false,\n      axisPointer: {\n        lineStyle: {\n          color: grays['300'],\n          type: 'dashed'\n        }\n      },\n      splitLine: { show: false },\n      axisLine: {\n        lineStyle: {\n          color: rgbaColor('#000', 0.01),\n          type: 'dashed'\n        }\n      },\n      axisTick: { show: false },\n      axisLabel: {\n        color: grays['400'],\n        formatter: function(value) {\n          return `${capitalize(month.slice(0, 3))} ${value}`;\n        },\n        margin: 15\n      }\n    },\n    yAxis: {\n      type: 'value',\n      axisPointer: { show: false },\n      splitLine: {\n        lineStyle: {\n          color: grays['300'],\n          type: 'dashed'\n        }\n      },\n      boundaryGap: false,\n      axisLabel: {\n        show: true,\n        color: grays['400'],\n        margin: 15\n      },\n      axisTick: { show: false },\n      axisLine: { show: false }\n    },\n    series: [\n      {\n        type: 'line',\n        data: totalSalesByMonth[month],\n        lineStyle: { color: themeColors.primary },\n        itemStyle: {\n          color: grays['100'],\n          borderColor: themeColors.primary,\n          borderWidth: 2\n        },\n        symbol: 'circle',\n        symbolSize: 10,\n        smooth: false,\n        hoverAnimation: true,\n        areaStyle: {\n          color: {\n            type: 'linear',\n            x: 0,\n            y: 0,\n            x2: 0,\n            y2: 1,\n            colorStops: [\n              {\n                offset: 0,\n                color: rgbaColor(themeColors.primary, 0.2)\n              },\n              {\n                offset: 1,\n                color: rgbaColor(themeColors.primary, 0)\n              }\n            ]\n          }\n        }\n      }\n    ],\n    animationDuration: 90000,\n    grid: { right: '28px', left: '40px', bottom: '15%', top: '5%' }\n  };\n};\n\nconst TotalSales = ({ className }) => {\n  const { isDark } = useContext(AppContext);\n  const [month, setMonth] = useState('january');\n\n  const months = Object.keys(totalSalesByMonth);\n\n  return (\n    <Card className={className}>\n      <FalconCardHeader title=\"Total Sales\" light={false} titleTag=\"h6\" className=\"pb-0\">\n        <Flex>\n          <CustomInput\n            type=\"select\"\n            id=\"exampleCustomSelect\"\n            bsSize=\"sm\"\n            className=\"select-month mr-2\"\n            value={month}\n            onChange={({ target }) => setMonth(target.value)}\n          >\n            {isIterableArray(months) &&\n              months.map((month, index) => (\n                <option key={index} value={month}>\n                  {capitalize(month)}\n                </option>\n              ))}\n          </CustomInput>\n          <CardDropdown />\n        </Flex>\n      </FalconCardHeader>\n\n      <CardBody className=\"h-100\">\n        <ReactEchartsCore echarts={echarts} option={getOption(month, isDark)} style={{ minHeight: '18.75rem' }} />\n      </CardBody>\n    </Card>\n  );\n};\n\nTotalSales.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TotalSales;\n"]},"metadata":{},"sourceType":"module"}