{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/chat/content/ChatContentBody.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollbar from 'react-scrollbars-custom';\nimport Message from './Message';\nimport ThreadInfo from './ThreadInfo';\nimport { isIterableArray } from '../../../helpers/utils';\nimport AppContext, { ChatContext } from '../../../context/Context';\nimport ChatContentBodyIntro from './ChatContentBodyIntro';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatContentBody = ({\n  thread,\n  isOpenThreadInfo\n}) => {\n  _s();\n\n  let lastDate = null;\n  const {\n    isRTL\n  } = useContext(AppContext);\n  const {\n    messages,\n    getUser,\n    textAreaInitialHeight\n  } = useContext(ChatContext);\n  const [scrollHeight, setScrollHeight] = useState(0);\n  const user = getUser(thread);\n  const isGroup = isIterableArray(thread.userId);\n  const {\n    content\n  } = messages.find(({\n    id\n  }) => id === thread.messagesId);\n  useEffect(() => {\n    setTimeout(() => {\n      setScrollHeight(document.getElementsByClassName('chat-content-scroll-area')[0].scrollHeight);\n    }, 500);\n  }, [textAreaInitialHeight]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-content-body\",\n    style: {\n      display: 'inherit'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ThreadInfo, {\n      thread: thread,\n      isOpenThreadInfo: isOpenThreadInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Scrollbar, {\n      style: {\n        height: '100%',\n        minWidth: '75px',\n        display: 'block'\n      },\n      rtl: isRTL,\n      scrollTop: scrollHeight,\n      noScrollX: true,\n      trackYProps: {\n        renderer(props) {\n          const {\n            elementRef,\n            ...restProps\n          } = props;\n          return /*#__PURE__*/_jsxDEV(\"span\", { ...restProps,\n            ref: elementRef,\n            className: \"TrackY\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 20\n          }, this);\n        }\n\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content-scroll-area\",\n        children: [/*#__PURE__*/_jsxDEV(ChatContentBodyIntro, {\n          user: user,\n          isGroup: isGroup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), isIterableArray(content) && content.map(({\n          message,\n          time,\n          senderUserId,\n          status\n        }, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [lastDate !== time.date && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center fs--2 text-500\",\n            children: `${time.date}, ${time.hour}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 19\n          }, this), (() => {\n            lastDate = time.date;\n          })(), /*#__PURE__*/_jsxDEV(Message, {\n            message: message,\n            senderUserId: senderUserId,\n            time: time,\n            status: status,\n            isGroup: isGroup\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatContentBody, \"D0TJsIQMAAaEWxp5F1mGv3SY9Lw=\");\n\n_c = ChatContentBody;\nChatContentBody.propTypes = {\n  thread: PropTypes.object.isRequired,\n  isOpenThreadInfo: PropTypes.bool\n};\nChatContentBody.defaultProps = {\n  isOpenThreadInfo: false\n};\nexport default ChatContentBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatContentBody\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/chat/content/ChatContentBody.js"],"names":["React","useState","useContext","useEffect","PropTypes","Scrollbar","Message","ThreadInfo","isIterableArray","AppContext","ChatContext","ChatContentBodyIntro","ChatContentBody","thread","isOpenThreadInfo","lastDate","isRTL","messages","getUser","textAreaInitialHeight","scrollHeight","setScrollHeight","user","isGroup","userId","content","find","id","messagesId","setTimeout","document","getElementsByClassName","display","height","minWidth","renderer","props","elementRef","restProps","map","message","time","senderUserId","status","index","date","hour","propTypes","object","isRequired","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollbar from 'react-scrollbars-custom';\nimport Message from './Message';\nimport ThreadInfo from './ThreadInfo';\nimport { isIterableArray } from '../../../helpers/utils';\nimport AppContext, { ChatContext } from '../../../context/Context';\nimport ChatContentBodyIntro from './ChatContentBodyIntro';\n\nconst ChatContentBody = ({ thread, isOpenThreadInfo }) => {\n  let lastDate = null;\n  const { isRTL } = useContext(AppContext);\n  const { messages, getUser, textAreaInitialHeight } = useContext(ChatContext);\n  const [scrollHeight, setScrollHeight] = useState(0);\n  const user = getUser(thread);\n  const isGroup = isIterableArray(thread.userId);\n  const { content } = messages.find(({ id }) => id === thread.messagesId);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setScrollHeight(document.getElementsByClassName('chat-content-scroll-area')[0].scrollHeight);\n    }, 500);\n  }, [textAreaInitialHeight]);\n\n  return (\n    <div className=\"chat-content-body\" style={{ display: 'inherit' }}>\n      <ThreadInfo thread={thread} isOpenThreadInfo={isOpenThreadInfo} />\n      <Scrollbar\n        style={{\n          height: '100%',\n          minWidth: '75px',\n          display: 'block'\n        }}\n        rtl={isRTL}\n        scrollTop={scrollHeight}\n        noScrollX\n        trackYProps={{\n          renderer(props) {\n            const { elementRef, ...restProps } = props;\n            return <span {...restProps} ref={elementRef} className=\"TrackY\" />;\n          }\n        }}\n      >\n        <div className=\"chat-content-scroll-area\">\n          <ChatContentBodyIntro user={user} isGroup={isGroup} />\n\n          {isIterableArray(content) &&\n            content.map(({ message, time, senderUserId, status }, index) => (\n              <div key={index}>\n                {lastDate !== time.date && (\n                  <div className=\"text-center fs--2 text-500\">{`${time.date}, ${time.hour}`}</div>\n                )}\n                {(() => {\n                  lastDate = time.date;\n                })()}\n                <Message message={message} senderUserId={senderUserId} time={time} status={status} isGroup={isGroup} />\n              </div>\n            ))}\n        </div>\n      </Scrollbar>\n    </div>\n  );\n};\n\nChatContentBody.propTypes = {\n  thread: PropTypes.object.isRequired,\n  isOpenThreadInfo: PropTypes.bool\n};\nChatContentBody.defaultProps = {\n  isOpenThreadInfo: false\n};\nexport default ChatContentBody;\n"]},"metadata":{},"sourceType":"module"}