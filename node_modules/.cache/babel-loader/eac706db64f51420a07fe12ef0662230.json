{"ast":null,"code":"import React,{Fragment}from'react';import{Button,Card,CardBody,Col,Row}from'reactstrap';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import FalconCardHeader from'../common/FalconCardHeader';import FalconEditor from'../common/FalconEditor';import PageHeader from'../common/PageHeader';import Flex from'../common/Flex';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var basicFormCode=\"<Form>\\n  <FormGroup>\\n    <Label for=\\\"exampleName\\\">Name</Label>\\n    <Input type=\\\"text\\\" name=\\\"name\\\" id=\\\"exampleName\\\" placeholder=\\\"Name\\\" />\\n  </FormGroup>\\n  <FormGroup>\\n    <Label for=\\\"readonly\\\">Read Only</Label>\\n    <Input type=\\\"text\\\" name=\\\"readonly\\\" id=\\\"readonly\\\" placeholder=\\\"Readonly input here...\\\" disabled />\\n  </FormGroup>\\n  <FormGroup>\\n    <Label for=\\\"exampleEmail\\\">Read only plain text</Label>\\n    <Input plaintext value=\\\"email@example.com\\\" onChange={() => {}} />\\n  </FormGroup>\\n  <FormGroup>\\n    <Label for=\\\"exampleEmail\\\">Email</Label>\\n    <Input type=\\\"email\\\" name=\\\"email\\\" id=\\\"exampleEmail\\\" placeholder=\\\"Email\\\" />\\n  </FormGroup>\\n  <FormGroup>\\n    <Label for=\\\"examplePassword\\\">Password</Label>\\n    <Input type=\\\"password\\\" name=\\\"password\\\" id=\\\"examplePassword\\\" placeholder=\\\"Password\\\" />\\n  </FormGroup>\\n  <FormGroup className=\\\"form-check\\\">\\n    <Input type=\\\"checkbox\\\" name=\\\"check\\\" id=\\\"exampleCheck\\\" />\\n    <Label for=\\\"exampleCheck\\\" check>\\n      Checkbox\\n    </Label>\\n  </FormGroup>\\n  <FormGroup className=\\\"form-check\\\">\\n    <Input type=\\\"checkbox\\\" name=\\\"check\\\" id=\\\"exampleCheck1\\\" disabled />\\n    <Label for=\\\"exampleCheck1\\\" check>\\n      Disabled checkbox\\n    </Label>\\n  </FormGroup>\\n  <FormGroup className=\\\"form-check\\\">\\n  <Input type=\\\"radio\\\" name=\\\"radio1\\\" defaultChecked />\\n    <Label check>\\n      Default Radio\\n    </Label>\\n  </FormGroup>\\n  <FormGroup className=\\\"form-check\\\">\\n   <Input type=\\\"radio\\\" name=\\\"radio1\\\" disabled /> \\n    <Label check>\\n     Disabled Radio\\n    </Label>\\n  </FormGroup>\\n    <FormGroup>\\n      <Label for=\\\"exampleFile\\\">Example file input</Label>\\n      <Input type=\\\"file\\\" name=\\\"file\\\" id=\\\"exampleFile\\\" />\\n     </FormGroup>\\n  <FormGroup>\\n    <Label for=\\\"exampleSelect\\\">Example Select</Label>\\n    <Input type=\\\"select\\\" name=\\\"select\\\" id=\\\"exampleSelect\\\">\\n      <option>1</option>\\n      <option>2</option>\\n      <option>3</option>\\n      <option>4</option>\\n      <option>5</option>\\n    </Input>\\n  </FormGroup>\\n  <FormGroup>\\n    <Label for=\\\"exampleSelectMulti\\\">Example Multiple Select</Label>\\n    <Input type=\\\"select\\\" name=\\\"selectMulti\\\" id=\\\"exampleSelectMulti\\\" multiple>\\n      <option>1</option>\\n      <option>2</option>\\n      <option>3</option>\\n      <option>4</option>\\n      <option>5</option>\\n    </Input>\\n  </FormGroup>\\n  <FormGroup>\\n    <Label for=\\\"exampleText\\\">Example textarea</Label>\\n    <Input type=\\\"textarea\\\" name=\\\"text\\\" id=\\\"exampleText\\\" />\\n  </FormGroup>\\n  <Button color=\\\"primary\\\">Save</Button>\\n</Form>\";var inputGroupCode=\"function InputGroupExample () {\\n  const [isOpenOne, setIsOpenOne] = useState(false);\\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\\n  \\n  return (\\n    <div>\\n      <InputGroup>\\n        <InputGroupAddon addonType=\\\"prepend\\\">@</InputGroupAddon>\\n        <Input placeholder=\\\"username\\\" />\\n      </InputGroup>\\n      <br />\\n      <InputGroup>\\n        <Input placeholder=\\\"Recipient's username\\\" />\\n        <InputGroupAddon addonType=\\\"append\\\">\\n          <InputGroupText>@example.com</InputGroupText>\\n        </InputGroupAddon>\\n      </InputGroup>\\n      <br />\\n      <Label for=\\\"yourVanityURl\\\">Your vanity URL</Label>\\n      <InputGroup>\\n        <InputGroupAddon addonType=\\\"prepend\\\">https:example.com/users/</InputGroupAddon>\\n        <Input />\\n      </InputGroup>\\n      <br />\\n      <InputGroup>\\n        <InputGroupAddon addonType=\\\"prepend\\\">$</InputGroupAddon>\\n        <Input />\\n        <InputGroupAddon addonType=\\\"append\\\">.00</InputGroupAddon>\\n      </InputGroup>\\n      <br />\\n      <InputGroup>\\n        <InputGroupAddon addonType=\\\"prepend\\\">With textarea</InputGroupAddon>\\n        <Input type=\\\"textarea\\\" />\\n      </InputGroup>\\n      <br />\\n      <InputGroup>\\n        <InputGroupAddon addonType=\\\"prepend\\\">\\n          <InputGroupText>\\n            <Input addon type=\\\"checkbox\\\" aria-label=\\\"Checkbox for following text input\\\" />\\n          </InputGroupText>\\n        </InputGroupAddon>\\n        <Input />\\n      </InputGroup>\\n      <br />\\n      <InputGroup>\\n        <InputGroupAddon addonType=\\\"prepend\\\">\\n          <InputGroupText>\\n            <Input addon type=\\\"radio\\\" aria-label=\\\"Checkbox for following text input\\\" />\\n          </InputGroupText>\\n        </InputGroupAddon>\\n        <Input />\\n      </InputGroup>\\n      <br />\\n      <InputGroup>\\n        <InputGroupAddon addonType=\\\"prepend\\\">First and last name</InputGroupAddon>\\n        <Input />\\n        <Input />\\n      </InputGroup>\\n      <br />\\n      <InputGroup>\\n        <InputGroupAddon addonType=\\\"prepend\\\">\\n          <InputGroupText>$</InputGroupText>\\n          <InputGroupText>0.00</InputGroupText>\\n        </InputGroupAddon>\\n        <Input />\\n      </InputGroup>\\n      <br />\\n      <InputGroup>\\n        <Input />\\n        <InputGroupAddon addonType=\\\"append\\\">\\n          <InputGroupText>$</InputGroupText>\\n          <InputGroupText>0.00</InputGroupText>\\n        </InputGroupAddon>\\n      </InputGroup>\\n      <br />\\n      <InputGroup>\\n        <InputGroupButtonDropdown \\n          addonType=\\\"append\\\"\\n          isOpen={isOpenOne} \\n          toggle={() => setIsOpenOne(!isOpenOne)}\\n        >\\n          <DropdownToggle color=\\\"primary\\\" caret>\\n            Dropdown\\n          </DropdownToggle>\\n          <DropdownMenu>\\n            <DropdownItem header>Header</DropdownItem>\\n            <DropdownItem disabled>Action</DropdownItem>\\n            <DropdownItem>Something else here</DropdownItem>\\n            <DropdownItem divider />\\n            <DropdownItem>Separated link</DropdownItem>\\n          </DropdownMenu>\\n        </InputGroupButtonDropdown>\\n        <Input />\\n      </InputGroup>\\n      <br />\\n      <InputGroup>\\n        <Input />\\n        <InputGroupButtonDropdown \\n          addonType=\\\"append\\\" \\n          isOpen={isOpenTwo} \\n          toggle={() => setIsOpenTwo(!isOpenTwo)}\\n        >\\n          <DropdownToggle color=\\\"primary\\\" caret>\\n            Dropdown\\n          </DropdownToggle>\\n          <DropdownMenu>\\n            <DropdownItem header>Header</DropdownItem>\\n            <DropdownItem disabled>Action</DropdownItem>\\n            <DropdownItem>Something else here</DropdownItem>\\n            <DropdownItem divider />\\n            <DropdownItem>Separated link</DropdownItem>\\n          </DropdownMenu>\\n        </InputGroupButtonDropdown>\\n      </InputGroup>\\n    </div>\\n  )\\n}\";var customCheckboxCode=\"<Fragment>\\n  <CustomInput\\n    type=\\\"checkbox\\\"\\n    id=\\\"customCheck1\\\"\\n    label=\\\"Check this custom checkbox\\\"\\n    className=\\\"mb-0\\\"\\n    />\\n  <CustomInput \\n    type=\\\"checkbox\\\" \\n    id=\\\"customCheck2\\\" \\n    label=\\\"Check another custom checkbox\\\" \\n  />\\n</Fragment>\\n\";var customRadioCode=\"<Fragment>\\n  <CustomInput\\n    type=\\\"radio\\\"\\n    id=\\\"customRadio1\\\"\\n    name=\\\"customRadio\\\"\\n    label=\\\"Toggle this custom radio\\\"\\n    className=\\\"mb-0\\\"\\n  />\\n  <CustomInput\\n    type=\\\"radio\\\"\\n    id=\\\"customRadio2\\\"\\n    name=\\\"customRadio\\\"\\n    label=\\\"Or toggle this other custom radio\\\"\\n  />\\n</Fragment>\";var InlineRadioCode=\"<FormGroup>\\n  <Label for=\\\"selectOption\\\">\\n    Select one option\\n  </Label>\\n  <div>\\n    <CustomInput \\n      type=\\\"radio\\\" \\n      name=\\\"exampleCustomInlineRadio\\\" \\n      id=\\\"exampleCustomInlineRadio\\\" \\n      label=\\\"Toggle\\\" \\n      inline \\n    />\\n    <CustomInput \\n      type=\\\"radio\\\" \\n      name=\\\"exampleCustomInlineRadio\\\" \\n      id=\\\"exampleCustomInlineRadio2\\\" \\n      label=\\\"and another one\\\" \\n      inline \\n    />\\n  </div>\\n</FormGroup>\";var disabledInputFieldsCode=\"<Fragment>\\n  <CustomInput\\n    type=\\\"checkbox\\\"\\n    id=\\\"customCheckboxDisabled2\\\"\\n    label=\\\"Check this custom checkbox\\\"\\n    disabled\\n  />\\n  <CustomInput\\n    type=\\\"radio\\\"\\n    id=\\\"customRadioDisabled2\\\"\\n    name=\\\"radioDisabled\\\"\\n    label=\\\"Toggle this custom radio\\\"\\n    disabled\\n  />\\n</Fragment>\";var customSwitchCode=\"<CustomInput\\n    type=\\\"switch\\\"\\n    id=\\\"customSwitch\\\"\\n    name=\\\"customSwitch\\\"\\n    label=\\\"Toggle this custom radio\\\"\\n  />\";var customSwitchDisabledCode=\"<CustomInput\\n    type=\\\"switch\\\"\\n    id=\\\"customSwitchDisabled2\\\"\\n    name=\\\"customSwitch\\\"\\n    label=\\\"Toggle this custom radio\\\"\\n    disabled\\n  />\";var customSelectCode=\"<Fragment>\\n  <FormGroup>\\n    <CustomInput \\n      type=\\\"select\\\" \\n      bsSize=\\\"lg\\\" \\n      defaultValue=\\\"1\\\" \\n      id=\\\"exampleCustomSelect1\\\" \\n      name=\\\"customSelect\\\"\\n    >\\n      <option value=\\\"1\\\">One</option>\\n      <option value=\\\"2\\\">Two</option>\\n      <option value=\\\"3\\\">Three</option>\\n    </CustomInput>\\n    </FormGroup>\\n    <FormGroup>\\n      <CustomInput \\n        type=\\\"select\\\" \\n        id=\\\"exampleCustomSelect2\\\" \\n        defaultValue=\\\"1\\\" \\n        name=\\\"customSelect\\\"\\n      >\\n        <option value=\\\"1\\\">One</option>\\n        <option value=\\\"2\\\">Two</option>\\n        <option value=\\\"3\\\">Three</option>\\n      </CustomInput>\\n    </FormGroup>\\n    <FormGroup>\\n      <CustomInput \\n        type=\\\"select\\\" \\n        bsSize=\\\"sm\\\" \\n        id=\\\"exampleCustomSelect3\\\" \\n        defaultValue=\\\"1\\\" \\n        name=\\\"customSelect\\\"\\n      >\\n        <option value=\\\"1\\\">One</option>\\n        <option value=\\\"2\\\">Two</option>\\n        <option value=\\\"3\\\">Three</option>\\n      </CustomInput>\\n  </FormGroup>\\n</Fragment>\";var multipleSelectCode=\"<Fragment>\\n<FormGroup>\\n  <CustomInput \\n    type=\\\"select\\\"\\n    id=\\\"exampleCustomMultipleSelect\\\" \\n    defaultValue={[1,2]} \\n    name=\\\"customSelect\\\" \\n    multiple\\n  >\\n    <option value=\\\"1\\\">One</option>\\n    <option value=\\\"2\\\">Two</option>\\n    <option value=\\\"3\\\">Three</option>\\n    <option value=\\\"4\\\">Four</option>\\n    <option value=\\\"5\\\">Five</option>\\n  </CustomInput>\\n</FormGroup>\\n</Fragment>\";var fileBrowserCode=\"<FormGroup>\\n  <Label for=\\\"exampleCustomFileBrowser\\\">\\n    File Browser\\n  </Label>\\n  <CustomInput \\n    type=\\\"file\\\" \\n    id=\\\"exampleCustomFileBrowser\\\" \\n    name=\\\"customFile\\\" \\n  />\\n</FormGroup>\";var propertiesInput=\"Input.propTypes = {\\n  children: PropTypes.node,\\n  // type can be things like text, password, (typical input types) as well as select and textarea, providing children as you normally would to those.\\n  type: PropTypes.string,\\n  size: PropTypes.string,\\n  bsSize: PropTypes.string,\\n  valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\\n  invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\\n  // ref will only get you a reference to the Input component, use innerRef to get a reference to the DOM input (for things like focus management).\\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\\n  plaintext: PropTypes.bool,\\n  addon: PropTypes.bool,\\n  className: PropTypes.string,\\n  cssModule: PropTypes.object,\\n};\";var propertiesCustomInput=\"CustomInput.propTypes = {\\n  className: PropTypes.string,\\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\\n  type: PropTypes.string.isRequired, // radio, checkbox, select, range.\\n  label: PropTypes.string, // used for checkbox and radios\\n  inline: PropTypes.bool,\\n  valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\\n  invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\\n  bsSize: PropTypes.string,\\n  cssModule: PropTypes.object,\\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]), // for type=\\\"select\\\"\\n  // innerRef would be referenced to select node or input DOM node, depends on type property\\n  innerRef: PropTypes.oneOfType([\\n    PropTypes.object,\\n    PropTypes.string,\\n    PropTypes.func,\\n  ])\\n};\";var propertiesForm=\"Form.propTypes = {\\n  children: PropTypes.node,\\n  inline: PropTypes.bool,\\n  // Pass in a Component to override default element\\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'form'\\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\\n  className: PropTypes.string,\\n  cssModule: PropTypes.object,\\n};\";var propertiesFormFeedback=\"FormFeedback.propTypes = {\\n  children: PropTypes.node,\\n  // Pass in a Component to override default element\\n  tag: PropTypes.string, // default: 'div'\\n  className: PropTypes.string,\\n  cssModule: PropTypes.object,\\n  valid: PropTypes.bool, // default: undefined\\n  tooltip: PropTypes.bool\\n};\";var propertiesFormGroup=\"FormGroup.propTypes = {\\n  children: PropTypes.node,\\n  // Applied the row class when true, does nothing when false\\n  row: PropTypes.bool,\\n  // Applied the form-check class when true, form-group when false\\n  check: PropTypes.bool,\\n  inline: PropTypes.bool,\\n  // Applied the disabled class when the check and disabled props are true, does nothing when false\\n  disabled: PropTypes.bool,\\n  // Pass in a Component to override default element\\n  tag: PropTypes.string, // default: 'div'\\n  className: PropTypes.string,\\n  cssModule: PropTypes.object,\\n};\";var propertiesFormText=\"FormText.propTypes = {\\n  children: PropTypes.node,\\n  inline: PropTypes.bool,\\n  // Pass in a Component to override default element\\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'small'\\n  color: PropTypes.string, // default: 'muted'\\n  className: PropTypes.string,\\n  cssModule: PropTypes.object,\\n};\";var propertiesInputGroup=\"InputGroup.propTypes = {\\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\\n  size: PropTypes.string,\\n  className: PropTypes.string\\n};\";var propertiesInputGroupAddon=\"InputGroupAddOn.propTypes = {\\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\\n  addonType: PropTypes.oneOf(['prepend', 'append']).isRequired,\\n  className: PropTypes.string\\n};\";var propertiesInputGroupButton=\"InputGroupButton.propTypes = {\\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\\n  addonType: PropTypes.oneOf(['prepend', 'append']).isRequired,\\n  children: PropTypes.node,\\n  groupClassName: PropTypes.string, // only used in shorthand\\n  groupAttributes: PropTypes.object, // only used in shorthand\\n  className: PropTypes.string\\n};\";var Forms=function Forms(){return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(PageHeader,{title:\"Forms\",description:\"Examples and usage guidelines for form control styles, layout options, and custom components for creating a wide variety of forms.\",className:\"mb-3\",children:/*#__PURE__*/_jsxs(Button,{tag:\"a\",href:\"https://reactstrap.github.io/components/form\",target:\"_blank\",color:\"link\",size:\"sm\",className:\"pl-0\",children:[\"Forms on reactstrap\",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"chevron-right\",className:\"ml-1 fs--2\"})]})}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Basic Form\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:basicFormCode})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Properties\",light:false}),/*#__PURE__*/_jsxs(CardBody,{className:\"bg-light\",children:[/*#__PURE__*/_jsx(FalconEditor,{code:propertiesInput,hidePreview:true}),/*#__PURE__*/_jsx(FalconEditor,{code:propertiesCustomInput,hidePreview:true}),/*#__PURE__*/_jsx(FalconEditor,{code:propertiesForm,hidePreview:true}),/*#__PURE__*/_jsx(FalconEditor,{code:propertiesFormFeedback,hidePreview:true}),/*#__PURE__*/_jsx(FalconEditor,{code:propertiesFormGroup,hidePreview:true}),/*#__PURE__*/_jsx(FalconEditor,{code:propertiesFormGroup,hidePreview:true}),/*#__PURE__*/_jsx(FalconEditor,{code:propertiesFormText,hidePreview:true})]})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Input Group Properties\",light:false}),/*#__PURE__*/_jsxs(CardBody,{className:\"bg-light\",children:[/*#__PURE__*/_jsx(\"code\",{className:\"bg-dark d-block p-2\",children:/*#__PURE__*/_jsx(\"pre\",{className:\"text-300\",children:propertiesInputGroup})}),/*#__PURE__*/_jsx(\"code\",{className:\"bg-dark d-block p-2\",children:/*#__PURE__*/_jsx(\"pre\",{className:\"text-300\",children:propertiesInputGroupAddon})}),/*#__PURE__*/_jsx(\"code\",{className:\"bg-dark d-block p-2\",children:/*#__PURE__*/_jsx(\"pre\",{className:\"text-300\",children:propertiesInputGroupButton})})]})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Input Group\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:inputGroupCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsx(PageHeader,{title:\"Custom Forms\",description:\"For even more customization and cross-browser consistency, use Bootstrap's completely custom form elements to replace the browser defaults.\",className:\"mb-3\",children:/*#__PURE__*/_jsxs(Button,{tag:\"a\",href:\"https://reactstrap.github.io/components/form#Custom-Inputs\",target:\"_blank\",color:\"link\",size:\"sm\",className:\"pl-0\",children:[\"Custom Forms on reactstrap\",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"chevron-right\",className:\"ml-1 fs--2\"})]})}),/*#__PURE__*/_jsxs(Row,{noGutters:true,className:\"mb-3\",children:[/*#__PURE__*/_jsx(Col,{lg:6,className:\"pr-lg-2 mb-3\",children:/*#__PURE__*/_jsxs(Card,{className:\"h-100 mb-2\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Checkboxes\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:customCheckboxCode,language:\"jsx\"})})]})}),/*#__PURE__*/_jsx(Col,{lg:6,className:\"pl-lg-2 mb-3\",children:/*#__PURE__*/_jsxs(Card,{className:\"h-100\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Radios\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:customRadioCode,language:\"jsx\"})})]})}),/*#__PURE__*/_jsx(Col,{lg:6,className:\"pr-lg-2 mb-3\",children:/*#__PURE__*/_jsxs(Card,{className:\"h-100\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Inline Radios\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:InlineRadioCode,scope:{Flex:Flex}})})]})}),/*#__PURE__*/_jsx(Col,{lg:6,className:\"pl-lg-2 mb-3\",children:/*#__PURE__*/_jsxs(Card,{className:\"h-100\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Disabled\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:disabledInputFieldsCode,language:\"jsx\"})})]})}),/*#__PURE__*/_jsx(Col,{lg:6,className:\"pr-lg-2 mb-3\",children:/*#__PURE__*/_jsxs(Card,{className:\"h-100\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Switches\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:customSwitchCode})})]})}),/*#__PURE__*/_jsx(Col,{lg:6,className:\"pl-lg-2 mb-3\",children:/*#__PURE__*/_jsxs(Card,{className:\"h-100\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Disabled Switches\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:customSwitchDisabledCode,language:\"jsx\"})})]})}),/*#__PURE__*/_jsx(Col,{lg:6,className:\"pr-lg-2\",children:/*#__PURE__*/_jsxs(Card,{className:\"h-100\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Custom Select\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:customSelectCode,language:\"jsx\"})})]})}),/*#__PURE__*/_jsxs(Col,{lg:6,className:\"pl-lg-2\",children:[/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Multiple Select\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:multipleSelectCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{className:\"\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"File Browser\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:fileBrowserCode,language:\"jsx\"})})]})]})]})]});};export default Forms;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/bootstrap-components/Forms.js"],"names":["React","Fragment","Button","Card","CardBody","Col","Row","FontAwesomeIcon","FalconCardHeader","FalconEditor","PageHeader","Flex","basicFormCode","inputGroupCode","customCheckboxCode","customRadioCode","InlineRadioCode","disabledInputFieldsCode","customSwitchCode","customSwitchDisabledCode","customSelectCode","multipleSelectCode","fileBrowserCode","propertiesInput","propertiesCustomInput","propertiesForm","propertiesFormFeedback","propertiesFormGroup","propertiesFormText","propertiesInputGroup","propertiesInputGroupAddon","propertiesInputGroupButton","Forms"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,QAAvB,CAAiCC,GAAjC,CAAsCC,GAAtC,KAAiD,YAAjD,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,MAAOC,CAAAA,gBAAP,KAA6B,4BAA7B,CACA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,CACA,MAAOC,CAAAA,UAAP,KAAuB,sBAAvB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,C,wFAEA,GAAMC,CAAAA,aAAa,ijFAAnB,CA4EA,GAAMC,CAAAA,cAAc,4xHAApB,CAsHA,GAAMC,CAAAA,kBAAkB,6RAAxB,CAcA,GAAMC,CAAAA,eAAe,qUAArB,CAgBA,GAAMC,CAAAA,eAAe,odAArB,CAsBA,GAAMC,CAAAA,uBAAuB,gUAA7B,CAgBA,GAAMC,CAAAA,gBAAgB,sIAAtB,CAMA,GAAMC,CAAAA,wBAAwB,6JAA9B,CAOA,GAAMC,CAAAA,gBAAgB,yiCAAtB,CAyCA,GAAMC,CAAAA,kBAAkB,kaAAxB,CAkBA,GAAMC,CAAAA,eAAe,iNAArB,CAWA,GAAMC,CAAAA,eAAe,+2BAArB,CAgBA,GAAMC,CAAAA,qBAAqB,01BAA3B,CAkBA,GAAMC,CAAAA,cAAc,mXAApB,CASA,GAAMC,CAAAA,sBAAsB,2SAA5B,CASA,GAAMC,CAAAA,mBAAmB,+iBAAzB,CAcA,GAAMC,CAAAA,kBAAkB,gVAAxB,CAUA,GAAMC,CAAAA,oBAAoB,0JAA1B,CAMA,GAAMC,CAAAA,yBAAyB,qMAA/B,CAMA,GAAMC,CAAAA,0BAA0B,kWAAhC,CASA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,sBACZ,MAAC,QAAD,yBACE,KAAC,UAAD,EACE,KAAK,CAAC,OADR,CAEE,WAAW,CAAC,oIAFd,CAGE,SAAS,CAAC,MAHZ,uBAKE,MAAC,MAAD,EACE,GAAG,CAAC,GADN,CAEE,IAAI,CAAC,8CAFP,CAGE,MAAM,CAAC,QAHT,CAIE,KAAK,CAAC,MAJR,CAKE,IAAI,CAAC,IALP,CAME,SAAS,CAAC,MANZ,8CASE,KAAC,eAAD,EAAiB,IAAI,CAAC,eAAtB,CAAsC,SAAS,CAAC,YAAhD,EATF,GALF,EADF,cAkBE,MAAC,IAAD,EAAM,SAAS,CAAC,MAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,YAAxB,CAAqC,KAAK,CAAE,KAA5C,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEpB,aAApB,EADF,EAFF,GAlBF,cAwBE,MAAC,IAAD,EAAM,SAAS,CAAC,MAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,YAAxB,CAAqC,KAAK,CAAE,KAA5C,EADF,cAEE,MAAC,QAAD,EAAU,SAAS,CAAC,UAApB,wBACE,KAAC,YAAD,EAAc,IAAI,CAAEW,eAApB,CAAqC,WAAW,KAAhD,EADF,cAEE,KAAC,YAAD,EAAc,IAAI,CAAEC,qBAApB,CAA2C,WAAW,KAAtD,EAFF,cAGE,KAAC,YAAD,EAAc,IAAI,CAAEC,cAApB,CAAoC,WAAW,KAA/C,EAHF,cAIE,KAAC,YAAD,EAAc,IAAI,CAAEC,sBAApB,CAA4C,WAAW,KAAvD,EAJF,cAKE,KAAC,YAAD,EAAc,IAAI,CAAEC,mBAApB,CAAyC,WAAW,KAApD,EALF,cAME,KAAC,YAAD,EAAc,IAAI,CAAEA,mBAApB,CAAyC,WAAW,KAApD,EANF,cAOE,KAAC,YAAD,EAAc,IAAI,CAAEC,kBAApB,CAAwC,WAAW,KAAnD,EAPF,GAFF,GAxBF,cAoCE,MAAC,IAAD,EAAM,SAAS,CAAC,MAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,wBAAxB,CAAiD,KAAK,CAAE,KAAxD,EADF,cAEE,MAAC,QAAD,EAAU,SAAS,CAAC,UAApB,wBACE,aAAM,SAAS,CAAC,qBAAhB,uBACE,YAAK,SAAS,CAAC,UAAf,UAA2BC,oBAA3B,EADF,EADF,cAIE,aAAM,SAAS,CAAC,qBAAhB,uBACE,YAAK,SAAS,CAAC,UAAf,UAA2BC,yBAA3B,EADF,EAJF,cAOE,aAAM,SAAS,CAAC,qBAAhB,uBACE,YAAK,SAAS,CAAC,UAAf,UAA2BC,0BAA3B,EADF,EAPF,GAFF,GApCF,cAkDE,MAAC,IAAD,EAAM,SAAS,CAAC,MAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,aAAxB,CAAsC,KAAK,CAAE,KAA7C,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAElB,cAApB,CAAoC,QAAQ,CAAC,KAA7C,EADF,EAFF,GAlDF,cAwDE,KAAC,UAAD,EACE,KAAK,CAAC,cADR,CAEE,WAAW,CAAC,6IAFd,CAGE,SAAS,CAAC,MAHZ,uBAKE,MAAC,MAAD,EACE,GAAG,CAAC,GADN,CAEE,IAAI,CAAC,4DAFP,CAGE,MAAM,CAAC,QAHT,CAIE,KAAK,CAAC,MAJR,CAKE,IAAI,CAAC,IALP,CAME,SAAS,CAAC,MANZ,qDASE,KAAC,eAAD,EAAiB,IAAI,CAAC,eAAtB,CAAsC,SAAS,CAAC,YAAhD,EATF,GALF,EAxDF,cAyEE,MAAC,GAAD,EAAK,SAAS,KAAd,CAAe,SAAS,CAAC,MAAzB,wBACE,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,cAAtB,uBACE,MAAC,IAAD,EAAM,SAAS,CAAC,YAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,YAAxB,CAAqC,KAAK,CAAE,KAA5C,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEC,kBAApB,CAAwC,QAAQ,CAAC,KAAjD,EADF,EAFF,GADF,EADF,cASE,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,cAAtB,uBACE,MAAC,IAAD,EAAM,SAAS,CAAC,OAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,QAAxB,CAAiC,KAAK,CAAE,KAAxC,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEC,eAApB,CAAqC,QAAQ,CAAC,KAA9C,EADF,EAFF,GADF,EATF,cAiBE,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,cAAtB,uBACE,MAAC,IAAD,EAAM,SAAS,CAAC,OAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,eAAxB,CAAwC,KAAK,CAAE,KAA/C,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEC,eAApB,CAAqC,KAAK,CAAE,CAAEL,IAAI,CAAJA,IAAF,CAA5C,EADF,EAFF,GADF,EAjBF,cAyBE,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,cAAtB,uBACE,MAAC,IAAD,EAAM,SAAS,CAAC,OAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,UAAxB,CAAmC,KAAK,CAAE,KAA1C,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEM,uBAApB,CAA6C,QAAQ,CAAC,KAAtD,EADF,EAFF,GADF,EAzBF,cAiCE,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,cAAtB,uBACE,MAAC,IAAD,EAAM,SAAS,CAAC,OAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,UAAxB,CAAmC,KAAK,CAAE,KAA1C,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEC,gBAApB,EADF,EAFF,GADF,EAjCF,cAyCE,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,cAAtB,uBACE,MAAC,IAAD,EAAM,SAAS,CAAC,OAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,mBAAxB,CAA4C,KAAK,CAAE,KAAnD,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEC,wBAApB,CAA8C,QAAQ,CAAC,KAAvD,EADF,EAFF,GADF,EAzCF,cAiDE,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,SAAtB,uBACE,MAAC,IAAD,EAAM,SAAS,CAAC,OAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,eAAxB,CAAwC,KAAK,CAAE,KAA/C,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEC,gBAApB,CAAsC,QAAQ,CAAC,KAA/C,EADF,EAFF,GADF,EAjDF,cAyDE,MAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,SAAtB,wBACE,MAAC,IAAD,EAAM,SAAS,CAAC,MAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,iBAAxB,CAA0C,KAAK,CAAE,KAAjD,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEC,kBAApB,CAAwC,QAAQ,CAAC,KAAjD,EADF,EAFF,GADF,cAOE,MAAC,IAAD,EAAM,SAAS,CAAC,EAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,cAAxB,CAAuC,KAAK,CAAE,KAA9C,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEC,eAApB,CAAqC,QAAQ,CAAC,KAA9C,EADF,EAFF,GAPF,GAzDF,GAzEF,GADY,EAAd,CAqJA,cAAeU,CAAAA,KAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardBody, Col, Row } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport PageHeader from '../common/PageHeader';\nimport Flex from '../common/Flex';\n\nconst basicFormCode = `<Form>\n  <FormGroup>\n    <Label for=\"exampleName\">Name</Label>\n    <Input type=\"text\" name=\"name\" id=\"exampleName\" placeholder=\"Name\" />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"readonly\">Read Only</Label>\n    <Input type=\"text\" name=\"readonly\" id=\"readonly\" placeholder=\"Readonly input here...\" disabled />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleEmail\">Read only plain text</Label>\n    <Input plaintext value=\"email@example.com\" onChange={() => {}} />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleEmail\">Email</Label>\n    <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Email\" />\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"examplePassword\">Password</Label>\n    <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"Password\" />\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n    <Input type=\"checkbox\" name=\"check\" id=\"exampleCheck\" />\n    <Label for=\"exampleCheck\" check>\n      Checkbox\n    </Label>\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n    <Input type=\"checkbox\" name=\"check\" id=\"exampleCheck1\" disabled />\n    <Label for=\"exampleCheck1\" check>\n      Disabled checkbox\n    </Label>\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n  <Input type=\"radio\" name=\"radio1\" defaultChecked />\n    <Label check>\n      Default Radio\n    </Label>\n  </FormGroup>\n  <FormGroup className=\"form-check\">\n   <Input type=\"radio\" name=\"radio1\" disabled /> \n    <Label check>\n     Disabled Radio\n    </Label>\n  </FormGroup>\n    <FormGroup>\n      <Label for=\"exampleFile\">Example file input</Label>\n      <Input type=\"file\" name=\"file\" id=\"exampleFile\" />\n     </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleSelect\">Example Select</Label>\n    <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Input>\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleSelectMulti\">Example Multiple Select</Label>\n    <Input type=\"select\" name=\"selectMulti\" id=\"exampleSelectMulti\" multiple>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Input>\n  </FormGroup>\n  <FormGroup>\n    <Label for=\"exampleText\">Example textarea</Label>\n    <Input type=\"textarea\" name=\"text\" id=\"exampleText\" />\n  </FormGroup>\n  <Button color=\"primary\">Save</Button>\n</Form>`;\n\nconst inputGroupCode = `function InputGroupExample () {\n  const [isOpenOne, setIsOpenOne] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  \n  return (\n    <div>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">@</InputGroupAddon>\n        <Input placeholder=\"username\" />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <Input placeholder=\"Recipient's username\" />\n        <InputGroupAddon addonType=\"append\">\n          <InputGroupText>@example.com</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n      <br />\n      <Label for=\"yourVanityURl\">Your vanity URL</Label>\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">https:example.com/users/</InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n        <Input />\n        <InputGroupAddon addonType=\"append\">.00</InputGroupAddon>\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">With textarea</InputGroupAddon>\n        <Input type=\"textarea\" />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>\n            <Input addon type=\"checkbox\" aria-label=\"Checkbox for following text input\" />\n          </InputGroupText>\n        </InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>\n            <Input addon type=\"radio\" aria-label=\"Checkbox for following text input\" />\n          </InputGroupText>\n        </InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">First and last name</InputGroupAddon>\n        <Input />\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>$</InputGroupText>\n          <InputGroupText>0.00</InputGroupText>\n        </InputGroupAddon>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <Input />\n        <InputGroupAddon addonType=\"append\">\n          <InputGroupText>$</InputGroupText>\n          <InputGroupText>0.00</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroupButtonDropdown \n          addonType=\"append\"\n          isOpen={isOpenOne} \n          toggle={() => setIsOpenOne(!isOpenOne)}\n        >\n          <DropdownToggle color=\"primary\" caret>\n            Dropdown\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem header>Header</DropdownItem>\n            <DropdownItem disabled>Action</DropdownItem>\n            <DropdownItem>Something else here</DropdownItem>\n            <DropdownItem divider />\n            <DropdownItem>Separated link</DropdownItem>\n          </DropdownMenu>\n        </InputGroupButtonDropdown>\n        <Input />\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <Input />\n        <InputGroupButtonDropdown \n          addonType=\"append\" \n          isOpen={isOpenTwo} \n          toggle={() => setIsOpenTwo(!isOpenTwo)}\n        >\n          <DropdownToggle color=\"primary\" caret>\n            Dropdown\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem header>Header</DropdownItem>\n            <DropdownItem disabled>Action</DropdownItem>\n            <DropdownItem>Something else here</DropdownItem>\n            <DropdownItem divider />\n            <DropdownItem>Separated link</DropdownItem>\n          </DropdownMenu>\n        </InputGroupButtonDropdown>\n      </InputGroup>\n    </div>\n  )\n}`;\n\nconst customCheckboxCode = `<Fragment>\n  <CustomInput\n    type=\"checkbox\"\n    id=\"customCheck1\"\n    label=\"Check this custom checkbox\"\n    className=\"mb-0\"\n    />\n  <CustomInput \n    type=\"checkbox\" \n    id=\"customCheck2\" \n    label=\"Check another custom checkbox\" \n  />\n</Fragment>\n`;\nconst customRadioCode = `<Fragment>\n  <CustomInput\n    type=\"radio\"\n    id=\"customRadio1\"\n    name=\"customRadio\"\n    label=\"Toggle this custom radio\"\n    className=\"mb-0\"\n  />\n  <CustomInput\n    type=\"radio\"\n    id=\"customRadio2\"\n    name=\"customRadio\"\n    label=\"Or toggle this other custom radio\"\n  />\n</Fragment>`;\n\nconst InlineRadioCode = `<FormGroup>\n  <Label for=\"selectOption\">\n    Select one option\n  </Label>\n  <div>\n    <CustomInput \n      type=\"radio\" \n      name=\"exampleCustomInlineRadio\" \n      id=\"exampleCustomInlineRadio\" \n      label=\"Toggle\" \n      inline \n    />\n    <CustomInput \n      type=\"radio\" \n      name=\"exampleCustomInlineRadio\" \n      id=\"exampleCustomInlineRadio2\" \n      label=\"and another one\" \n      inline \n    />\n  </div>\n</FormGroup>`;\n\nconst disabledInputFieldsCode = `<Fragment>\n  <CustomInput\n    type=\"checkbox\"\n    id=\"customCheckboxDisabled2\"\n    label=\"Check this custom checkbox\"\n    disabled\n  />\n  <CustomInput\n    type=\"radio\"\n    id=\"customRadioDisabled2\"\n    name=\"radioDisabled\"\n    label=\"Toggle this custom radio\"\n    disabled\n  />\n</Fragment>`;\n\nconst customSwitchCode = `<CustomInput\n    type=\"switch\"\n    id=\"customSwitch\"\n    name=\"customSwitch\"\n    label=\"Toggle this custom radio\"\n  />`;\nconst customSwitchDisabledCode = `<CustomInput\n    type=\"switch\"\n    id=\"customSwitchDisabled2\"\n    name=\"customSwitch\"\n    label=\"Toggle this custom radio\"\n    disabled\n  />`;\nconst customSelectCode = `<Fragment>\n  <FormGroup>\n    <CustomInput \n      type=\"select\" \n      bsSize=\"lg\" \n      defaultValue=\"1\" \n      id=\"exampleCustomSelect1\" \n      name=\"customSelect\"\n    >\n      <option value=\"1\">One</option>\n      <option value=\"2\">Two</option>\n      <option value=\"3\">Three</option>\n    </CustomInput>\n    </FormGroup>\n    <FormGroup>\n      <CustomInput \n        type=\"select\" \n        id=\"exampleCustomSelect2\" \n        defaultValue=\"1\" \n        name=\"customSelect\"\n      >\n        <option value=\"1\">One</option>\n        <option value=\"2\">Two</option>\n        <option value=\"3\">Three</option>\n      </CustomInput>\n    </FormGroup>\n    <FormGroup>\n      <CustomInput \n        type=\"select\" \n        bsSize=\"sm\" \n        id=\"exampleCustomSelect3\" \n        defaultValue=\"1\" \n        name=\"customSelect\"\n      >\n        <option value=\"1\">One</option>\n        <option value=\"2\">Two</option>\n        <option value=\"3\">Three</option>\n      </CustomInput>\n  </FormGroup>\n</Fragment>`;\n\nconst multipleSelectCode = `<Fragment>\n<FormGroup>\n  <CustomInput \n    type=\"select\"\n    id=\"exampleCustomMultipleSelect\" \n    defaultValue={[1,2]} \n    name=\"customSelect\" \n    multiple\n  >\n    <option value=\"1\">One</option>\n    <option value=\"2\">Two</option>\n    <option value=\"3\">Three</option>\n    <option value=\"4\">Four</option>\n    <option value=\"5\">Five</option>\n  </CustomInput>\n</FormGroup>\n</Fragment>`;\n\nconst fileBrowserCode = `<FormGroup>\n  <Label for=\"exampleCustomFileBrowser\">\n    File Browser\n  </Label>\n  <CustomInput \n    type=\"file\" \n    id=\"exampleCustomFileBrowser\" \n    name=\"customFile\" \n  />\n</FormGroup>`;\n\nconst propertiesInput = `Input.propTypes = {\n  children: PropTypes.node,\n  // type can be things like text, password, (typical input types) as well as select and textarea, providing children as you normally would to those.\n  type: PropTypes.string,\n  size: PropTypes.string,\n  bsSize: PropTypes.string,\n  valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n  invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  // ref will only get you a reference to the Input component, use innerRef to get a reference to the DOM input (for things like focus management).\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  plaintext: PropTypes.bool,\n  addon: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\nconst propertiesCustomInput = `CustomInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  type: PropTypes.string.isRequired, // radio, checkbox, select, range.\n  label: PropTypes.string, // used for checkbox and radios\n  inline: PropTypes.bool,\n  valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n  invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n  bsSize: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]), // for type=\"select\"\n  // innerRef would be referenced to select node or input DOM node, depends on type property\n  innerRef: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.func,\n  ])\n};`;\nconst propertiesForm = `Form.propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'form'\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\nconst propertiesFormFeedback = `FormFeedback.propTypes = {\n  children: PropTypes.node,\n  // Pass in a Component to override default element\n  tag: PropTypes.string, // default: 'div'\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool, // default: undefined\n  tooltip: PropTypes.bool\n};`;\nconst propertiesFormGroup = `FormGroup.propTypes = {\n  children: PropTypes.node,\n  // Applied the row class when true, does nothing when false\n  row: PropTypes.bool,\n  // Applied the form-check class when true, form-group when false\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  // Applied the disabled class when the check and disabled props are true, does nothing when false\n  disabled: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.string, // default: 'div'\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\nconst propertiesFormText = `FormText.propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'small'\n  color: PropTypes.string, // default: 'muted'\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};`;\n\nconst propertiesInputGroup = `InputGroup.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  size: PropTypes.string,\n  className: PropTypes.string\n};`;\n\nconst propertiesInputGroupAddon = `InputGroupAddOn.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  addonType: PropTypes.oneOf(['prepend', 'append']).isRequired,\n  className: PropTypes.string\n};`;\n\nconst propertiesInputGroupButton = `InputGroupButton.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  addonType: PropTypes.oneOf(['prepend', 'append']).isRequired,\n  children: PropTypes.node,\n  groupClassName: PropTypes.string, // only used in shorthand\n  groupAttributes: PropTypes.object, // only used in shorthand\n  className: PropTypes.string\n};`;\n\nconst Forms = () => (\n  <Fragment>\n    <PageHeader\n      title=\"Forms\"\n      description=\"Examples and usage guidelines for form control styles, layout options, and custom components for creating a wide variety of forms.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/form\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Forms on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Basic Form\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={basicFormCode} />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Properties\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={propertiesInput} hidePreview />\n        <FalconEditor code={propertiesCustomInput} hidePreview />\n        <FalconEditor code={propertiesForm} hidePreview />\n        <FalconEditor code={propertiesFormFeedback} hidePreview />\n        <FalconEditor code={propertiesFormGroup} hidePreview />\n        <FalconEditor code={propertiesFormGroup} hidePreview />\n        <FalconEditor code={propertiesFormText} hidePreview />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Input Group Properties\" light={false} />\n      <CardBody className=\"bg-light\">\n        <code className=\"bg-dark d-block p-2\">\n          <pre className=\"text-300\">{propertiesInputGroup}</pre>\n        </code>\n        <code className=\"bg-dark d-block p-2\">\n          <pre className=\"text-300\">{propertiesInputGroupAddon}</pre>\n        </code>\n        <code className=\"bg-dark d-block p-2\">\n          <pre className=\"text-300\">{propertiesInputGroupButton}</pre>\n        </code>\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Input Group\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={inputGroupCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <PageHeader\n      title=\"Custom Forms\"\n      description=\"For even more customization and cross-browser consistency, use Bootstrap's completely custom form elements to replace the browser defaults.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/form#Custom-Inputs\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Custom Forms on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Row noGutters className=\"mb-3\">\n      <Col lg={6} className=\"pr-lg-2 mb-3\">\n        <Card className=\"h-100 mb-2\">\n          <FalconCardHeader title=\"Checkboxes\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={customCheckboxCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pl-lg-2 mb-3\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Radios\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={customRadioCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pr-lg-2 mb-3\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Inline Radios\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={InlineRadioCode} scope={{ Flex }} />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pl-lg-2 mb-3\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Disabled\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={disabledInputFieldsCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pr-lg-2 mb-3\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Switches\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={customSwitchCode} />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pl-lg-2 mb-3\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Disabled Switches\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={customSwitchDisabledCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pr-lg-2\">\n        <Card className=\"h-100\">\n          <FalconCardHeader title=\"Custom Select\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={customSelectCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg={6} className=\"pl-lg-2\">\n        <Card className=\"mb-3\">\n          <FalconCardHeader title=\"Multiple Select\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={multipleSelectCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n        <Card className=\"\">\n          <FalconCardHeader title=\"File Browser\" light={false} />\n          <CardBody className=\"bg-light\">\n            <FalconEditor code={fileBrowserCode} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n  </Fragment>\n);\n\nexport default Forms;\n"]},"metadata":{},"sourceType":"module"}