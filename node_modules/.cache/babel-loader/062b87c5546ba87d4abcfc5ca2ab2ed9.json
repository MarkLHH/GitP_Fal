{"ast":null,"code":"import React,{Fragment}from'react';import{Button,Card,CardBody}from'reactstrap';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import FalconCardHeader from'../common/FalconCardHeader';import FalconEditor from'../common/FalconEditor';import PageHeader from'../common/PageHeader';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var basicModal=\"function basicModalExample () {\\n  const [collapseOne, collapseOneOpen] = useState(false);\\n  \\n  return (\\n    <Fragment>\\n      <Button color=\\\"primary\\\" onClick={() => collapseOneOpen(!collapseOne)}>\\n        Launch demo modal\\n      </Button>\\n      <Modal isOpen={collapseOne} toggle={() => collapseOneOpen(!collapseOne)}>\\n        <ModalHeader>Modal title</ModalHeader>\\n        <ModalBody>\\n         Woohoo, you're reading this text in a modal!\\n        </ModalBody>\\n        <ModalFooter>\\n          <Button onClick={() => collapseOneOpen(!collapseOne)}>\\n            Close\\n          </Button>\\n          <Button color=\\\"primary\\\">Save changes</Button>\\n        </ModalFooter>\\n      </Modal>\\n    </Fragment>\\n  );\\n}\";var properties=\"Modal.propTypes = {\\n  // boolean to control the state of the popover\\n  isOpen:  PropTypes.bool,\\n  autoFocus: PropTypes.bool,\\n  // if modal should be centered vertically in viewport\\n  centered: PropTypes.bool,\\n  // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\\n  size: PropTypes.string,\\n  // callback for toggling isOpen in the controlling component\\n  toggle:  PropTypes.func,\\n  role: PropTypes.string, // defaults to \\\"dialog\\\"\\n  // used to reference the ID of the title element in the modal\\n  labelledBy: PropTypes.string,\\n  keyboard: PropTypes.bool,\\n  // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\\n  backdrop: PropTypes.oneOfType([\\n    PropTypes.bool,\\n    PropTypes.oneOf(['static'])\\n  ]),\\n  // if body of modal should be scrollable when content is long\\n  scrollable: PropTypes.bool,\\n  // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\\n  // external: PropTypes.node,\\n  // called on componentDidMount\\n  onEnter: PropTypes.func,\\n  // called on componentWillUnmount\\n  onExit: PropTypes.func,\\n  // called when done transitioning in\\n  onOpened: PropTypes.func,\\n  // called when done transitioning out\\n  onClosed: PropTypes.func,\\n  className: PropTypes.string,\\n  wrapClassName: PropTypes.string,\\n  modalClassName: PropTypes.string,\\n  backdropClassName: PropTypes.string,\\n  contentClassName: PropTypes.string,\\n  // boolean to control whether the fade transition occurs (default: true)\\n  fade: PropTypes.bool,\\n  cssModule: PropTypes.object,\\n  // zIndex defaults to 1000.\\n  zIndex: PropTypes.oneOfType([\\n    PropTypes.number,\\n    PropTypes.string,\\n  ]),\\n  // backdropTransition - controls backdrop transition\\n  // timeout is 150ms by default to match bootstrap\\n  // see Fade for more details\\n  backdropTransition: PropTypes.shape(Fade.propTypes),\\n  // modalTransition - controls modal transition\\n  // timeout is 300ms by default to match bootstrap\\n  // see Fade for more details\\n  modalTransition: PropTypes.shape(Fade.propTypes),\\n  innerRef: PropTypes.object,\\n  // if modal should be destructed/removed from DOM after closing\\n  unmountOnClose: PropTypes.bool // defaults to true\\n}\";var Modals=function Modals(){return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(PageHeader,{title:\"Modals\",description:\"Use Bootstrap\\u2019s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\",className:\"mb-3\",children:/*#__PURE__*/_jsxs(Button,{tag:\"a\",href:\"https://reactstrap.github.io/components/modals\",target:\"_blank\",color:\"link\",size:\"sm\",className:\"pl-0\",children:[\"Modals on reactstrap\",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"chevron-right\",className:\"ml-1 fs--2\"})]})}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Modals\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:basicModal,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Properties\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:properties,hidePreview:true})})]})]});};export default Modals;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/bootstrap-components/Modals.js"],"names":["React","Fragment","Button","Card","CardBody","FontAwesomeIcon","FalconCardHeader","FalconEditor","PageHeader","basicModal","properties","Modals"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,QAAvB,KAAuC,YAAvC,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,MAAOC,CAAAA,gBAAP,KAA6B,4BAA7B,CACA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,CACA,MAAOC,CAAAA,UAAP,KAAuB,sBAAvB,C,wFAEA,GAAMC,CAAAA,UAAU,0tBAAhB,CAwBA,GAAMC,CAAAA,UAAU,gsEAAhB,CAyDA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,sBACb,MAAC,QAAD,yBACE,KAAC,UAAD,EACE,KAAK,CAAC,QADR,CAEE,WAAW,CAAC,4IAFd,CAGE,SAAS,CAAC,MAHZ,uBAKE,MAAC,MAAD,EACE,GAAG,CAAC,GADN,CAEE,IAAI,CAAC,gDAFP,CAGE,MAAM,CAAC,QAHT,CAIE,KAAK,CAAC,MAJR,CAKE,IAAI,CAAC,IALP,CAME,SAAS,CAAC,MANZ,+CASE,KAAC,eAAD,EAAiB,IAAI,CAAC,eAAtB,CAAsC,SAAS,CAAC,YAAhD,EATF,GALF,EADF,cAkBE,MAAC,IAAD,EAAM,SAAS,CAAC,MAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,QAAxB,CAAiC,KAAK,CAAE,KAAxC,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEF,UAApB,CAAgC,QAAQ,CAAC,KAAzC,EADF,EAFF,GAlBF,cAwBE,MAAC,IAAD,yBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,YAAxB,CAAqC,KAAK,CAAE,KAA5C,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,UAApB,uBACE,KAAC,YAAD,EAAc,IAAI,CAAEC,UAApB,CAAgC,WAAW,KAA3C,EADF,EAFF,GAxBF,GADa,EAAf,CAkCA,cAAeC,CAAAA,MAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport PageHeader from '../common/PageHeader';\n\nconst basicModal = `function basicModalExample () {\n  const [collapseOne, collapseOneOpen] = useState(false);\n  \n  return (\n    <Fragment>\n      <Button color=\"primary\" onClick={() => collapseOneOpen(!collapseOne)}>\n        Launch demo modal\n      </Button>\n      <Modal isOpen={collapseOne} toggle={() => collapseOneOpen(!collapseOne)}>\n        <ModalHeader>Modal title</ModalHeader>\n        <ModalBody>\n         Woohoo, you're reading this text in a modal!\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={() => collapseOneOpen(!collapseOne)}>\n            Close\n          </Button>\n          <Button color=\"primary\">Save changes</Button>\n        </ModalFooter>\n      </Modal>\n    </Fragment>\n  );\n}`;\n\nconst properties = `Modal.propTypes = {\n  // boolean to control the state of the popover\n  isOpen:  PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  // if modal should be centered vertically in viewport\n  centered: PropTypes.bool,\n  // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\n  size: PropTypes.string,\n  // callback for toggling isOpen in the controlling component\n  toggle:  PropTypes.func,\n  role: PropTypes.string, // defaults to \"dialog\"\n  // used to reference the ID of the title element in the modal\n  labelledBy: PropTypes.string,\n  keyboard: PropTypes.bool,\n  // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\n  backdrop: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['static'])\n  ]),\n  // if body of modal should be scrollable when content is long\n  scrollable: PropTypes.bool,\n  // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\n  // external: PropTypes.node,\n  // called on componentDidMount\n  onEnter: PropTypes.func,\n  // called on componentWillUnmount\n  onExit: PropTypes.func,\n  // called when done transitioning in\n  onOpened: PropTypes.func,\n  // called when done transitioning out\n  onClosed: PropTypes.func,\n  className: PropTypes.string,\n  wrapClassName: PropTypes.string,\n  modalClassName: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  contentClassName: PropTypes.string,\n  // boolean to control whether the fade transition occurs (default: true)\n  fade: PropTypes.bool,\n  cssModule: PropTypes.object,\n  // zIndex defaults to 1000.\n  zIndex: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  // backdropTransition - controls backdrop transition\n  // timeout is 150ms by default to match bootstrap\n  // see Fade for more details\n  backdropTransition: PropTypes.shape(Fade.propTypes),\n  // modalTransition - controls modal transition\n  // timeout is 300ms by default to match bootstrap\n  // see Fade for more details\n  modalTransition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.object,\n  // if modal should be destructed/removed from DOM after closing\n  unmountOnClose: PropTypes.bool // defaults to true\n}`;\n\nconst Modals = () => (\n  <Fragment>\n    <PageHeader\n      title=\"Modals\"\n      description=\"Use Bootstrapâ€™s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/modals\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Modals on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Modals\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={basicModal} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card>\n      <FalconCardHeader title=\"Properties\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={properties} hidePreview />\n      </CardBody>\n    </Card>\n  </Fragment>\n);\n\nexport default Modals;\n"]},"metadata":{},"sourceType":"module"}