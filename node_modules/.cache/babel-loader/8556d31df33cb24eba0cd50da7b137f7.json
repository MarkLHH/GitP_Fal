{"ast":null,"code":"import _objectSpread from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _slicedToArray from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext,useEffect}from'react';import Scrollbar from'react-scrollbars-custom';import Message from'./Message';import ThreadInfo from'./ThreadInfo';import{isIterableArray}from'../../../helpers/utils';import AppContext,{ChatContext}from'../../../context/Context';import ChatContentBodyIntro from'./ChatContentBodyIntro';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChatContentBody=function ChatContentBody(_ref){var thread=_ref.thread,isOpenThreadInfo=_ref.isOpenThreadInfo;var lastDate=null;var _useContext=useContext(AppContext),isRTL=_useContext.isRTL;var _useContext2=useContext(ChatContext),messages=_useContext2.messages,getUser=_useContext2.getUser,textAreaInitialHeight=_useContext2.textAreaInitialHeight;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),scrollHeight=_useState2[0],setScrollHeight=_useState2[1];var user=getUser(thread);var isGroup=isIterableArray(thread.userId);var _messages$find=messages.find(function(_ref2){var id=_ref2.id;return id===thread.messagesId;}),content=_messages$find.content;useEffect(function(){setTimeout(function(){setScrollHeight(document.getElementsByClassName('chat-content-scroll-area')[0].scrollHeight);},500);},[textAreaInitialHeight]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-content-body\",style:{display:'inherit'},children:[/*#__PURE__*/_jsx(ThreadInfo,{thread:thread,isOpenThreadInfo:isOpenThreadInfo}),/*#__PURE__*/_jsx(Scrollbar,{style:{height:'100%',minWidth:'75px',display:'block'},rtl:isRTL,scrollTop:scrollHeight,noScrollX:true,trackYProps:{renderer:function renderer(props){var elementRef=props.elementRef,restProps=_objectWithoutProperties(props,[\"elementRef\"]);return/*#__PURE__*/_jsx(\"span\",_objectSpread(_objectSpread({},restProps),{},{ref:elementRef,className:\"TrackY\"}));}},children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-content-scroll-area\",children:[/*#__PURE__*/_jsx(ChatContentBodyIntro,{user:user,isGroup:isGroup}),isIterableArray(content)&&content.map(function(_ref3,index){var message=_ref3.message,time=_ref3.time,senderUserId=_ref3.senderUserId,status=_ref3.status;return/*#__PURE__*/_jsxs(\"div\",{children:[lastDate!==time.date&&/*#__PURE__*/_jsx(\"div\",{className:\"text-center fs--2 text-500\",children:\"\".concat(time.date,\", \").concat(time.hour)}),function(){lastDate=time.date;}(),/*#__PURE__*/_jsx(Message,{message:message,senderUserId:senderUserId,time:time,status:status,isGroup:isGroup})]},index);})]})})]});};ChatContentBody.defaultProps={isOpenThreadInfo:false};export default ChatContentBody;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/chat/content/ChatContentBody.js"],"names":["React","useState","useContext","useEffect","Scrollbar","Message","ThreadInfo","isIterableArray","AppContext","ChatContext","ChatContentBodyIntro","ChatContentBody","thread","isOpenThreadInfo","lastDate","isRTL","messages","getUser","textAreaInitialHeight","scrollHeight","setScrollHeight","user","isGroup","userId","find","id","messagesId","content","setTimeout","document","getElementsByClassName","display","height","minWidth","renderer","props","elementRef","restProps","map","index","message","time","senderUserId","status","date","hour","defaultProps"],"mappings":"qUAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,CAAsCC,SAAtC,KAAuD,OAAvD,CAEA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,OAASC,eAAT,KAAgC,wBAAhC,CACA,MAAOC,CAAAA,UAAP,EAAqBC,WAArB,KAAwC,0BAAxC,CACA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,C,wFAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAAkC,IAA/BC,CAAAA,MAA+B,MAA/BA,MAA+B,CAAvBC,gBAAuB,MAAvBA,gBAAuB,CACxD,GAAIC,CAAAA,QAAQ,CAAG,IAAf,CADwD,gBAEtCZ,UAAU,CAACM,UAAD,CAF4B,CAEhDO,KAFgD,aAEhDA,KAFgD,kBAGHb,UAAU,CAACO,WAAD,CAHP,CAGhDO,QAHgD,cAGhDA,QAHgD,CAGtCC,OAHsC,cAGtCA,OAHsC,CAG7BC,qBAH6B,cAG7BA,qBAH6B,eAIhBjB,QAAQ,CAAC,CAAD,CAJQ,wCAIjDkB,YAJiD,eAInCC,eAJmC,eAKxD,GAAMC,CAAAA,IAAI,CAAGJ,OAAO,CAACL,MAAD,CAApB,CACA,GAAMU,CAAAA,OAAO,CAAGf,eAAe,CAACK,MAAM,CAACW,MAAR,CAA/B,CANwD,mBAOpCP,QAAQ,CAACQ,IAAT,CAAc,mBAAGC,CAAAA,EAAH,OAAGA,EAAH,OAAYA,CAAAA,EAAE,GAAKb,MAAM,CAACc,UAA1B,EAAd,CAPoC,CAOhDC,OAPgD,gBAOhDA,OAPgD,CASxDxB,SAAS,CAAC,UAAM,CACdyB,UAAU,CAAC,UAAM,CACfR,eAAe,CAACS,QAAQ,CAACC,sBAAT,CAAgC,0BAAhC,EAA4D,CAA5D,EAA+DX,YAAhE,CAAf,CACD,CAFS,CAEP,GAFO,CAAV,CAGD,CAJQ,CAIN,CAACD,qBAAD,CAJM,CAAT,CAMA,mBACE,aAAK,SAAS,CAAC,mBAAf,CAAmC,KAAK,CAAE,CAAEa,OAAO,CAAE,SAAX,CAA1C,wBACE,KAAC,UAAD,EAAY,MAAM,CAAEnB,MAApB,CAA4B,gBAAgB,CAAEC,gBAA9C,EADF,cAEE,KAAC,SAAD,EACE,KAAK,CAAE,CACLmB,MAAM,CAAE,MADH,CAELC,QAAQ,CAAE,MAFL,CAGLF,OAAO,CAAE,OAHJ,CADT,CAME,GAAG,CAAEhB,KANP,CAOE,SAAS,CAAEI,YAPb,CAQE,SAAS,KARX,CASE,WAAW,CAAE,CACXe,QADW,mBACFC,KADE,CACK,IACNC,CAAAA,UADM,CACuBD,KADvB,CACNC,UADM,CACSC,SADT,0BACuBF,KADvB,iBAEd,mBAAO,2CAAUE,SAAV,MAAqB,GAAG,CAAED,UAA1B,CAAsC,SAAS,CAAC,QAAhD,GAAP,CACD,CAJU,CATf,uBAgBE,aAAK,SAAS,CAAC,0BAAf,wBACE,KAAC,oBAAD,EAAsB,IAAI,CAAEf,IAA5B,CAAkC,OAAO,CAAEC,OAA3C,EADF,CAGGf,eAAe,CAACoB,OAAD,CAAf,EACCA,OAAO,CAACW,GAAR,CAAY,eAA0CC,KAA1C,KAAGC,CAAAA,OAAH,OAAGA,OAAH,CAAYC,IAAZ,OAAYA,IAAZ,CAAkBC,YAAlB,OAAkBA,YAAlB,CAAgCC,MAAhC,OAAgCA,MAAhC,oBACV,uBACG7B,QAAQ,GAAK2B,IAAI,CAACG,IAAlB,eACC,YAAK,SAAS,CAAC,4BAAf,oBAAgDH,IAAI,CAACG,IAArD,cAA8DH,IAAI,CAACI,IAAnE,GAFJ,CAII,UAAM,CACN/B,QAAQ,CAAG2B,IAAI,CAACG,IAAhB,CACD,CAFA,EAJH,cAOE,KAAC,OAAD,EAAS,OAAO,CAAEJ,OAAlB,CAA2B,YAAY,CAAEE,YAAzC,CAAuD,IAAI,CAAED,IAA7D,CAAmE,MAAM,CAAEE,MAA3E,CAAmF,OAAO,CAAErB,OAA5F,EAPF,GAAUiB,KAAV,CADU,EAAZ,CAJJ,GAhBF,EAFF,GADF,CAsCD,CArDD,CA2DA5B,eAAe,CAACmC,YAAhB,CAA+B,CAC7BjC,gBAAgB,CAAE,KADW,CAA/B,CAGA,cAAeF,CAAAA,eAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollbar from 'react-scrollbars-custom';\nimport Message from './Message';\nimport ThreadInfo from './ThreadInfo';\nimport { isIterableArray } from '../../../helpers/utils';\nimport AppContext, { ChatContext } from '../../../context/Context';\nimport ChatContentBodyIntro from './ChatContentBodyIntro';\n\nconst ChatContentBody = ({ thread, isOpenThreadInfo }) => {\n  let lastDate = null;\n  const { isRTL } = useContext(AppContext);\n  const { messages, getUser, textAreaInitialHeight } = useContext(ChatContext);\n  const [scrollHeight, setScrollHeight] = useState(0);\n  const user = getUser(thread);\n  const isGroup = isIterableArray(thread.userId);\n  const { content } = messages.find(({ id }) => id === thread.messagesId);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setScrollHeight(document.getElementsByClassName('chat-content-scroll-area')[0].scrollHeight);\n    }, 500);\n  }, [textAreaInitialHeight]);\n\n  return (\n    <div className=\"chat-content-body\" style={{ display: 'inherit' }}>\n      <ThreadInfo thread={thread} isOpenThreadInfo={isOpenThreadInfo} />\n      <Scrollbar\n        style={{\n          height: '100%',\n          minWidth: '75px',\n          display: 'block'\n        }}\n        rtl={isRTL}\n        scrollTop={scrollHeight}\n        noScrollX\n        trackYProps={{\n          renderer(props) {\n            const { elementRef, ...restProps } = props;\n            return <span {...restProps} ref={elementRef} className=\"TrackY\" />;\n          }\n        }}\n      >\n        <div className=\"chat-content-scroll-area\">\n          <ChatContentBodyIntro user={user} isGroup={isGroup} />\n\n          {isIterableArray(content) &&\n            content.map(({ message, time, senderUserId, status }, index) => (\n              <div key={index}>\n                {lastDate !== time.date && (\n                  <div className=\"text-center fs--2 text-500\">{`${time.date}, ${time.hour}`}</div>\n                )}\n                {(() => {\n                  lastDate = time.date;\n                })()}\n                <Message message={message} senderUserId={senderUserId} time={time} status={status} isGroup={isGroup} />\n              </div>\n            ))}\n        </div>\n      </Scrollbar>\n    </div>\n  );\n};\n\nChatContentBody.propTypes = {\n  thread: PropTypes.object.isRequired,\n  isOpenThreadInfo: PropTypes.bool\n};\nChatContentBody.defaultProps = {\n  isOpenThreadInfo: false\n};\nexport default ChatContentBody;\n"]},"metadata":{},"sourceType":"module"}