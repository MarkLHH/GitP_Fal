{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/plugins/Chart.js\";\nimport React, { Fragment } from 'react';\nimport { Card, CardBody, Col, Row } from 'reactstrap';\nimport Chart from '../chart/Chart';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lineCode = `function ChartLineExample() {\n  const randomScalingFactor = () => Math.round(Math.random() * 100);\n  \n  const config = {\n    type: 'line',\n    data: {\n        datasets: [{\n            data: [\n                randomScalingFactor(),\n                randomScalingFactor(),\n                randomScalingFactor(),\n                randomScalingFactor(),\n                randomScalingFactor(),\n            ],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            label: 'Dataset 1'\n        }],\n        labels: [\n            'Red',\n            'Orange',\n            'Yellow',\n            'Green',\n            'Blue'\n        ]\n    },\n    options: {\n        responsive: true\n    }\n};\n  \n  return <Chart config={config} />;\n}`;\nconst barCode = `function ChartBarExample() {\n  const config = {\n    type: 'bar',\n    data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            borderColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)'\n            ],\n            borderWidth: 1\n        }]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n  };\n  \n  return <Chart config={config} />;\n}`;\nconst pieCode = `function ChartPieExample() {\n  const config = {\n    type: 'pie',\n    data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            borderColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)'\n            ],\n            borderWidth: 1\n        }]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n  };\n  \n  return <Chart config={config} />;\n}`;\nconst doughnutCode = `function ChartDoughnutExample() {\n  const config = {\n    type: 'doughnut',\n    data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            borderColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)'\n            ],\n            borderWidth: 1\n        }]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n  };\n  \n  return <Chart config={config} />;\n}`;\n\nconst ChartExample = () => /*#__PURE__*/_jsxDEV(Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n    title: \"Chart js\",\n    className: \"mb-3\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Row, {\n    noGutters: true,\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      lg: true,\n      className: \"mb-4 mb-lg-0 pr-lg-2\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n          title: \"Pie Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(FalconEditor, {\n            code: pieCode,\n            scope: {\n              Chart\n            },\n            language: \"jsx\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      lg: true,\n      className: \"pl-lg-2\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n          title: \"Doughnut Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(FalconEditor, {\n            code: doughnutCode,\n            scope: {\n              Chart\n            },\n            language: \"jsx\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Row, {\n    noGutters: true,\n    className: \"mt-3\",\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      lg: true,\n      className: \"mb-4 mb-lg-0 pr-lg-2\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n          title: \"Bar Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(FalconEditor, {\n            code: barCode,\n            scope: {\n              Chart\n            },\n            language: \"jsx\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      lg: true,\n      className: \"pl-lg-2\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n          title: \"Line Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(FalconEditor, {\n            code: lineCode,\n            scope: {\n              Chart\n            },\n            language: \"jsx\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 172,\n  columnNumber: 3\n}, this);\n\n_c = ChartExample;\nexport default ChartExample;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartExample\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/plugins/Chart.js"],"names":["React","Fragment","Card","CardBody","Col","Row","Chart","PageHeader","FalconCardHeader","FalconEditor","lineCode","barCode","pieCode","doughnutCode","ChartExample"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,GAAzB,EAA8BC,GAA9B,QAAyC,YAAzC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;AAEA,MAAMC,QAAQ,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAtCA;AAwCA,MAAMC,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAvCA;AAyCA,MAAMC,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAvCA;AAyCA,MAAMC,YAAY,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAvCA;;AAyCA,MAAMC,YAAY,GAAG,mBACnB,QAAC,QAAD;AAAA,0BACE,QAAC,UAAD;AAAY,IAAA,KAAK,EAAC,UAAlB;AAA6B,IAAA,SAAS,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA,UADF,eAGE,QAAC,GAAD;AAAK,IAAA,SAAS,MAAd;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,EAAE,MAAP;AAAQ,MAAA,SAAS,EAAC,sBAAlB;AAAA,6BACE,QAAC,IAAD;AAAA,gCACE,QAAC,gBAAD;AAAkB,UAAA,KAAK,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,QAAD;AAAA,iCACE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAEF,OAApB;AAA6B,YAAA,KAAK,EAAE;AAAEN,cAAAA;AAAF,aAApC;AAA+C,YAAA,QAAQ,EAAC;AAAxD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,GAAD;AAAK,MAAA,EAAE,MAAP;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAAA,6BACE,QAAC,IAAD;AAAA,gCACE,QAAC,gBAAD;AAAkB,UAAA,KAAK,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,QAAD;AAAA,iCACE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAEO,YAApB;AAAkC,YAAA,KAAK,EAAE;AAAEP,cAAAA;AAAF,aAAzC;AAAoD,YAAA,QAAQ,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,eAsBE,QAAC,GAAD;AAAK,IAAA,SAAS,MAAd;AAAe,IAAA,SAAS,EAAC,MAAzB;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,EAAE,MAAP;AAAQ,MAAA,SAAS,EAAC,sBAAlB;AAAA,6BACE,QAAC,IAAD;AAAA,gCACE,QAAC,gBAAD;AAAkB,UAAA,KAAK,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,QAAD;AAAA,iCACE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAEK,OAApB;AAA6B,YAAA,KAAK,EAAE;AAAEL,cAAAA;AAAF,aAApC;AAA+C,YAAA,QAAQ,EAAC;AAAxD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,GAAD;AAAK,MAAA,EAAE,MAAP;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAAA,6BACE,QAAC,IAAD;AAAA,gCACE,QAAC,gBAAD;AAAkB,UAAA,KAAK,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,QAAD;AAAA,iCACE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAEI,QAApB;AAA8B,YAAA,KAAK,EAAE;AAAEJ,cAAAA;AAAF,aAArC;AAAgD,YAAA,QAAQ,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMQ,Y;AA4CN,eAAeA,YAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { Card, CardBody, Col, Row } from 'reactstrap';\nimport Chart from '../chart/Chart';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\n\nconst lineCode = `function ChartLineExample() {\n  const randomScalingFactor = () => Math.round(Math.random() * 100);\n  \n  const config = {\n    type: 'line',\n    data: {\n        datasets: [{\n            data: [\n                randomScalingFactor(),\n                randomScalingFactor(),\n                randomScalingFactor(),\n                randomScalingFactor(),\n                randomScalingFactor(),\n            ],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            label: 'Dataset 1'\n        }],\n        labels: [\n            'Red',\n            'Orange',\n            'Yellow',\n            'Green',\n            'Blue'\n        ]\n    },\n    options: {\n        responsive: true\n    }\n};\n  \n  return <Chart config={config} />;\n}`;\n\nconst barCode = `function ChartBarExample() {\n  const config = {\n    type: 'bar',\n    data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            borderColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)'\n            ],\n            borderWidth: 1\n        }]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n  };\n  \n  return <Chart config={config} />;\n}`;\n\nconst pieCode = `function ChartPieExample() {\n  const config = {\n    type: 'pie',\n    data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            borderColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)'\n            ],\n            borderWidth: 1\n        }]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n  };\n  \n  return <Chart config={config} />;\n}`;\n\nconst doughnutCode = `function ChartDoughnutExample() {\n  const config = {\n    type: 'doughnut',\n    data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            borderColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)'\n            ],\n            borderWidth: 1\n        }]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n  };\n  \n  return <Chart config={config} />;\n}`;\n\nconst ChartExample = () => (\n  <Fragment>\n    <PageHeader title=\"Chart js\" className=\"mb-3\" />\n\n    <Row noGutters>\n      <Col lg className=\"mb-4 mb-lg-0 pr-lg-2\">\n        <Card>\n          <FalconCardHeader title=\"Pie Chart\" />\n          <CardBody>\n            <FalconEditor code={pieCode} scope={{ Chart }} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg className=\"pl-lg-2\">\n        <Card>\n          <FalconCardHeader title=\"Doughnut Chart\" />\n          <CardBody>\n            <FalconEditor code={doughnutCode} scope={{ Chart }} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n\n    <Row noGutters className=\"mt-3\">\n      <Col lg className=\"mb-4 mb-lg-0 pr-lg-2\">\n        <Card>\n          <FalconCardHeader title=\"Bar Chart\" />\n          <CardBody>\n            <FalconEditor code={barCode} scope={{ Chart }} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n      <Col lg className=\"pl-lg-2\">\n        <Card>\n          <FalconCardHeader title=\"Line Chart\" />\n          <CardBody>\n            <FalconEditor code={lineCode} scope={{ Chart }} language=\"jsx\" />\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n  </Fragment>\n);\n\nexport default ChartExample;\n"]},"metadata":{},"sourceType":"module"}