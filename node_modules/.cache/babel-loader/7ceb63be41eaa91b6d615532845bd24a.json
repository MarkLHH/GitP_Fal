{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/navbar/NavbarTopDropDownMenus.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport NavbarDropdown from './NavbarDropdown';\nimport NavbarDropdownComponents from './NavbarDropdownComponents';\nimport { //authenticationRoutes,\n//chatRoutes,\ncomponentRoutes //ECommerceRoutes,\n//emailRoutes,\n, homeRoutes //pageRoutes,\n, pluginRoutes, utilityRoutes, widgetsRoutes //kanbanRoutes,\n//calenderRoutes\n} from '../../routes';\nimport { NavItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { breakpoints, getPageName } from '../../helpers/utils';\nimport { navbarBreakPoint, topNavbarBreakpoint } from '../../config';\nimport AppContext from '../../context/Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NavbarTopDropDownMenus = ({\n  setNavbarCollapsed,\n  setShowBurgerMenu\n}) => {\n  _s();\n\n  const {\n    isCombo,\n    isTopNav\n  } = useContext(AppContext);\n  const components = [componentRoutes, pluginRoutes, utilityRoutes];\n  const pages = [widgetsRoutes];\n\n  const handleSetNavbarCollapsed = () => {\n    const windowWidth = window.innerWidth;\n    isTopNav && !isCombo && windowWidth < breakpoints[topNavbarBreakpoint] && setNavbarCollapsed(false);\n    isCombo && windowWidth < breakpoints[navbarBreakPoint] && setShowBurgerMenu(false);\n  };\n\n  const isLanding = getPageName('landing');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavbarDropdown, {\n      title: homeRoutes.name,\n      items: homeRoutes.children,\n      handleSetNavbarCollapsed: handleSetNavbarCollapsed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavbarDropdownComponents, {\n      title: componentRoutes.name,\n      items: components,\n      handleSetNavbarCollapsed: handleSetNavbarCollapsed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), isTopNav && !isLanding && /*#__PURE__*/_jsxDEV(NavItem, {\n      onClick: handleSetNavbarCollapsed,\n      children: /*#__PURE__*/_jsxDEV(NavLink, {\n        className: \"nav-link\",\n        to: \"/documentation\",\n        children: \"Documentation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), isLanding && /*#__PURE__*/_jsxDEV(NavItem, {\n      onClick: handleSetNavbarCollapsed,\n      children: /*#__PURE__*/_jsxDEV(NavLink, {\n        className: \"nav-link\",\n        to: \"/changelog\",\n        children: \"Changelog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(NavbarTopDropDownMenus, \"UFWDD4SkSCBDLIxseZP2TnDpm3s=\");\n\n_c = NavbarTopDropDownMenus;\nNavbarTopDropDownMenus.propTypes = {\n  setNavbarCollapsed: PropTypes.func.isRequired\n};\nexport default NavbarTopDropDownMenus;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavbarTopDropDownMenus\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/navbar/NavbarTopDropDownMenus.js"],"names":["React","useContext","PropTypes","NavbarDropdown","NavbarDropdownComponents","componentRoutes","homeRoutes","pluginRoutes","utilityRoutes","widgetsRoutes","NavItem","NavLink","breakpoints","getPageName","navbarBreakPoint","topNavbarBreakpoint","AppContext","NavbarTopDropDownMenus","setNavbarCollapsed","setShowBurgerMenu","isCombo","isTopNav","components","pages","handleSetNavbarCollapsed","windowWidth","window","innerWidth","isLanding","name","children","propTypes","func","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,SACE;AACA;AACAC,eAHF,CAIE;AACA;AALF,EAMEC,UANF,CAOE;AAPF,EAQEC,YARF,EASEC,aATF,EAUEC,aAVF,CAWE;AACA;AAZF,OAaO,cAbP;AAcA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,qBAAzC;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,cAAtD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;;;;AAEA,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA,kBAAF;AAAsBC,EAAAA;AAAtB,CAAD,KAA+C;AAAA;;AAC5E,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBpB,UAAU,CAACe,UAAD,CAAxC;AAEA,QAAMM,UAAU,GAAG,CAACjB,eAAD,EAAkBE,YAAlB,EAAgCC,aAAhC,CAAnB;AAEA,QAAMe,KAAK,GAAG,CAACd,aAAD,CAAd;;AAEA,QAAMe,wBAAwB,GAAG,MAAM;AACrC,UAAMC,WAAW,GAAGC,MAAM,CAACC,UAA3B;AACAN,IAAAA,QAAQ,IAAI,CAACD,OAAb,IAAwBK,WAAW,GAAGb,WAAW,CAACG,mBAAD,CAAjD,IAA0EG,kBAAkB,CAAC,KAAD,CAA5F;AACAE,IAAAA,OAAO,IAAIK,WAAW,GAAGb,WAAW,CAACE,gBAAD,CAApC,IAA0DK,iBAAiB,CAAC,KAAD,CAA3E;AACD,GAJD;;AAKA,QAAMS,SAAS,GAAGf,WAAW,CAAC,SAAD,CAA7B;AACA,sBACE;AAAA,4BACE,QAAC,cAAD;AACE,MAAA,KAAK,EAAEP,UAAU,CAACuB,IADpB;AAEE,MAAA,KAAK,EAAEvB,UAAU,CAACwB,QAFpB;AAGE,MAAA,wBAAwB,EAAEN;AAH5B;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,wBAAD;AACE,MAAA,KAAK,EAAEnB,eAAe,CAACwB,IADzB;AAEE,MAAA,KAAK,EAAEP,UAFT;AAGE,MAAA,wBAAwB,EAAEE;AAH5B;AAAA;AAAA;AAAA;AAAA,YAPF,EAkBGH,QAAQ,IAAI,CAACO,SAAb,iBACC,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEJ,wBAAlB;AAAA,6BACE,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC,UAAnB;AAA8B,QAAA,EAAE,EAAC,gBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAnBJ,EAyBGI,SAAS,iBACR,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEJ,wBAAlB;AAAA,6BACE,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC,UAAnB;AAA8B,QAAA,EAAE,EAAC,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA1BJ;AAAA,kBADF;AAmCD,CAhDD;;GAAMP,sB;;KAAAA,sB;AAkDNA,sBAAsB,CAACc,SAAvB,GAAmC;AAAEb,EAAAA,kBAAkB,EAAEhB,SAAS,CAAC8B,IAAV,CAAeC;AAArC,CAAnC;AAEA,eAAehB,sBAAf","sourcesContent":["import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport NavbarDropdown from './NavbarDropdown';\r\nimport NavbarDropdownComponents from './NavbarDropdownComponents';\r\nimport {\r\n  //authenticationRoutes,\r\n  //chatRoutes,\r\n  componentRoutes,\r\n  //ECommerceRoutes,\r\n  //emailRoutes,\r\n  homeRoutes,\r\n  //pageRoutes,\r\n  pluginRoutes,\r\n  utilityRoutes,\r\n  widgetsRoutes,\r\n  //kanbanRoutes,\r\n  //calenderRoutes\r\n} from '../../routes';\r\nimport { NavItem } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { breakpoints, getPageName } from '../../helpers/utils';\r\nimport { navbarBreakPoint, topNavbarBreakpoint } from '../../config';\r\nimport AppContext from '../../context/Context';\r\n\r\nconst NavbarTopDropDownMenus = ({ setNavbarCollapsed, setShowBurgerMenu }) => {\r\n  const { isCombo, isTopNav } = useContext(AppContext);\r\n\r\n  const components = [componentRoutes, pluginRoutes, utilityRoutes];\r\n\r\n  const pages = [widgetsRoutes];\r\n\r\n  const handleSetNavbarCollapsed = () => {\r\n    const windowWidth = window.innerWidth;\r\n    isTopNav && !isCombo && windowWidth < breakpoints[topNavbarBreakpoint] && setNavbarCollapsed(false);\r\n    isCombo && windowWidth < breakpoints[navbarBreakPoint] && setShowBurgerMenu(false);\r\n  };\r\n  const isLanding = getPageName('landing');\r\n  return (\r\n    <>\r\n      <NavbarDropdown\r\n        title={homeRoutes.name}\r\n        items={homeRoutes.children}\r\n        handleSetNavbarCollapsed={handleSetNavbarCollapsed}\r\n      />\r\n      \r\n      <NavbarDropdownComponents\r\n        title={componentRoutes.name}\r\n        items={components}\r\n        handleSetNavbarCollapsed={handleSetNavbarCollapsed}\r\n      />\r\n       \r\n         \r\n         \r\n        \r\n       \r\n\r\n      {isTopNav && !isLanding && (\r\n        <NavItem onClick={handleSetNavbarCollapsed}>\r\n          <NavLink className=\"nav-link\" to=\"/documentation\">\r\n            Documentation\r\n          </NavLink>\r\n        </NavItem>\r\n      )}\r\n      {isLanding && (\r\n        <NavItem onClick={handleSetNavbarCollapsed}>\r\n          <NavLink className=\"nav-link\" to=\"/changelog\">\r\n            Changelog\r\n          </NavLink>\r\n        </NavItem>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nNavbarTopDropDownMenus.propTypes = { setNavbarCollapsed: PropTypes.func.isRequired };\r\n\r\nexport default NavbarTopDropDownMenus;\r\n"]},"metadata":{},"sourceType":"module"}