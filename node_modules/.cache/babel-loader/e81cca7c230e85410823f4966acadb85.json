{"ast":null,"code":"import _objectSpread from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import{Alert,Card,CardBody,Col,Row}from'reactstrap';import Loader from'../common/Loader';import FalconCardHeader from'../common/FalconCardHeader';import Association from'../association/Association';import{isIterableArray}from'../../helpers/utils';import rawAssociations from'../../data/association/associations';import useFakeFetch from'../../hooks/useFakeFetch';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Associations=function Associations(){var _useFakeFetch=useFakeFetch(rawAssociations),loading=_useFakeFetch.loading,associations=_useFakeFetch.data;return/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Associations\"}),/*#__PURE__*/_jsx(CardBody,{className:\"fs--1\",children:loading?/*#__PURE__*/_jsx(Loader,{}):isIterableArray(associations)?/*#__PURE__*/_jsx(Row,{children:associations.map(function(association,index){return/*#__PURE__*/_jsx(Col,{sm:6,md:4,className:\"mb-3\",children:/*#__PURE__*/_jsx(Association,_objectSpread({},association))},index);})}):/*#__PURE__*/_jsx(Alert,{color:\"info\",className:\"mb-0\",children:\"No association found\"})})]});};export default Associations;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/page/Associations.js"],"names":["React","Alert","Card","CardBody","Col","Row","Loader","FalconCardHeader","Association","isIterableArray","rawAssociations","useFakeFetch","Associations","loading","associations","data","map","association","index"],"mappings":"qGAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,CAAgBC,IAAhB,CAAsBC,QAAtB,CAAgCC,GAAhC,CAAqCC,GAArC,KAAgD,YAAhD,CACA,MAAOC,CAAAA,MAAP,KAAmB,kBAAnB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,4BAA7B,CACA,MAAOC,CAAAA,WAAP,KAAwB,4BAAxB,CACA,OAASC,eAAT,KAAgC,qBAAhC,CACA,MAAOC,CAAAA,eAAP,KAA4B,qCAA5B,CACA,MAAOC,CAAAA,YAAP,KAAyB,0BAAzB,C,wFAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,mBACeD,YAAY,CAACD,eAAD,CAD3B,CACjBG,OADiB,eACjBA,OADiB,CACFC,YADE,eACRC,IADQ,CAGzB,mBACE,MAAC,IAAD,EAAM,SAAS,CAAC,MAAhB,wBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,cAAxB,EADF,cAEE,KAAC,QAAD,EAAU,SAAS,CAAC,OAApB,UACGF,OAAO,cACN,KAAC,MAAD,IADM,CAEJJ,eAAe,CAACK,YAAD,CAAf,cACF,KAAC,GAAD,WACGA,YAAY,CAACE,GAAb,CAAiB,SAACC,WAAD,CAAcC,KAAd,qBAChB,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,EAAE,CAAE,CAAhB,CAAmB,SAAS,CAAC,MAA7B,uBACE,KAAC,WAAD,kBAAiBD,WAAjB,EADF,EAAyCC,KAAzC,CADgB,EAAjB,CADH,EADE,cASF,KAAC,KAAD,EAAO,KAAK,CAAC,MAAb,CAAoB,SAAS,CAAC,MAA9B,kCAZJ,EAFF,GADF,CAsBD,CAzBD,CA2BA,cAAeN,CAAAA,YAAf","sourcesContent":["import React from 'react';\nimport { Alert, Card, CardBody, Col, Row } from 'reactstrap';\nimport Loader from '../common/Loader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport Association from '../association/Association';\nimport { isIterableArray } from '../../helpers/utils';\nimport rawAssociations from '../../data/association/associations';\nimport useFakeFetch from '../../hooks/useFakeFetch';\n\nconst Associations = () => {\n  const { loading, data: associations } = useFakeFetch(rawAssociations);\n\n  return (\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Associations\" />\n      <CardBody className=\"fs--1\">\n        {loading ? (\n          <Loader />\n        ) : isIterableArray(associations) ? (\n          <Row>\n            {associations.map((association, index) => (\n              <Col sm={6} md={4} className=\"mb-3\" key={index}>\n                <Association {...association} />\n              </Col>\n            ))}\n          </Row>\n        ) : (\n          <Alert color=\"info\" className=\"mb-0\">\n            No association found\n          </Alert>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default Associations;\n"]},"metadata":{},"sourceType":"module"}