{"ast":null,"code":"import _objectSpread from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React from'react';import{Alert,Card,CardBody,Col,CustomInput,Form,Row}from'reactstrap';import EventSummary from'../event/EventSummary';import Loader from'../common/Loader';import FalconCardHeader from'../common/FalconCardHeader';import useFakeFetch from'../../hooks/useFakeFetch';import rawEvents from'../../data/event/events';import eventCategories from'../../data/event/eventCategories';import createMarkup from'../../helpers/createMarkup';import{isIterableArray}from'../../helpers/utils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Events=function Events(){var _useFakeFetch=useFakeFetch(rawEvents),loading=_useFakeFetch.loading,events=_useFakeFetch.data;return/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Events\",children:isIterableArray(eventCategories)&&/*#__PURE__*/_jsx(Form,{inline:true,children:/*#__PURE__*/_jsx(CustomInput,{type:\"select\",id:\"customSelectCategory\",name:\"customSelectCategory\",bsSize:\"sm\",children:eventCategories.map(function(option,index){return/*#__PURE__*/_jsx(\"option\",{value:index,children:option},index);})})})}),/*#__PURE__*/_jsx(CardBody,{className:\"fs--1\",children:loading?/*#__PURE__*/_jsx(Loader,{}):isIterableArray(events)?/*#__PURE__*/_jsx(Row,{children:events.map(function(_ref,index){var additional=_ref.additional,rest=_objectWithoutProperties(_ref,[\"additional\"]);return/*#__PURE__*/_jsx(Col,{md:6,className:\"h-100\",children:/*#__PURE__*/_jsx(EventSummary,_objectSpread(_objectSpread({divider:events.length!==index+1},rest),{},{children:/*#__PURE__*/_jsx(\"p\",{className:\"text-1000 mb-0\",dangerouslySetInnerHTML:createMarkup(additional)})}))},index);})}):/*#__PURE__*/_jsx(Alert,{color:\"info\",className:\"mb-0\",children:\"No events found!\"})})]});};export default Events;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/page/Events.js"],"names":["React","Alert","Card","CardBody","Col","CustomInput","Form","Row","EventSummary","Loader","FalconCardHeader","useFakeFetch","rawEvents","eventCategories","createMarkup","isIterableArray","Events","loading","events","data","map","option","index","additional","rest","length"],"mappings":"+NAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,CAAgBC,IAAhB,CAAsBC,QAAtB,CAAgCC,GAAhC,CAAqCC,WAArC,CAAkDC,IAAlD,CAAwDC,GAAxD,KAAmE,YAAnE,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CACA,MAAOC,CAAAA,MAAP,KAAmB,kBAAnB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,4BAA7B,CACA,MAAOC,CAAAA,YAAP,KAAyB,0BAAzB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CACA,MAAOC,CAAAA,eAAP,KAA4B,kCAA5B,CACA,MAAOC,CAAAA,YAAP,KAAyB,4BAAzB,CACA,OAASC,eAAT,KAAgC,qBAAhC,C,wFAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,mBACeL,YAAY,CAACC,SAAD,CAD3B,CACXK,OADW,eACXA,OADW,CACIC,MADJ,eACFC,IADE,CAGnB,mBACE,MAAC,IAAD,yBACE,KAAC,gBAAD,EAAkB,KAAK,CAAC,QAAxB,UACGJ,eAAe,CAACF,eAAD,CAAf,eACC,KAAC,IAAD,EAAM,MAAM,KAAZ,uBACE,KAAC,WAAD,EAAa,IAAI,CAAC,QAAlB,CAA2B,EAAE,CAAC,sBAA9B,CAAqD,IAAI,CAAC,sBAA1D,CAAiF,MAAM,CAAC,IAAxF,UACGA,eAAe,CAACO,GAAhB,CAAoB,SAACC,MAAD,CAASC,KAAT,qBACnB,eAAQ,KAAK,CAAEA,KAAf,UACGD,MADH,EAA2BC,KAA3B,CADmB,EAApB,CADH,EADF,EAFJ,EADF,cAcE,KAAC,QAAD,EAAU,SAAS,CAAC,OAApB,UACGL,OAAO,cACN,KAAC,MAAD,IADM,CAEJF,eAAe,CAACG,MAAD,CAAf,cACF,KAAC,GAAD,WACGA,MAAM,CAACE,GAAP,CAAW,cAA0BE,KAA1B,KAAGC,CAAAA,UAAH,MAAGA,UAAH,CAAkBC,IAAlB,kEACV,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,OAAtB,uBACE,KAAC,YAAD,8BAAc,OAAO,CAAEN,MAAM,CAACO,MAAP,GAAkBH,KAAK,CAAG,CAAjD,EAAwDE,IAAxD,4BACE,UAAG,SAAS,CAAC,gBAAb,CAA8B,uBAAuB,CAAEV,YAAY,CAACS,UAAD,CAAnE,EADF,GADF,EAAmCD,KAAnC,CADU,EAAX,CADH,EADE,cAWF,KAAC,KAAD,EAAO,KAAK,CAAC,MAAb,CAAoB,SAAS,CAAC,MAA9B,8BAdJ,EAdF,GADF,CAoCD,CAvCD,CAyCA,cAAeN,CAAAA,MAAf","sourcesContent":["import React from 'react';\nimport { Alert, Card, CardBody, Col, CustomInput, Form, Row } from 'reactstrap';\nimport EventSummary from '../event/EventSummary';\nimport Loader from '../common/Loader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport useFakeFetch from '../../hooks/useFakeFetch';\nimport rawEvents from '../../data/event/events';\nimport eventCategories from '../../data/event/eventCategories';\nimport createMarkup from '../../helpers/createMarkup';\nimport { isIterableArray } from '../../helpers/utils';\n\nconst Events = () => {\n  const { loading, data: events } = useFakeFetch(rawEvents);\n\n  return (\n    <Card>\n      <FalconCardHeader title=\"Events\">\n        {isIterableArray(eventCategories) && (\n          <Form inline>\n            <CustomInput type=\"select\" id=\"customSelectCategory\" name=\"customSelectCategory\" bsSize=\"sm\">\n              {eventCategories.map((option, index) => (\n                <option value={index} key={index}>\n                  {option}\n                </option>\n              ))}\n            </CustomInput>\n          </Form>\n        )}\n      </FalconCardHeader>\n      <CardBody className=\"fs--1\">\n        {loading ? (\n          <Loader />\n        ) : isIterableArray(events) ? (\n          <Row>\n            {events.map(({ additional, ...rest }, index) => (\n              <Col md={6} className=\"h-100\" key={index}>\n                <EventSummary divider={events.length !== index + 1} {...rest}>\n                  <p className=\"text-1000 mb-0\" dangerouslySetInnerHTML={createMarkup(additional)} />\n                </EventSummary>\n              </Col>\n            ))}\n          </Row>\n        ) : (\n          <Alert color=\"info\" className=\"mb-0\">\n            No events found!\n          </Alert>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default Events;\n"]},"metadata":{},"sourceType":"module"}