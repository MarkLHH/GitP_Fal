{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/chat/content/MessageTextArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input, Label, Form, Button } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport AppContext, { ChatContext } from '../../../context/Context';\nimport classNames from 'classnames';\nimport { getGrays } from '../../../helpers/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst formatDate = date => {\n  const options = {\n    weekday: 'short',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric'\n  };\n  const now = date.toLocaleString('en-US', options).split(',').map(item => item.trim());\n  return {\n    day: now[0],\n    hour: now[3],\n    date: now[1] + ', ' + now[2]\n  };\n};\n\nconst MessageTextArea = ({\n  thread\n}) => {\n  _s();\n\n  const {\n    isDark,\n    isRTL\n  } = useContext(AppContext);\n  const {\n    messages,\n    messagesDispatch,\n    threadsDispatch,\n    textAreaInitialHeight,\n    setTextAreaInitialHeight\n  } = useContext(ChatContext);\n  const [previewEmoji, setPreviewEmoji] = useState(false);\n  const [message, setMessage] = useState('');\n  const isMountedRef = useRef(null); //Emoji box hiding Controller\n\n  useEffect(() => {\n    const handleClickOutsideEmojiBox = e => {\n      if (e.target.closest('.emoji-mart') || e.target.closest('.textarea')) return;\n      setPreviewEmoji(false);\n    };\n\n    if (previewEmoji) {\n      document.addEventListener('click', handleClickOutsideEmojiBox, false);\n    } else {\n      document.removeEventListener('click', handleClickOutsideEmojiBox, false);\n    }\n\n    return () => document.removeEventListener('click', handleClickOutsideEmojiBox, false);\n  }, [previewEmoji]);\n  useEffect(() => {\n    //TextBox and message body height controlling\n    isMountedRef.current = true;\n    let textAreaPreviousHeight = textAreaInitialHeight;\n\n    const autoExpand = function (field) {\n      // Reset field height\n      field.style.height = '2rem'; // Calculate the height\n\n      const textAreaCurrentHeight = field.scrollHeight;\n\n      if (textAreaCurrentHeight <= 160 && document.querySelector('.card-chat-pane')) {\n        if (textAreaPreviousHeight !== textAreaCurrentHeight && isMountedRef.current) {\n          document.querySelector('.card-chat-pane').style.height = `calc(100% - ${textAreaCurrentHeight}px)`;\n          setTextAreaInitialHeight(textAreaPreviousHeight = textAreaCurrentHeight);\n        }\n      }\n\n      field.style.height = textAreaCurrentHeight + 'px';\n    };\n\n    if (document.querySelector('.textarea')) {\n      document.addEventListener('input', function (event) {\n        if (event.target.className === 'textarea') ;\n        autoExpand(event.target);\n      }, false);\n    }\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, [textAreaInitialHeight, setTextAreaInitialHeight]);\n\n  const addEmoji = e => {\n    let emoji = e.native;\n    setMessage(message + emoji);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const date = new Date();\n    let newMessage = {\n      senderUserId: 3,\n      message: `${message.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>')}`,\n      status: 'delivered',\n      time: formatDate(date)\n    };\n    const {\n      content\n    } = messages.find(({\n      id\n    }) => id === thread.messagesId);\n\n    if (message) {\n      messagesDispatch({\n        type: 'EDIT',\n        payload: {\n          id: thread.messagesId,\n          content: [...content, newMessage]\n        },\n        id: thread.messagesId\n      });\n      threadsDispatch({\n        type: 'EDIT',\n        payload: thread,\n        id: thread.id,\n        isUpdatedStart: true\n      });\n    }\n\n    setMessage('');\n    document.querySelector('.textarea').style.height = '2rem';\n    document.querySelector('.card-chat-pane').style.height = `calc(100% - 2rem)`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"chat-editor-area bg-white\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      className: \"d-none\",\n      type: \"file\",\n      id: \"chat-file-upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      for: \"chat-file-upload\",\n      className: \"mb-0 p-1 chat-file-upload cursor-pointer\",\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: \"paperclip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      className: \"border-0 outline-none shadow-none resize-none textarea bg-white\",\n      type: \"textarea\",\n      placeholder: \"Type your message\",\n      bsSize: \"sm\",\n      value: message,\n      onChange: ({\n        target\n      }) => setMessage(target.value),\n      style: {\n        height: '2rem',\n        maxHeight: '10rem',\n        paddingRight: isRTL ? '0.75rem' : '7rem',\n        paddingLeft: isRTL ? '7rem' : '0.75rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: ['far', 'laugh-beam'],\n      transform: \"grow-5\",\n      className: \"emoji-icon\",\n      onClick: () => setPreviewEmoji(!previewEmoji)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), previewEmoji && /*#__PURE__*/_jsxDEV(Picker, {\n      set: \"google\",\n      onSelect: addEmoji,\n      sheetSize: 20,\n      style: {\n        position: 'absolute',\n        bottom: '100%',\n        left: isRTL ? '2%' : 'auto',\n        right: isRTL ? 'auto' : '2%',\n        padding: 0,\n        zIndex: 1,\n        backgroundColor: getGrays(isDark)[100]\n      },\n      theme: isDark ? 'dark' : 'light',\n      showPreview: false,\n      showSkinTones: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"transparent\",\n      size: \"sm\",\n      className: classNames(`btn-send outline-none ml-1`, {\n        'text-primary': message.length > 0\n      }),\n      type: \"submit\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessageTextArea, \"luSL3PJLR8oOKnM73vt9FaSMu/8=\");\n\n_c = MessageTextArea;\nMessageTextArea.propTypes = {\n  thread: PropTypes.object.isRequired\n};\nexport default MessageTextArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageTextArea\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/chat/content/MessageTextArea.js"],"names":["React","useState","useContext","useEffect","useRef","PropTypes","Input","Label","Form","Button","FontAwesomeIcon","Picker","AppContext","ChatContext","classNames","getGrays","formatDate","date","options","weekday","day","month","year","hour","minute","now","toLocaleString","split","map","item","trim","MessageTextArea","thread","isDark","isRTL","messages","messagesDispatch","threadsDispatch","textAreaInitialHeight","setTextAreaInitialHeight","previewEmoji","setPreviewEmoji","message","setMessage","isMountedRef","handleClickOutsideEmojiBox","e","target","closest","document","addEventListener","removeEventListener","current","textAreaPreviousHeight","autoExpand","field","style","height","textAreaCurrentHeight","scrollHeight","querySelector","event","className","addEmoji","emoji","native","handleSubmit","preventDefault","Date","newMessage","senderUserId","replace","status","time","content","find","id","messagesId","type","payload","isUpdatedStart","value","maxHeight","paddingRight","paddingLeft","position","bottom","left","right","padding","zIndex","backgroundColor","length","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input, Label, Form, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport 'emoji-mart/css/emoji-mart.css';\r\nimport { Picker } from 'emoji-mart';\r\nimport AppContext, { ChatContext } from '../../../context/Context';\r\nimport classNames from 'classnames';\r\nimport { getGrays } from '../../../helpers/utils';\r\n\r\nconst formatDate = date => {\r\n  const options = {\r\n    weekday: 'short',\r\n    day: 'numeric',\r\n    month: 'long',\r\n    year: 'numeric',\r\n    hour: 'numeric',\r\n    minute: 'numeric'\r\n  };\r\n\r\n  const now = date\r\n    .toLocaleString('en-US', options)\r\n    .split(',')\r\n    .map(item => item.trim());\r\n\r\n  return {\r\n    day: now[0],\r\n    hour: now[3],\r\n    date: now[1] + ', ' + now[2]\r\n  };\r\n};\r\n\r\nconst MessageTextArea = ({ thread }) => {\r\n  const { isDark, isRTL } = useContext(AppContext);\r\n  const { messages, messagesDispatch, threadsDispatch, textAreaInitialHeight, setTextAreaInitialHeight } = useContext(\r\n    ChatContext\r\n  );\r\n  const [previewEmoji, setPreviewEmoji] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n\r\n  const isMountedRef = useRef(null);\r\n\r\n  //Emoji box hiding Controller\r\n  useEffect(() => {\r\n    const handleClickOutsideEmojiBox = e => {\r\n      if (e.target.closest('.emoji-mart') || e.target.closest('.textarea')) return;\r\n      setPreviewEmoji(false);\r\n    };\r\n\r\n    if (previewEmoji) {\r\n      document.addEventListener('click', handleClickOutsideEmojiBox, false);\r\n    } else {\r\n      document.removeEventListener('click', handleClickOutsideEmojiBox, false);\r\n    }\r\n\r\n    return () => document.removeEventListener('click', handleClickOutsideEmojiBox, false);\r\n  }, [previewEmoji]);\r\n\r\n  useEffect(() => {\r\n    //TextBox and message body height controlling\r\n    isMountedRef.current = true;\r\n    let textAreaPreviousHeight = textAreaInitialHeight;\r\n    const autoExpand = function(field) {\r\n      // Reset field height\r\n      field.style.height = '2rem';\r\n\r\n      // Calculate the height\r\n      const textAreaCurrentHeight = field.scrollHeight;\r\n\r\n      if (textAreaCurrentHeight <= 160 && document.querySelector('.card-chat-pane')) {\r\n        if (textAreaPreviousHeight !== textAreaCurrentHeight && isMountedRef.current) {\r\n          document.querySelector('.card-chat-pane').style.height = `calc(100% - ${textAreaCurrentHeight}px)`;\r\n          setTextAreaInitialHeight((textAreaPreviousHeight = textAreaCurrentHeight));\r\n        }\r\n      }\r\n\r\n      field.style.height = textAreaCurrentHeight + 'px';\r\n    };\r\n    if (document.querySelector('.textarea')) {\r\n      document.addEventListener(\r\n        'input',\r\n        function(event) {\r\n          if (event.target.className === 'textarea');\r\n          autoExpand(event.target);\r\n        },\r\n        false\r\n      );\r\n    }\r\n    return () => {\r\n      isMountedRef.current = false;\r\n    };\r\n  }, [textAreaInitialHeight, setTextAreaInitialHeight]);\r\n\r\n  const addEmoji = e => {\r\n    let emoji = e.native;\r\n    setMessage(message + emoji);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const date = new Date();\r\n\r\n    let newMessage = {\r\n      senderUserId: 3,\r\n      message: `${message.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>')}`,\r\n      status: 'delivered',\r\n      time: formatDate(date)\r\n    };\r\n\r\n    const { content } = messages.find(({ id }) => id === thread.messagesId);\r\n    if (message) {\r\n      messagesDispatch({\r\n        type: 'EDIT',\r\n        payload: { id: thread.messagesId, content: [...content, newMessage] },\r\n        id: thread.messagesId\r\n      });\r\n\r\n      threadsDispatch({\r\n        type: 'EDIT',\r\n        payload: thread,\r\n        id: thread.id,\r\n        isUpdatedStart: true\r\n      });\r\n    }\r\n\r\n    setMessage('');\r\n\r\n    document.querySelector('.textarea').style.height = '2rem';\r\n    document.querySelector('.card-chat-pane').style.height = `calc(100% - 2rem)`;\r\n  };\r\n\r\n  return (\r\n    <Form className=\"chat-editor-area bg-white\" onSubmit={handleSubmit}>\r\n      <Input className=\"d-none\" type=\"file\" id=\"chat-file-upload\" />\r\n      <Label for=\"chat-file-upload\" className=\"mb-0 p-1 chat-file-upload cursor-pointer\">\r\n        <FontAwesomeIcon icon=\"paperclip\" />\r\n      </Label>\r\n\r\n      <Input\r\n        className=\"border-0 outline-none shadow-none resize-none textarea bg-white\"\r\n        type=\"textarea\"\r\n        placeholder=\"Type your message\"\r\n        bsSize=\"sm\"\r\n        value={message}\r\n        onChange={({ target }) => setMessage(target.value)}\r\n        style={{\r\n          height: '2rem',\r\n          maxHeight: '10rem',\r\n          paddingRight: isRTL ? '0.75rem' : '7rem',\r\n          paddingLeft: isRTL ? '7rem' : '0.75rem'\r\n        }}\r\n      />\r\n      <FontAwesomeIcon\r\n        icon={['far', 'laugh-beam']}\r\n        transform=\"grow-5\"\r\n        className=\"emoji-icon\"\r\n        onClick={() => setPreviewEmoji(!previewEmoji)}\r\n      />\r\n      {previewEmoji && (\r\n        <Picker\r\n          set=\"google\"\r\n          onSelect={addEmoji}\r\n          sheetSize={20}\r\n          style={{\r\n            position: 'absolute',\r\n            bottom: '100%',\r\n            left: isRTL ? '2%' : 'auto',\r\n            right: isRTL ? 'auto' : '2%',\r\n            padding: 0,\r\n            zIndex: 1,\r\n            backgroundColor: getGrays(isDark)[100]\r\n          }}\r\n          theme={isDark ? 'dark' : 'light'}\r\n          showPreview={false}\r\n          showSkinTones={false}\r\n        />\r\n      )}\r\n      <Button\r\n        color=\"transparent\"\r\n        size=\"sm\"\r\n        className={classNames(`btn-send outline-none ml-1`, {\r\n          'text-primary': message.length > 0\r\n        })}\r\n        type=\"submit\"\r\n      >\r\n        Send\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nMessageTextArea.propTypes = {\r\n  thread: PropTypes.object.isRequired\r\n};\r\n\r\nexport default MessageTextArea;\r\n"]},"metadata":{},"sourceType":"module"}