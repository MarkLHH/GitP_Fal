{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/experience/ExperienceForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getDuration } from '../../helpers/utils';\nimport moment from './Experience';\nimport { Button, Col, CustomInput, Form, FormGroup, Row } from 'reactstrap';\nimport ExperienceInput from './ExperienceInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExperienceForm = ({\n  experiences,\n  setExperiences\n}) => {\n  _s();\n\n  // State\n  const [company, setCompany] = useState('');\n  const [position, setPosition] = useState('');\n  const [city, setCity] = useState('');\n  const [description, setDescription] = useState('');\n  const [current, setCurrent] = useState(false);\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [isButtonDisable, setIsButtonDisable] = useState(true);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newExperience = {\n      company,\n      startDate,\n      endDate,\n      description,\n      current,\n      duration: getDuration(startDate, endDate),\n      headline: position,\n      location: city,\n      to: '#!'\n    };\n    setExperiences([newExperience, ...experiences]);\n    setCompany('');\n    setPosition('');\n    setCity('');\n    setDescription('');\n    setCurrent(false);\n    setStartDate('');\n    setEndDate('');\n  };\n\n  useEffect(() => {\n    setIsButtonDisable(!(company && position && city && description && moment.isMoment(startDate) && (current || moment.isMoment(endDate))));\n  }, [company, position, city, description, current, startDate, endDate]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(ExperienceInput, {\n      id: \"company\",\n      label: \"Company\",\n      value: company,\n      onChange: ({\n        target\n      }) => setCompany(target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExperienceInput, {\n      id: \"position\",\n      label: \"Position\",\n      value: position,\n      onChange: ({\n        target\n      }) => setPosition(target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExperienceInput, {\n      id: \"city\",\n      label: \"City\",\n      value: city,\n      onChange: ({\n        target\n      }) => setCity(target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExperienceInput, {\n      id: \"experienceDescription\",\n      label: \"Description\",\n      value: description,\n      onChange: ({\n        target\n      }) => setDescription(target.value),\n      type: \"textarea\",\n      rows: 3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          lg: {\n            size: 7,\n            offset: 3\n          },\n          children: /*#__PURE__*/_jsxDEV(CustomInput, {\n            type: \"checkbox\",\n            id: \"current\",\n            label: \"I currently work here\",\n            checked: current,\n            onChange: ({\n              target\n            }) => setCurrent(target.checked),\n            inline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExperienceInput, {\n      id: \"experienceFrom\",\n      label: \"From\",\n      value: startDate,\n      onChange: setStartDate,\n      type: \"datetime\",\n      timeFormat: false,\n      closeOnSelect: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), !current && /*#__PURE__*/_jsxDEV(ExperienceInput, {\n      id: \"experienceTo\",\n      label: \"To\",\n      value: endDate,\n      onChange: setEndDate,\n      type: \"datetime\",\n      timeFormat: false,\n      closeOnSelect: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          lg: {\n            size: 7,\n            offset: 3\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            disabled: isButtonDisable,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExperienceForm, \"rC9Xkn+qNOL2NtFT0qw9LgFhM4E=\");\n\n_c = ExperienceForm;\nExperienceForm.propTypes = {\n  experiences: PropTypes.array,\n  setExperiences: PropTypes.func.isRequired\n};\nexport default ExperienceForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExperienceForm\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/experience/ExperienceForm.js"],"names":["React","useState","useEffect","PropTypes","getDuration","moment","Button","Col","CustomInput","Form","FormGroup","Row","ExperienceInput","ExperienceForm","experiences","setExperiences","company","setCompany","position","setPosition","city","setCity","description","setDescription","current","setCurrent","startDate","setStartDate","endDate","setEndDate","isButtonDisable","setIsButtonDisable","handleSubmit","e","preventDefault","newExperience","duration","headline","location","to","isMoment","target","value","size","offset","checked","propTypes","array","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getDuration } from '../../helpers/utils';\nimport moment from './Experience';\nimport { Button, Col, CustomInput, Form, FormGroup, Row } from 'reactstrap';\nimport ExperienceInput from './ExperienceInput';\n\nconst ExperienceForm = ({ experiences, setExperiences }) => {\n  // State\n  const [company, setCompany] = useState('');\n  const [position, setPosition] = useState('');\n  const [city, setCity] = useState('');\n  const [description, setDescription] = useState('');\n  const [current, setCurrent] = useState(false);\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [isButtonDisable, setIsButtonDisable] = useState(true);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newExperience = {\n      company,\n      startDate,\n      endDate,\n      description,\n      current,\n      duration: getDuration(startDate, endDate),\n      headline: position,\n      location: city,\n      to: '#!'\n    };\n\n    setExperiences([newExperience, ...experiences]);\n    setCompany('');\n    setPosition('');\n    setCity('');\n    setDescription('');\n    setCurrent(false);\n    setStartDate('');\n    setEndDate('');\n  };\n\n  useEffect(() => {\n    setIsButtonDisable(\n      !(\n        company &&\n        position &&\n        city &&\n        description &&\n        moment.isMoment(startDate) &&\n        (current || moment.isMoment(endDate))\n      )\n    );\n  }, [company, position, city, description, current, startDate, endDate]);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <ExperienceInput\n        id=\"company\"\n        label=\"Company\"\n        value={company}\n        onChange={({ target }) => setCompany(target.value)}\n      />\n\n      <ExperienceInput\n        id=\"position\"\n        label=\"Position\"\n        value={position}\n        onChange={({ target }) => setPosition(target.value)}\n      />\n\n      <ExperienceInput id=\"city\" label=\"City\" value={city} onChange={({ target }) => setCity(target.value)} />\n\n      <ExperienceInput\n        id=\"experienceDescription\"\n        label=\"Description\"\n        value={description}\n        onChange={({ target }) => setDescription(target.value)}\n        type=\"textarea\"\n        rows={3}\n      />\n\n      <FormGroup>\n        <Row className=\"row\">\n          <Col lg={{ size: 7, offset: 3 }}>\n            <CustomInput\n              type=\"checkbox\"\n              id=\"current\"\n              label=\"I currently work here\"\n              checked={current}\n              onChange={({ target }) => setCurrent(target.checked)}\n              inline\n            />\n          </Col>\n        </Row>\n      </FormGroup>\n\n      <ExperienceInput\n        id=\"experienceFrom\"\n        label=\"From\"\n        value={startDate}\n        onChange={setStartDate}\n        type=\"datetime\"\n        timeFormat={false}\n        closeOnSelect\n      />\n\n      {!current && (\n        <ExperienceInput\n          id=\"experienceTo\"\n          label=\"To\"\n          value={endDate}\n          onChange={setEndDate}\n          type=\"datetime\"\n          timeFormat={false}\n          closeOnSelect\n        />\n      )}\n\n      <FormGroup className=\"form-group\">\n        <Row className=\"row\">\n          <Col lg={{ size: 7, offset: 3 }}>\n            <Button color=\"primary\" disabled={isButtonDisable}>\n              Save\n            </Button>\n          </Col>\n        </Row>\n      </FormGroup>\n    </Form>\n  );\n};\n\nExperienceForm.propTypes = {\n  experiences: PropTypes.array,\n  setExperiences: PropTypes.func.isRequired\n};\n\nexport default ExperienceForm;\n"]},"metadata":{},"sourceType":"module"}