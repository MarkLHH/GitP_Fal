{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/auth/wizard/WizardInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport WizardError from './WizardError';\nimport { AuthWizardContext } from '../../../context/Context';\nimport Datetime from 'react-datetime';\nimport classNames from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WizardInput = ({\n  label,\n  id,\n  name,\n  errors,\n  tag: Tag = Input,\n  type = 'text',\n  options = [],\n  placeholder,\n  className,\n  customType,\n  ...rest\n}) => {\n  _s();\n\n  var _errors$name4, _errors$name5;\n\n  const {\n    user,\n    handleInputChange\n  } = useContext(AuthWizardContext);\n\n  if (customType === 'datetime') {\n    return /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [!!label && /*#__PURE__*/_jsxDEV(Label, {\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Datetime, {\n        id: id,\n        dateFormat: \"DD/MM/YYYY\",\n        timeFormat: false,\n        defaultValue: user[name],\n        onChange: setStartDate => handleInputChange({\n          name: name,\n          value: setStartDate\n        }),\n        inputProps: {\n          name,\n          placeholder\n        },\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (type === 'checkbox' || type === 'switch' || type === 'radio') {\n    var _errors$name;\n\n    return /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: /*#__PURE__*/_jsxDEV(Tag, {\n        name: name,\n        id: id,\n        type: type,\n        className: className,\n        label: /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [label, /*#__PURE__*/_jsxDEV(WizardError, {\n            error: (_errors$name = errors[name]) === null || _errors$name === void 0 ? void 0 : _errors$name.message,\n            className: \"fs--1 font-weight-normal d-block\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this),\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (type === 'select') {\n    var _errors$name2, _errors$name3;\n\n    return /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [!!label && /*#__PURE__*/_jsxDEV(Label, {\n        for: id,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Tag, {\n        name: name,\n        id: id,\n        defaultValue: user[name],\n        type: type,\n        label: label,\n        className: classNames(className, {\n          'border-danger': (_errors$name2 = errors[name]) === null || _errors$name2 === void 0 ? void 0 : _errors$name2.message\n        }),\n        ...rest,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: placeholder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option,\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WizardError, {\n        error: (_errors$name3 = errors[name]) === null || _errors$name3 === void 0 ? void 0 : _errors$name3.message,\n        className: \"mt-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(FormGroup, {\n    children: [!!label && /*#__PURE__*/_jsxDEV(Label, {\n      for: id,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Tag, {\n      name: name,\n      id: id,\n      defaultValue: user[name],\n      type: type,\n      placeholder: placeholder,\n      className: classNames(className, {\n        'border-danger': (_errors$name4 = errors[name]) === null || _errors$name4 === void 0 ? void 0 : _errors$name4.message\n      }),\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WizardError, {\n      error: (_errors$name5 = errors[name]) === null || _errors$name5 === void 0 ? void 0 : _errors$name5.message,\n      className: \"mt-1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WizardInput, \"tGAXGYmvNXmR1WhAhOBkNnmmuHs=\");\n\n_c = WizardInput;\nWizardInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\nWizardInput.defaultProps = {\n  required: false\n};\nexport default WizardInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"WizardInput\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/auth/wizard/WizardInput.js"],"names":["React","useContext","Fragment","PropTypes","FormGroup","Input","Label","WizardError","AuthWizardContext","Datetime","classNames","WizardInput","label","id","name","errors","tag","Tag","type","options","placeholder","className","customType","rest","user","handleInputChange","setStartDate","value","message","map","option","index","propTypes","oneOfType","string","node","defaultProps","required"],"mappings":"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","sourcesContent":["import React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport WizardError from './WizardError';\nimport { AuthWizardContext } from '../../../context/Context';\nimport Datetime from 'react-datetime';\nimport classNames from 'classnames';\n\nconst WizardInput = ({\n  label,\n  id,\n  name,\n  errors,\n  tag: Tag = Input,\n  type = 'text',\n  options = [],\n  placeholder,\n  className,\n  customType,\n  ...rest\n}) => {\n  const { user, handleInputChange } = useContext(AuthWizardContext);\n\n  if (customType === 'datetime') {\n    return (\n      <FormGroup>\n        {!!label && <Label>{label}</Label>}\n        <Datetime\n          id={id}\n          dateFormat=\"DD/MM/YYYY\"\n          timeFormat={false}\n          defaultValue={user[name]}\n          onChange={setStartDate => handleInputChange({ name: name, value: setStartDate })}\n          inputProps={{\n            name,\n            placeholder\n          }}\n          {...rest}\n        />\n      </FormGroup>\n    );\n  }\n\n  if (type === 'checkbox' || type === 'switch' || type === 'radio') {\n    return (\n      <FormGroup>\n        <Tag\n          name={name}\n          id={id}\n          type={type}\n          className={className}\n          label={\n            <Fragment>\n              {label}\n              <WizardError error={errors[name]?.message} className=\"fs--1 font-weight-normal d-block\" />\n            </Fragment>\n          }\n          {...rest}\n        />\n      </FormGroup>\n    );\n  }\n  if (type === 'select') {\n    return (\n      <FormGroup>\n        {!!label && <Label for={id}>{label}</Label>}\n        <Tag\n          name={name}\n          id={id}\n          defaultValue={user[name]}\n          type={type}\n          label={label}\n          className={classNames(className, { 'border-danger': errors[name]?.message })}\n          {...rest}\n        >\n          <option value=\"\">{placeholder}</option>\n          {options.map((option, index) => (\n            <option value={option} key={index}>\n              {option}\n            </option>\n          ))}\n        </Tag>\n        <WizardError error={errors[name]?.message} className=\"mt-1\" />\n      </FormGroup>\n    );\n  }\n  return (\n    <FormGroup>\n      {!!label && <Label for={id}>{label}</Label>}\n      <Tag\n        name={name}\n        id={id}\n        defaultValue={user[name]}\n        type={type}\n        placeholder={placeholder}\n        className={classNames(className, { 'border-danger': errors[name]?.message })}\n        {...rest}\n      />\n      <WizardError error={errors[name]?.message} className=\"mt-1\" />\n    </FormGroup>\n  );\n};\n\nWizardInput.propTypes = { label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]) };\n\nWizardInput.defaultProps = { required: false };\n\nexport default WizardInput;\n"]},"metadata":{},"sourceType":"module"}