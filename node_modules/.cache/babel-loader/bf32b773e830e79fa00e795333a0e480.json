{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/changelog/Logs.js\";\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardHeader } from 'reactstrap';\nimport { isIterableArray } from '../../helpers/utils';\nimport changeLogs from './changeLogs';\nimport createMarkup from '../../helpers/createMarkup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Logs = ({\n  title,\n  publish,\n  logs,\n  children,\n  index: currentIndex\n}) => /*#__PURE__*/_jsxDEV(Card, {\n  className: \"mb-3\",\n  children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-0\",\n      children: publish\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n    className: \"bg-light\",\n    children: [children, isIterableArray(Object.keys(logs)) && Object.keys(logs).map((value, index) => {\n      return value === 'Migration' ? /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"fs-0\",\n          children: [value, \":\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              children: [\"v\", changeLogs[currentIndex + 1].title.split(' - ')[0]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 17\n          }, this), ' ', \"to\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              children: [\"v\", title.split(' - ')[0]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"pl-3\",\n          children: Object.entries(logs[value]).map((entry, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              children: entry[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: isIterableArray(entry[1]) && entry[1].map((mv, mi) => /*#__PURE__*/_jsxDEV(\"li\", {\n                dangerouslySetInnerHTML: {\n                  __html: mv\n                }\n              }, entry[0] + i + mi, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 27\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"fs-0\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"pl-3\",\n          children: logs[value].map((v, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            dangerouslySetInnerHTML: createMarkup(v)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this);\n\n_c = Logs;\nLogs.propTypes = {\n  title: PropTypes.string.isRequired,\n  publish: PropTypes.string.isRequired,\n  logs: PropTypes.object.isRequired,\n  children: PropTypes.node\n};\nLogs.defaultProps = {\n  logs: {}\n};\nexport default Logs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Logs\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/changelog/Logs.js"],"names":["React","Fragment","PropTypes","Card","CardBody","CardHeader","isIterableArray","changeLogs","createMarkup","Logs","title","publish","logs","children","index","currentIndex","Object","keys","map","value","split","entries","entry","i","mv","mi","__html","v","propTypes","string","isRequired","object","node","defaultProps"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardHeader } from 'reactstrap';\nimport { isIterableArray } from '../../helpers/utils';\nimport changeLogs from './changeLogs';\nimport createMarkup from '../../helpers/createMarkup';\n\nconst Logs = ({ title, publish, logs, children, index: currentIndex }) => (\n  <Card className=\"mb-3\">\n    <CardHeader>\n      <h5>{title}</h5>\n      <p className=\"mb-0\">{publish}</p>\n    </CardHeader>\n    <CardBody className=\"bg-light\">\n      {children}\n      {isIterableArray(Object.keys(logs)) &&\n        Object.keys(logs).map((value, index) => {\n          return value === 'Migration' ? (\n            <Fragment key={index}>\n              <h5 className=\"fs-0\">\n                {value}:{' '}\n                <strong>\n                  <code>v{changeLogs[currentIndex + 1].title.split(' - ')[0]}</code>\n                </strong>{' '}\n                to{' '}\n                <strong>\n                  <code>v{title.split(' - ')[0]}</code>\n                </strong>\n              </h5>\n              <ul className=\"pl-3\">\n                {Object.entries(logs[value]).map((entry, i) => (\n                  <li key={i}>\n                    <h6>{entry[0]}</h6>\n                    <ul>\n                      {isIterableArray(entry[1]) &&\n                        entry[1].map((mv, mi) => (\n                          <li dangerouslySetInnerHTML={{ __html: mv }} key={entry[0] + i + mi} />\n                        ))}\n                    </ul>\n                  </li>\n                ))}\n              </ul>\n            </Fragment>\n          ) : (\n            <Fragment key={index}>\n              <h5 className=\"fs-0\">{value}</h5>\n              <ul className=\"pl-3\">\n                {logs[value].map((v, i) => (\n                  <li key={i} dangerouslySetInnerHTML={createMarkup(v)} />\n                ))}\n              </ul>\n            </Fragment>\n          );\n        })}\n    </CardBody>\n  </Card>\n);\n\nLogs.propTypes = {\n  title: PropTypes.string.isRequired,\n  publish: PropTypes.string.isRequired,\n  logs: PropTypes.object.isRequired,\n  children: PropTypes.node\n};\n\nLogs.defaultProps = { logs: {} };\n\nexport default Logs;\n"]},"metadata":{},"sourceType":"module"}