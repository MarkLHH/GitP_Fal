{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/chart/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ChartFunc from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chart = ({\n  config,\n  ...rest\n}) => {\n  _s();\n\n  const chartRef = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    new ChartFunc(ctx, config);\n  }, [chartRef, config]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Chart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Chart;\nChart.propTypes = {\n  config: PropTypes.object.isRequired\n};\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/chart/Chart.js"],"names":["React","useEffect","PropTypes","ChartFunc","Chart","config","rest","chartRef","createRef","ctx","current","getContext","propTypes","object","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,UAAtB;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAU,KAAGC;AAAb,CAAD,KAAyB;AAAA;;AACrC,QAAMC,QAAQ,gBAAGP,KAAK,CAACQ,SAAN,EAAjB;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,GAAG,GAAGF,QAAQ,CAACG,OAAT,CAAiBC,UAAjB,CAA4B,IAA5B,CAAZ;AACA,QAAIR,SAAJ,CAAcM,GAAd,EAAmBJ,MAAnB;AACD,GAHQ,EAGN,CAACE,QAAD,EAAWF,MAAX,CAHM,CAAT;AAKA,sBAAO;AAAQ,IAAA,GAAG,EAAEE,QAAb;AAAA,OAA2BD;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CATD;;GAAMF,K;;KAAAA,K;AAWNA,KAAK,CAACQ,SAAN,GAAkB;AAAEP,EAAAA,MAAM,EAAEH,SAAS,CAACW,MAAV,CAAiBC;AAA3B,CAAlB;AAEA,eAAeV,KAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ChartFunc from 'chart.js';\n\nconst Chart = ({ config, ...rest }) => {\n  const chartRef = React.createRef();\n\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    new ChartFunc(ctx, config);\n  }, [chartRef, config]);\n\n  return <canvas ref={chartRef} {...rest} />;\n};\n\nChart.propTypes = { config: PropTypes.object.isRequired };\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}