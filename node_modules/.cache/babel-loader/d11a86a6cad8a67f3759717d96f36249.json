{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/chat/ChatProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { ChatContext } from '../../context/Context';\nimport { arrayReducer } from '../../reducers/arrayReducer';\nimport { isIterableArray } from '../../helpers/utils';\nimport users from './../../data/people/people';\nimport rawThreads from './../../data/chat/threads';\nimport rawMessages from './../../data/chat/messages';\nimport groups from './../../data/chat/groups';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatProvider = ({\n  children\n}) => {\n  _s();\n\n  const [messages, messagesDispatch] = useReducer(arrayReducer, rawMessages);\n  const [threads, threadsDispatch] = useReducer(arrayReducer, rawThreads);\n  const [textAreaInitialHeight, setTextAreaInitialHeight] = useState(32);\n  const [activeThreadId, setActiveThreadId] = useState(threads[0].id);\n\n  const getUser = thread => {\n    let user = {};\n\n    if (isIterableArray(thread.userId)) {\n      const {\n        name,\n        members\n      } = groups.find(({\n        id\n      }) => id === thread.userId[0]);\n      user = {\n        name,\n        avatarSrc: members.map(member => users.find(({\n          id\n        }) => id === member.userId).avatarSrc)\n      };\n    } else {\n      user = users.find(({\n        id\n      }) => id === thread.userId);\n    }\n\n    return user;\n  };\n\n  const value = {\n    users,\n    groups,\n    threads,\n    getUser,\n    messages,\n    activeThreadId,\n    setActiveThreadId,\n    threadsDispatch,\n    messagesDispatch,\n    textAreaInitialHeight,\n    setTextAreaInitialHeight\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ChatProvider, \"TW1MAgpvQc8Y7JXlYBmAao8XgvI=\");\n\n_c = ChatProvider;\nChatProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default ChatProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/chat/ChatProvider.js"],"names":["React","useState","useReducer","PropTypes","ChatContext","arrayReducer","isIterableArray","users","rawThreads","rawMessages","groups","ChatProvider","children","messages","messagesDispatch","threads","threadsDispatch","textAreaInitialHeight","setTextAreaInitialHeight","activeThreadId","setActiveThreadId","id","getUser","thread","user","userId","name","members","find","avatarSrc","map","member","value","propTypes","node","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrC,QAAM,CAACC,QAAD,EAAWC,gBAAX,IAA+BZ,UAAU,CAACG,YAAD,EAAeI,WAAf,CAA/C;AACA,QAAM,CAACM,OAAD,EAAUC,eAAV,IAA6Bd,UAAU,CAACG,YAAD,EAAeG,UAAf,CAA7C;AACA,QAAM,CAACS,qBAAD,EAAwBC,wBAAxB,IAAoDjB,QAAQ,CAAC,EAAD,CAAlE;AACA,QAAM,CAACkB,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAACc,OAAO,CAAC,CAAD,CAAP,CAAWM,EAAZ,CAApD;;AAEA,QAAMC,OAAO,GAAGC,MAAM,IAAI;AACxB,QAAIC,IAAI,GAAG,EAAX;;AAEA,QAAIlB,eAAe,CAACiB,MAAM,CAACE,MAAR,CAAnB,EAAoC;AAClC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAoBjB,MAAM,CAACkB,IAAP,CAAY,CAAC;AAAEP,QAAAA;AAAF,OAAD,KAAYA,EAAE,KAAKE,MAAM,CAACE,MAAP,CAAc,CAAd,CAA/B,CAA1B;AACAD,MAAAA,IAAI,GAAG;AACLE,QAAAA,IADK;AAELG,QAAAA,SAAS,EAAEF,OAAO,CAACG,GAAR,CAAYC,MAAM,IAAIxB,KAAK,CAACqB,IAAN,CAAW,CAAC;AAAEP,UAAAA;AAAF,SAAD,KAAYA,EAAE,KAAKU,MAAM,CAACN,MAArC,EAA6CI,SAAnE;AAFN,OAAP;AAID,KAND,MAMO;AACLL,MAAAA,IAAI,GAAGjB,KAAK,CAACqB,IAAN,CAAW,CAAC;AAAEP,QAAAA;AAAF,OAAD,KAAYA,EAAE,KAAKE,MAAM,CAACE,MAArC,CAAP;AACD;;AAED,WAAOD,IAAP;AACD,GAdD;;AAgBA,QAAMQ,KAAK,GAAG;AACZzB,IAAAA,KADY;AAEZG,IAAAA,MAFY;AAGZK,IAAAA,OAHY;AAIZO,IAAAA,OAJY;AAKZT,IAAAA,QALY;AAMZM,IAAAA,cANY;AAOZC,IAAAA,iBAPY;AAQZJ,IAAAA,eARY;AASZF,IAAAA,gBATY;AAUZG,IAAAA,qBAVY;AAWZC,IAAAA;AAXY,GAAd;AAcA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEc,KAA7B;AAAA,cAAqCpB;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CArCD;;GAAMD,Y;;KAAAA,Y;AAuCNA,YAAY,CAACsB,SAAb,GAAyB;AAAErB,EAAAA,QAAQ,EAAET,SAAS,CAAC+B,IAAV,CAAeC;AAA3B,CAAzB;AAEA,eAAexB,YAAf","sourcesContent":["import React, { useState, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { ChatContext } from '../../context/Context';\nimport { arrayReducer } from '../../reducers/arrayReducer';\nimport { isIterableArray } from '../../helpers/utils';\n\nimport users from './../../data/people/people';\nimport rawThreads from './../../data/chat/threads';\nimport rawMessages from './../../data/chat/messages';\nimport groups from './../../data/chat/groups';\n\nconst ChatProvider = ({ children }) => {\n  const [messages, messagesDispatch] = useReducer(arrayReducer, rawMessages);\n  const [threads, threadsDispatch] = useReducer(arrayReducer, rawThreads);\n  const [textAreaInitialHeight, setTextAreaInitialHeight] = useState(32);\n  const [activeThreadId, setActiveThreadId] = useState(threads[0].id);\n\n  const getUser = thread => {\n    let user = {};\n\n    if (isIterableArray(thread.userId)) {\n      const { name, members } = groups.find(({ id }) => id === thread.userId[0]);\n      user = {\n        name,\n        avatarSrc: members.map(member => users.find(({ id }) => id === member.userId).avatarSrc)\n      };\n    } else {\n      user = users.find(({ id }) => id === thread.userId);\n    }\n\n    return user;\n  };\n\n  const value = {\n    users,\n    groups,\n    threads,\n    getUser,\n    messages,\n    activeThreadId,\n    setActiveThreadId,\n    threadsDispatch,\n    messagesDispatch,\n    textAreaInitialHeight,\n    setTextAreaInitialHeight\n  };\n\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\n};\n\nChatProvider.propTypes = { children: PropTypes.node.isRequired };\n\nexport default ChatProvider;\n"]},"metadata":{},"sourceType":"module"}