{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/kanban/KanbanColumn.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport KanbanColumnHeder from './KanbanColumnHeader';\nimport { KanbanContext } from '../../context/Context';\nimport { Droppable } from 'react-beautiful-dnd';\nimport AddAnotherCard from './AddAnotherCard';\nimport users from '../../data/dashboard/users';\nimport ButtonIcon from '../common/ButtonIcon';\nimport TaskCard from './TaskCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst KanbanColumn = ({\n  kanbanColumnItem,\n  index\n}) => {\n  _s();\n\n  const {\n    kanbanTaskCards\n  } = useContext(KanbanContext);\n  const [showForm, setShowForm] = useState(false);\n  useEffect(() => {\n    const kanbanContainer = document.getElementById(`container-${index}`);\n    kanbanContainer.scrollTop = kanbanContainer.scrollHeight;\n  }, [showForm, index]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames('kanban-column', {\n      'form-added': showForm\n    }),\n    children: [/*#__PURE__*/_jsxDEV(KanbanColumnHeder, {\n      kanbanColumnItem: kanbanColumnItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: kanbanColumnItem.id,\n      children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"kanban-items-container scrollbar\",\n          id: `container-${index}`,\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          children: [kanbanColumnItem.items.map((taskCardItemId, taskCardIndex) => {\n            const taskCard = kanbanTaskCards.find(({\n              id\n            }) => id === taskCardItemId);\n            const taskCardImage = taskCard.attachments && taskCard.attachments.find(({\n              type\n            }) => type === 'image');\n            const members = taskCard.members && taskCard.members.map(member => {\n              return users.find(user => member === user.id);\n            });\n            return /*#__PURE__*/_jsxDEV(TaskCard, {\n              members: members,\n              taskCardImage: taskCardImage,\n              taskCard: taskCard,\n              taskCardIndex: taskCardIndex,\n              taskCardItemId: taskCardItemId\n            }, taskCardItemId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 19\n            }, this);\n          }), showForm && /*#__PURE__*/_jsxDEV(AddAnotherCard, {\n            kanbanColumnItem: kanbanColumnItem,\n            setShowForm: setShowForm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 28\n          }, this), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), !showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"kanban-column-footer\",\n          children: /*#__PURE__*/_jsxDEV(ButtonIcon, {\n            className: \"btn-add-card text-600 text-decoration-none\",\n            color: \"link\",\n            block: true,\n            icon: \"plus\",\n            iconClassName: \"mr-1\",\n            size: \"sm\",\n            onClick: () => {\n              setShowForm(true);\n            },\n            children: \"Add another card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(KanbanColumn, \"sunxTW/kr1GY4E3FgFz9dj+ePpc=\");\n\n_c = KanbanColumn;\nKanbanColumn.propTypes = {\n  kanbanColumnItem: PropTypes.object.isRequired\n};\nexport default KanbanColumn;\n\nvar _c;\n\n$RefreshReg$(_c, \"KanbanColumn\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/kanban/KanbanColumn.js"],"names":["React","useContext","useState","useEffect","PropTypes","classNames","KanbanColumnHeder","KanbanContext","Droppable","AddAnotherCard","users","ButtonIcon","TaskCard","KanbanColumn","kanbanColumnItem","index","kanbanTaskCards","showForm","setShowForm","kanbanContainer","document","getElementById","scrollTop","scrollHeight","id","provided","snapshot","innerRef","droppableProps","items","map","taskCardItemId","taskCardIndex","taskCard","find","taskCardImage","attachments","type","members","member","user","placeholder","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport KanbanColumnHeder from './KanbanColumnHeader';\r\nimport { KanbanContext } from '../../context/Context';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nimport AddAnotherCard from './AddAnotherCard';\r\nimport users from '../../data/dashboard/users';\r\nimport ButtonIcon from '../common/ButtonIcon';\r\nimport TaskCard from './TaskCard';\r\n\r\nconst KanbanColumn = ({ kanbanColumnItem, index }) => {\r\n  const { kanbanTaskCards } = useContext(KanbanContext);\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const kanbanContainer = document.getElementById(`container-${index}`);\r\n    kanbanContainer.scrollTop = kanbanContainer.scrollHeight;\r\n  }, [showForm, index]);\r\n\r\n  return (\r\n    <div className={classNames('kanban-column', { 'form-added': showForm })}>\r\n      <KanbanColumnHeder kanbanColumnItem={kanbanColumnItem} />\r\n      <Droppable droppableId={kanbanColumnItem.id}>\r\n        {(provided, snapshot) => (\r\n          <>\r\n            <div\r\n              className=\"kanban-items-container scrollbar\"\r\n              id={`container-${index}`}\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}\r\n            >\r\n              {kanbanColumnItem.items.map((taskCardItemId, taskCardIndex) => {\r\n                const taskCard = kanbanTaskCards.find(({ id }) => id === taskCardItemId);\r\n\r\n                const taskCardImage = taskCard.attachments && taskCard.attachments.find(({ type }) => type === 'image');\r\n\r\n                const members =\r\n                  taskCard.members &&\r\n                  taskCard.members.map(member => {\r\n                    return users.find(user => member === user.id);\r\n                  });\r\n\r\n                return (\r\n                  <TaskCard\r\n                    members={members}\r\n                    taskCardImage={taskCardImage}\r\n                    taskCard={taskCard}\r\n                    key={taskCardItemId}\r\n                    taskCardIndex={taskCardIndex}\r\n                    taskCardItemId={taskCardItemId}\r\n                  />\r\n                );\r\n              })}\r\n              {showForm && <AddAnotherCard kanbanColumnItem={kanbanColumnItem} setShowForm={setShowForm} />}\r\n              {provided.placeholder}\r\n            </div>\r\n            {!showForm && (\r\n              <div className=\"kanban-column-footer\">\r\n                <ButtonIcon\r\n                  className=\"btn-add-card text-600 text-decoration-none\"\r\n                  color=\"link\"\r\n                  block\r\n                  icon=\"plus\"\r\n                  iconClassName=\"mr-1\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setShowForm(true);\r\n                  }}\r\n                >\r\n                  Add another card\r\n                </ButtonIcon>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\nKanbanColumn.propTypes = {\r\n  kanbanColumnItem: PropTypes.object.isRequired\r\n};\r\nexport default KanbanColumn;\r\n"]},"metadata":{},"sourceType":"module"}