{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/page/People.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Card, CardBody, Col, CustomInput, Form, Input, Row } from 'reactstrap';\nimport Member from './Member';\nimport Loader from '../common/Loader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport { isIterableArray } from '../../helpers/utils';\nimport useFakeFetch from '../../hooks/useFakeFetch';\nimport rawPeople from '../../data/people/people';\nimport peopleCategories from '../../data/people/peopleCategories';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst People = ({\n  peoples = rawPeople.length,\n  className\n}) => {\n  _s();\n\n  const {\n    loading,\n    data: people,\n    setData: setPeople\n  } = useFakeFetch(rawPeople);\n\n  const searchPeople = ({\n    target\n  }) => {\n    const keyword = target.value.toLowerCase();\n    const filteredResult = rawPeople.filter(person => person.name.toLowerCase().includes(keyword) || person.institution.toLowerCase().includes(keyword));\n    setPeople(keyword.length ? filteredResult : rawPeople);\n  };\n\n  const tempPeople = () => people.slice(0, peoples);\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n      title: `Followers (${tempPeople().length})`,\n      children: isIterableArray(peopleCategories) && /*#__PURE__*/_jsxDEV(Form, {\n        inline: true,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          bsSize: \"sm\",\n          placeholder: \"Search...\",\n          onChange: searchPeople\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CustomInput, {\n          type: \"select\",\n          id: \"exampleCustomSelect\",\n          name: \"customSelect\",\n          bsSize: \"sm\",\n          className: \"d-md-block d-none ml-2\",\n          children: peopleCategories.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      className: \"bg-light p-0\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this) : isIterableArray(people) ? /*#__PURE__*/_jsxDEV(Row, {\n        noGutters: true,\n        className: \"text-center fs--1\",\n        children: tempPeople().map((follower, index) => /*#__PURE__*/_jsxDEV(Col, {\n          className: className,\n          children: /*#__PURE__*/_jsxDEV(Member, { ...follower\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Row, {\n        className: \"p-card\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            color: \"info\",\n            className: \"mb-0\",\n            children: \"No Followers!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(People, \"nbed52qkz3gcpwYxc2MmLgVQnRs=\", false, function () {\n  return [useFakeFetch];\n});\n\n_c = People;\nPeople.propTypes = {\n  peoples: PropTypes.number,\n  className: PropTypes.string\n};\nPeople.defaultProps = {\n  className: 'col-6 col-md-4 col-lg-3 col-xxl-2'\n};\nexport default People;\n\nvar _c;\n\n$RefreshReg$(_c, \"People\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/page/People.js"],"names":["React","PropTypes","Alert","Card","CardBody","Col","CustomInput","Form","Input","Row","Member","Loader","FalconCardHeader","isIterableArray","useFakeFetch","rawPeople","peopleCategories","People","peoples","length","className","loading","data","people","setData","setPeople","searchPeople","target","keyword","value","toLowerCase","filteredResult","filter","person","name","includes","institution","tempPeople","slice","map","option","index","follower","propTypes","number","string","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Alert, Card, CardBody, Col, CustomInput, Form, Input, Row } from 'reactstrap';\r\nimport Member from './Member';\r\nimport Loader from '../common/Loader';\r\nimport FalconCardHeader from '../common/FalconCardHeader';\r\nimport { isIterableArray } from '../../helpers/utils';\r\nimport useFakeFetch from '../../hooks/useFakeFetch';\r\nimport rawPeople from '../../data/people/people';\r\nimport peopleCategories from '../../data/people/peopleCategories';\r\n\r\nconst People = ({ peoples = rawPeople.length, className }) => {\r\n  const { loading, data: people, setData: setPeople } = useFakeFetch(rawPeople);\r\n\r\n  const searchPeople = ({ target }) => {\r\n    const keyword = target.value.toLowerCase();\r\n    const filteredResult = rawPeople.filter(\r\n      person => person.name.toLowerCase().includes(keyword) || person.institution.toLowerCase().includes(keyword)\r\n    );\r\n\r\n    setPeople(keyword.length ? filteredResult : rawPeople);\r\n  };\r\n\r\n  const tempPeople = () => people.slice(0, peoples);\r\n\r\n  return (\r\n    <Card>\r\n      <FalconCardHeader title={`Followers (${tempPeople().length})`}>\r\n        {isIterableArray(peopleCategories) && (\r\n          <Form inline>\r\n            <Input bsSize=\"sm\" placeholder=\"Search...\" onChange={searchPeople} />\r\n            <CustomInput\r\n              type=\"select\"\r\n              id=\"exampleCustomSelect\"\r\n              name=\"customSelect\"\r\n              bsSize=\"sm\"\r\n              className=\"d-md-block d-none ml-2\"\r\n            >\r\n              {peopleCategories.map((option, index) => (\r\n                <option value={index} key={index}>\r\n                  {option}\r\n                </option>\r\n              ))}\r\n            </CustomInput>\r\n          </Form>\r\n        )}\r\n      </FalconCardHeader>\r\n      <CardBody className=\"bg-light p-0\">\r\n        {loading ? (\r\n          <Loader />\r\n        ) : isIterableArray(people) ? (\r\n          <Row noGutters className=\"text-center fs--1\">\r\n            {tempPeople().map((follower, index) => (\r\n              <Col className={className} key={index}>\r\n                <Member {...follower} />\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        ) : (\r\n          <Row className=\"p-card\">\r\n            <Col>\r\n              <Alert color=\"info\" className=\"mb-0\">\r\n                No Followers!\r\n              </Alert>\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nPeople.propTypes = {\r\n  peoples: PropTypes.number,\r\n  className: PropTypes.string\r\n};\r\n\r\nPeople.defaultProps = {\r\n  className: 'col-6 col-md-4 col-lg-3 col-xxl-2'\r\n};\r\n\r\nexport default People;\r\n"]},"metadata":{},"sourceType":"module"}