{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/page/Events.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Alert, Card, CardBody, Col, CustomInput, Form, Row } from 'reactstrap';\nimport EventSummary from '../event/EventSummary';\nimport Loader from '../common/Loader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport useFakeFetch from '../../hooks/useFakeFetch';\nimport rawEvents from '../../data/event/events';\nimport eventCategories from '../../data/event/eventCategories';\nimport createMarkup from '../../helpers/createMarkup';\nimport { isIterableArray } from '../../helpers/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Events = () => {\n  _s();\n\n  const {\n    loading,\n    data: events\n  } = useFakeFetch(rawEvents);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n      title: \"Events\",\n      children: isIterableArray(eventCategories) && /*#__PURE__*/_jsxDEV(Form, {\n        inline: true,\n        children: /*#__PURE__*/_jsxDEV(CustomInput, {\n          type: \"select\",\n          id: \"customSelectCategory\",\n          name: \"customSelectCategory\",\n          bsSize: \"sm\",\n          children: eventCategories.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      className: \"fs--1\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this) : isIterableArray(events) ? /*#__PURE__*/_jsxDEV(Row, {\n        children: events.map(({\n          additional,\n          ...rest\n        }, index) => /*#__PURE__*/_jsxDEV(Col, {\n          md: 6,\n          className: \"h-100\",\n          children: /*#__PURE__*/_jsxDEV(EventSummary, {\n            divider: events.length !== index + 1,\n            ...rest,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-1000 mb-0\",\n              dangerouslySetInnerHTML: createMarkup(additional)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Alert, {\n        color: \"info\",\n        className: \"mb-0\",\n        children: \"No events found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Events, \"982BuWdbiMO5/Jy4M3qnlTj5H5I=\", false, function () {\n  return [useFakeFetch];\n});\n\n_c = Events;\nexport default Events;\n\nvar _c;\n\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/page/Events.js"],"names":["React","Alert","Card","CardBody","Col","CustomInput","Form","Row","EventSummary","Loader","FalconCardHeader","useFakeFetch","rawEvents","eventCategories","createMarkup","isIterableArray","Events","loading","data","events","map","option","index","additional","rest","length"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,QAAtB,EAAgCC,GAAhC,EAAqCC,WAArC,EAAkDC,IAAlD,EAAwDC,GAAxD,QAAmE,YAAnE;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,eAAT,QAAgC,qBAAhC;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAA4BR,YAAY,CAACC,SAAD,CAA9C;AAEA,sBACE,QAAC,IAAD;AAAA,4BACE,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAC,QAAxB;AAAA,gBACGG,eAAe,CAACF,eAAD,CAAf,iBACC,QAAC,IAAD;AAAM,QAAA,MAAM,MAAZ;AAAA,+BACE,QAAC,WAAD;AAAa,UAAA,IAAI,EAAC,QAAlB;AAA2B,UAAA,EAAE,EAAC,sBAA9B;AAAqD,UAAA,IAAI,EAAC,sBAA1D;AAAiF,UAAA,MAAM,EAAC,IAAxF;AAAA,oBACGA,eAAe,CAACO,GAAhB,CAAoB,CAACC,MAAD,EAASC,KAAT,kBACnB;AAAQ,YAAA,KAAK,EAAEA,KAAf;AAAA,sBACGD;AADH,aAA2BC,KAA3B;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF,eAcE,QAAC,QAAD;AAAU,MAAA,SAAS,EAAC,OAApB;AAAA,gBACGL,OAAO,gBACN,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADM,GAEJF,eAAe,CAACI,MAAD,CAAf,gBACF,QAAC,GAAD;AAAA,kBACGA,MAAM,CAACC,GAAP,CAAW,CAAC;AAAEG,UAAAA,UAAF;AAAc,aAAGC;AAAjB,SAAD,EAA0BF,KAA1B,kBACV,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAY,UAAA,SAAS,EAAC,OAAtB;AAAA,iCACE,QAAC,YAAD;AAAc,YAAA,OAAO,EAAEH,MAAM,CAACM,MAAP,KAAkBH,KAAK,GAAG,CAAjD;AAAA,eAAwDE,IAAxD;AAAA,mCACE;AAAG,cAAA,SAAS,EAAC,gBAAb;AAA8B,cAAA,uBAAuB,EAAEV,YAAY,CAACS,UAAD;AAAnE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,WAAmCD,KAAnC;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADE,gBAWF,QAAC,KAAD;AAAO,QAAA,KAAK,EAAC,MAAb;AAAoB,QAAA,SAAS,EAAC,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdJ;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CAvCD;;GAAMN,M;UAC8BL,Y;;;KAD9BK,M;AAyCN,eAAeA,MAAf","sourcesContent":["import React from 'react';\nimport { Alert, Card, CardBody, Col, CustomInput, Form, Row } from 'reactstrap';\nimport EventSummary from '../event/EventSummary';\nimport Loader from '../common/Loader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport useFakeFetch from '../../hooks/useFakeFetch';\nimport rawEvents from '../../data/event/events';\nimport eventCategories from '../../data/event/eventCategories';\nimport createMarkup from '../../helpers/createMarkup';\nimport { isIterableArray } from '../../helpers/utils';\n\nconst Events = () => {\n  const { loading, data: events } = useFakeFetch(rawEvents);\n\n  return (\n    <Card>\n      <FalconCardHeader title=\"Events\">\n        {isIterableArray(eventCategories) && (\n          <Form inline>\n            <CustomInput type=\"select\" id=\"customSelectCategory\" name=\"customSelectCategory\" bsSize=\"sm\">\n              {eventCategories.map((option, index) => (\n                <option value={index} key={index}>\n                  {option}\n                </option>\n              ))}\n            </CustomInput>\n          </Form>\n        )}\n      </FalconCardHeader>\n      <CardBody className=\"fs--1\">\n        {loading ? (\n          <Loader />\n        ) : isIterableArray(events) ? (\n          <Row>\n            {events.map(({ additional, ...rest }, index) => (\n              <Col md={6} className=\"h-100\" key={index}>\n                <EventSummary divider={events.length !== index + 1} {...rest}>\n                  <p className=\"text-1000 mb-0\" dangerouslySetInnerHTML={createMarkup(additional)} />\n                </EventSummary>\n              </Col>\n            ))}\n          </Row>\n        ) : (\n          <Alert color=\"info\" className=\"mb-0\">\n            No events found!\n          </Alert>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default Events;\n"]},"metadata":{},"sourceType":"module"}