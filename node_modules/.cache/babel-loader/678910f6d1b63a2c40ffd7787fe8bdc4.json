{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/dashboard-alt/TotalOrder.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport { Badge, Card, CardBody, Col, Row } from 'reactstrap';\nimport Flex from '../common/Flex';\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\nimport echarts from 'echarts/lib/echarts';\nimport 'echarts/lib/chart/line';\nimport { getGrays, themeColors, rgbaColor, getPosition, numberFormatter } from '../../helpers/utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport AppContext from '../../context/Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getOption = (data, isDark) => {\n  const grays = getGrays(isDark);\n  return {\n    tooltip: {\n      triggerOn: 'mousemove',\n      trigger: 'axis',\n      padding: [7, 10],\n      formatter: '{b0}: {c0}',\n      backgroundColor: grays.white,\n      borderColor: grays['300'],\n      borderWidth: 1,\n      transitionDuration: 0,\n\n      position(pos, params, dom, rect, size) {\n        return getPosition(pos, params, dom, rect, size);\n      },\n\n      textStyle: {\n        color: themeColors.dark\n      }\n    },\n    xAxis: {\n      type: 'category',\n      data: ['Week 4', 'Week 5'],\n      boundaryGap: false,\n      splitLine: {\n        show: false\n      },\n      axisLine: {\n        show: false,\n        lineStyle: {\n          color: grays['300'],\n          type: 'dashed'\n        }\n      },\n      axisLabel: {\n        show: false\n      },\n      axisTick: {\n        show: false\n      },\n      axisPointer: {\n        type: 'none'\n      }\n    },\n    yAxis: {\n      type: 'value',\n      splitLine: {\n        show: false\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        show: false\n      },\n      axisTick: {\n        show: false\n      },\n      axisPointer: {\n        show: false\n      }\n    },\n    series: [{\n      type: 'line',\n      lineStyle: {\n        color: themeColors.primary,\n        width: 3\n      },\n      itemStyle: {\n        color: grays['100'],\n        borderColor: themeColors.primary,\n        borderWidth: 2\n      },\n      hoverAnimation: true,\n      data: data,\n      connectNulls: true,\n      smooth: 0.6,\n      smoothMonotone: 'x',\n      symbol: 'circle',\n      symbolSize: 8,\n      areaStyle: {\n        color: {\n          type: 'linear',\n          x: 0,\n          y: 0,\n          x2: 0,\n          y2: 1,\n          colorStops: [{\n            offset: 0,\n            color: rgbaColor(themeColors.primary, 0.25)\n          }, {\n            offset: 1,\n            color: rgbaColor(themeColors.primary, 0)\n          }]\n        }\n      }\n    }],\n    grid: {\n      bottom: '2%',\n      top: '0%',\n      right: '10px',\n      left: '10px'\n    }\n  };\n};\n\nconst TotalOrder = ({\n  data\n}) => {\n  _s();\n\n  const {\n    isDark\n  } = useContext(AppContext);\n  const total = data.reduce((total, currentValue) => total + currentValue, 0);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"h-md-100\",\n    children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n      className: \"pb-0\",\n      title: \"Total Order\",\n      light: false,\n      titleTag: \"h6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      tag: Flex,\n      align: \"end\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"flex-grow-1\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          className: \"align-self-end\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fs-4 font-weight-normal text-sans-serif text-700 line-height-1 mb-1\",\n            children: numberFormatter(total, 1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Badge, {\n            pill: true,\n            color: \"soft-info\",\n            className: \"fs--2\",\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: \"caret-up\",\n              className: \"mr-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this), \"13.6%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: \"auto\",\n          className: \"pl-0\",\n          children: /*#__PURE__*/_jsxDEV(ReactEchartsCore, {\n            echarts: echarts,\n            option: getOption(data, isDark),\n            style: {\n              width: '8.75rem',\n              minHeight: '5rem',\n              height: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TotalOrder, \"ZZPd8S4Q8+HbJqQU/UnuUPtUjgA=\");\n\n_c = TotalOrder;\nTotalOrder.propTypes = {\n  data: PropTypes.array.isRequired\n};\nexport default TotalOrder;\n\nvar _c;\n\n$RefreshReg$(_c, \"TotalOrder\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/dashboard-alt/TotalOrder.js"],"names":["React","useContext","PropTypes","FalconCardHeader","Badge","Card","CardBody","Col","Row","Flex","ReactEchartsCore","echarts","getGrays","themeColors","rgbaColor","getPosition","numberFormatter","FontAwesomeIcon","AppContext","getOption","data","isDark","grays","tooltip","triggerOn","trigger","padding","formatter","backgroundColor","white","borderColor","borderWidth","transitionDuration","position","pos","params","dom","rect","size","textStyle","color","dark","xAxis","type","boundaryGap","splitLine","show","axisLine","lineStyle","axisLabel","axisTick","axisPointer","yAxis","series","primary","width","itemStyle","hoverAnimation","connectNulls","smooth","smoothMonotone","symbol","symbolSize","areaStyle","x","y","x2","y2","colorStops","offset","grid","bottom","top","right","left","TotalOrder","total","reduce","currentValue","minHeight","height","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport { Badge, Card, CardBody, Col, Row } from 'reactstrap';\nimport Flex from '../common/Flex';\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\nimport echarts from 'echarts/lib/echarts';\nimport 'echarts/lib/chart/line';\nimport { getGrays, themeColors, rgbaColor, getPosition, numberFormatter } from '../../helpers/utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport AppContext from '../../context/Context';\n\nconst getOption = (data, isDark) => {\n  const grays = getGrays(isDark);\n  return {\n    tooltip: {\n      triggerOn: 'mousemove',\n      trigger: 'axis',\n      padding: [7, 10],\n      formatter: '{b0}: {c0}',\n      backgroundColor: grays.white,\n      borderColor: grays['300'],\n      borderWidth: 1,\n      transitionDuration: 0,\n      position(pos, params, dom, rect, size) {\n        return getPosition(pos, params, dom, rect, size);\n      },\n      textStyle: { color: themeColors.dark }\n    },\n    xAxis: {\n      type: 'category',\n      data: ['Week 4', 'Week 5'],\n      boundaryGap: false,\n      splitLine: { show: false },\n      axisLine: {\n        show: false,\n        lineStyle: {\n          color: grays['300'],\n          type: 'dashed'\n        }\n      },\n      axisLabel: { show: false },\n      axisTick: { show: false },\n      axisPointer: { type: 'none' }\n    },\n    yAxis: {\n      type: 'value',\n      splitLine: { show: false },\n      axisLine: { show: false },\n      axisLabel: { show: false },\n      axisTick: { show: false },\n      axisPointer: { show: false }\n    },\n    series: [\n      {\n        type: 'line',\n        lineStyle: {\n          color: themeColors.primary,\n          width: 3\n        },\n        itemStyle: {\n          color: grays['100'],\n          borderColor: themeColors.primary,\n          borderWidth: 2\n        },\n        hoverAnimation: true,\n        data: data,\n        connectNulls: true,\n        smooth: 0.6,\n        smoothMonotone: 'x',\n        symbol: 'circle',\n        symbolSize: 8,\n        areaStyle: {\n          color: {\n            type: 'linear',\n            x: 0,\n            y: 0,\n            x2: 0,\n            y2: 1,\n            colorStops: [\n              {\n                offset: 0,\n                color: rgbaColor(themeColors.primary, 0.25)\n              },\n              {\n                offset: 1,\n                color: rgbaColor(themeColors.primary, 0)\n              }\n            ]\n          }\n        }\n      }\n    ],\n    grid: { bottom: '2%', top: '0%', right: '10px', left: '10px' }\n  };\n};\n\nconst TotalOrder = ({ data }) => {\n  const { isDark } = useContext(AppContext);\n  const total = data.reduce((total, currentValue) => total + currentValue, 0);\n\n  return (\n    <Card className=\"h-md-100\">\n      <FalconCardHeader className=\"pb-0\" title=\"Total Order\" light={false} titleTag=\"h6\" />\n      <CardBody tag={Flex} align=\"end\">\n        <Row className=\"flex-grow-1\">\n          <Col className=\"align-self-end\">\n            <div className=\"fs-4 font-weight-normal text-sans-serif text-700 line-height-1 mb-1\">\n              {numberFormatter(total, 1)}\n            </div>\n            <Badge pill color=\"soft-info\" className=\"fs--2\">\n              <FontAwesomeIcon icon=\"caret-up\" className=\"mr-1\" />\n              13.6%\n            </Badge>\n          </Col>\n          <Col xs=\"auto\" className=\"pl-0\">\n            <ReactEchartsCore\n              echarts={echarts}\n              option={getOption(data, isDark)}\n              style={{ width: '8.75rem', minHeight: '5rem', height: '100%' }}\n            />\n          </Col>\n        </Row>\n      </CardBody>\n    </Card>\n  );\n};\n\nTotalOrder.propTypes = { data: PropTypes.array.isRequired };\n\nexport default TotalOrder;\n"]},"metadata":{},"sourceType":"module"}