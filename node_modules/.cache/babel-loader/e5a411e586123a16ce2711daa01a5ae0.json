{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/event/EventCustomField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, Col, CustomInput, Form, FormGroup, Input, Label, Row } from 'reactstrap';\nimport Datetime from 'react-datetime';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport { isIterableArray } from '../../helpers/utils';\nimport ButtonIcon from '../common/ButtonIcon';\nimport FormGroupSelect from '../common/FormGroupSelect';\nimport createMarkup from '../../helpers/createMarkup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\n\nconst CustomField = ({\n  name,\n  type,\n  options,\n  index\n}) => {\n  switch (type) {\n    case 'select':\n      return /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: `customField${index}`,\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomInput, {\n          type: \"select\",\n          id: `customField${index}`,\n          children: isIterableArray(options) && options.map((value, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: value,\n            dangerouslySetInnerHTML: createMarkup(value)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this);\n\n    case 'checkboxes':\n      return /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), options.map((option, key) => /*#__PURE__*/_jsxDEV(CustomInput, {\n          type: \"checkbox\",\n          id: `customField${index}${key}`,\n          label: option\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this);\n\n    case 'radio':\n      return /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), options.map((option, key) => /*#__PURE__*/_jsxDEV(CustomInput, {\n          type: \"radio\",\n          name: `customField${index}`,\n          id: `customField${index}${key}`,\n          label: option\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this);\n\n    case 'textarea':\n      return /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: `customField${index}`,\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"textarea\",\n          rows: 5,\n          id: `customField${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this);\n\n    case 'date':\n      return /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: `customField${index}`,\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Datetime, {\n          timeFormat: false,\n          bsSize: \"sm\",\n          id: `customField${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this);\n\n    case 'time':\n      return /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: `customField${index}`,\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Datetime, {\n          dateFormat: false,\n          bsSize: \"sm\",\n          id: `customField${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this);\n\n    case 'file':\n      return /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: `customField${index}`,\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomInput, {\n          type: \"file\",\n          id: `customField${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: `customField${index}`,\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: `customField${index}`,\n          type: type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this);\n  }\n};\n\n_c = CustomField;\nCustomField.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  options: PropTypes.array\n};\n\nconst EventCustomField = () => {\n  _s();\n\n  // State\n  const [name, setName] = useState('');\n  const [type, setType] = useState('text');\n  const [options, setOptions] = useState('');\n  const [hasOptions, setHasOptions] = useState(false);\n  const [customFields, setCustomFields] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const types = [{\n    label: 'Text',\n    value: 'text'\n  }, {\n    label: 'Select',\n    value: 'select'\n  }, {\n    label: 'Checkboxes',\n    value: 'checkboxes'\n  }, {\n    label: 'Radio',\n    value: 'radio'\n  }, {\n    label: 'Textarea',\n    value: 'textarea'\n  }, {\n    label: 'Date',\n    value: 'date'\n  }, {\n    label: 'Time',\n    value: 'time'\n  }, {\n    label: 'Url',\n    value: 'url'\n  }, {\n    label: 'Email',\n    value: 'email'\n  }, {\n    label: 'Password',\n    value: 'password'\n  }, {\n    label: 'Number',\n    value: 'number'\n  }, {\n    label: 'File',\n    value: 'file'\n  }]; // Handler\n\n  const validateCustomFieldOptions = () => !hasOptions || hasOptions && options.length;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (hasOptions) {\n      const updatedOptions = options.split(',');\n      setCustomFields([...customFields, {\n        name,\n        type,\n        options: updatedOptions\n      }]);\n    } else {\n      setCustomFields([...customFields, {\n        name,\n        type\n      }]);\n    }\n\n    setName('');\n    setType('text');\n    setOptions('');\n    setHasOptions(false);\n    setDisabled(true);\n  };\n\n  useEffect(() => {\n    setHasOptions(type === 'select' || type === 'checkboxes' || type === 'radio');\n  }, [type]);\n  useEffect(() => {\n    setDisabled(!(name.length && validateCustomFieldOptions())); // eslint-disable-next-line\n  }, [name, options, type]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"mb-3 mb-lg-0\",\n    children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n      title: \"Custom Field\",\n      light: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), isIterableArray(customFields) && /*#__PURE__*/_jsxDEV(CardBody, {\n      className: \"bg-200\",\n      children: customFields.map((customField, index) => /*#__PURE__*/_createElement(CustomField, { ...customField,\n        index: index,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      tag: Form,\n      className: \"bg-light\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        form: true,\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          sm: true,\n          children: /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"field-name\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              value: name,\n              onChange: ({\n                target\n              }) => setName(target.value),\n              bsSize: \"sm\",\n              id: \"field-name\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: true,\n          children: /*#__PURE__*/_jsxDEV(FormGroupSelect, {\n            loading: false,\n            label: \"Type\",\n            options: types,\n            value: type,\n            type: \"select\",\n            onChange: ({\n              target\n            }) => setType(target.value),\n            bsSize: \"sm\",\n            id: \"field-type\",\n            placeholder: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), hasOptions && /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"field-options\",\n          children: \"Field Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          value: options,\n          onChange: ({\n            target\n          }) => setOptions(target.value),\n          type: \"textarea\",\n          id: \"field-options\",\n          placeholder: \"Field Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"text-warning\",\n          children: \"*Separate your options with comma\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ButtonIcon, {\n        color: \"falcon-default\",\n        size: \"sm\",\n        icon: \"plus\",\n        disabled: disabled,\n        children: \"Add Field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EventCustomField, \"KmJTbVVvln5ZfT20iuTMcRj23hU=\");\n\n_c2 = EventCustomField;\nexport default EventCustomField;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomField\");\n$RefreshReg$(_c2, \"EventCustomField\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/event/EventCustomField.js"],"names":["React","useEffect","useState","PropTypes","Card","CardBody","Col","CustomInput","Form","FormGroup","Input","Label","Row","Datetime","FalconCardHeader","isIterableArray","ButtonIcon","FormGroupSelect","createMarkup","CustomField","name","type","options","index","map","value","i","option","key","propTypes","string","isRequired","number","array","EventCustomField","setName","setType","setOptions","hasOptions","setHasOptions","customFields","setCustomFields","disabled","setDisabled","types","label","validateCustomFieldOptions","length","handleSubmit","e","preventDefault","updatedOptions","split","customField","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, Col, CustomInput, Form, FormGroup, Input, Label, Row } from 'reactstrap';\nimport Datetime from 'react-datetime';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport { isIterableArray } from '../../helpers/utils';\nimport ButtonIcon from '../common/ButtonIcon';\nimport FormGroupSelect from '../common/FormGroupSelect';\nimport createMarkup from '../../helpers/createMarkup';\n\nconst CustomField = ({ name, type, options, index }) => {\n  switch (type) {\n    case 'select':\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <CustomInput type=\"select\" id={`customField${index}`}>\n            {isIterableArray(options) &&\n              options.map((value, i) => <option value={value} key={i} dangerouslySetInnerHTML={createMarkup(value)} />)}\n          </CustomInput>\n        </FormGroup>\n      );\n\n    case 'checkboxes':\n      return (\n        <FormGroup>\n          <Label>{name}</Label>\n          {options.map((option, key) => (\n            <CustomInput type=\"checkbox\" id={`customField${index}${key}`} label={option} key={key} />\n          ))}\n        </FormGroup>\n      );\n\n    case 'radio':\n      return (\n        <FormGroup>\n          <Label>{name}</Label>\n          {options.map((option, key) => (\n            <CustomInput\n              type=\"radio\"\n              name={`customField${index}`}\n              id={`customField${index}${key}`}\n              label={option}\n              key={key}\n            />\n          ))}\n        </FormGroup>\n      );\n\n    case 'textarea':\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <Input type=\"textarea\" rows={5} id={`customField${index}`} />\n        </FormGroup>\n      );\n\n    case 'date':\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <Datetime timeFormat={false} bsSize=\"sm\" id={`customField${index}`} />\n        </FormGroup>\n      );\n\n    case 'time':\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <Datetime dateFormat={false} bsSize=\"sm\" id={`customField${index}`} />\n        </FormGroup>\n      );\n\n    case 'file':\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <CustomInput type=\"file\" id={`customField${index}`} />\n        </FormGroup>\n      );\n\n    default:\n      return (\n        <FormGroup>\n          <Label for={`customField${index}`}>{name}</Label>\n          <Input id={`customField${index}`} type={type} />\n        </FormGroup>\n      );\n  }\n};\n\nCustomField.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  options: PropTypes.array\n};\n\nconst EventCustomField = () => {\n  // State\n  const [name, setName] = useState('');\n  const [type, setType] = useState('text');\n  const [options, setOptions] = useState('');\n  const [hasOptions, setHasOptions] = useState(false);\n  const [customFields, setCustomFields] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n\n  const types = [\n    { label: 'Text', value: 'text' },\n    { label: 'Select', value: 'select' },\n    { label: 'Checkboxes', value: 'checkboxes' },\n    { label: 'Radio', value: 'radio' },\n    { label: 'Textarea', value: 'textarea' },\n    { label: 'Date', value: 'date' },\n    { label: 'Time', value: 'time' },\n    { label: 'Url', value: 'url' },\n    { label: 'Email', value: 'email' },\n    { label: 'Password', value: 'password' },\n    { label: 'Number', value: 'number' },\n    { label: 'File', value: 'file' }\n  ];\n\n  // Handler\n  const validateCustomFieldOptions = () => !hasOptions || (hasOptions && options.length);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (hasOptions) {\n      const updatedOptions = options.split(',');\n      setCustomFields([...customFields, { name, type, options: updatedOptions }]);\n    } else {\n      setCustomFields([...customFields, { name, type }]);\n    }\n\n    setName('');\n    setType('text');\n    setOptions('');\n    setHasOptions(false);\n    setDisabled(true);\n  };\n\n  useEffect(() => {\n    setHasOptions(type === 'select' || type === 'checkboxes' || type === 'radio');\n  }, [type]);\n\n  useEffect(() => {\n    setDisabled(!(name.length && validateCustomFieldOptions()));\n    // eslint-disable-next-line\n  }, [name, options, type]);\n\n  return (\n    <Card className=\"mb-3 mb-lg-0\">\n      <FalconCardHeader title=\"Custom Field\" light={false} />\n      {isIterableArray(customFields) && (\n        <CardBody className=\"bg-200\">\n          {customFields.map((customField, index) => (\n            <CustomField {...customField} index={index} key={index} />\n          ))}\n        </CardBody>\n      )}\n      <CardBody tag={Form} className=\"bg-light\" onSubmit={handleSubmit}>\n        <Row form>\n          <Col sm>\n            <FormGroup>\n              <Label for=\"field-name\">Name</Label>\n              <Input\n                value={name}\n                onChange={({ target }) => setName(target.value)}\n                bsSize=\"sm\"\n                id=\"field-name\"\n                placeholder=\"Name\"\n              />\n            </FormGroup>\n          </Col>\n          <Col sm>\n            <FormGroupSelect\n              loading={false}\n              label=\"Type\"\n              options={types}\n              value={type}\n              type=\"select\"\n              onChange={({ target }) => setType(target.value)}\n              bsSize=\"sm\"\n              id=\"field-type\"\n              placeholder=\"Name\"\n            />\n          </Col>\n        </Row>\n        {hasOptions && (\n          <FormGroup>\n            <Label for=\"field-options\">Field Options</Label>\n            <Input\n              value={options}\n              onChange={({ target }) => setOptions(target.value)}\n              type=\"textarea\"\n              id=\"field-options\"\n              placeholder=\"Field Options\"\n            />\n            <small className=\"text-warning\">*Separate your options with comma</small>\n          </FormGroup>\n        )}\n        <ButtonIcon color=\"falcon-default\" size=\"sm\" icon=\"plus\" disabled={disabled}>\n          Add Field\n        </ButtonIcon>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EventCustomField;\n"]},"metadata":{},"sourceType":"module"}