{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/chat/content/Message.js\";\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Media, Row, Col } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Avatar from '../../common/Avatar';\nimport FalconLightBox from '../../common/FalconLightBox';\nimport LightBoxGallery from '../../common/LightBoxGallery';\nimport Flex from '../../common/Flex';\nimport ChatMessageOptions from './ChatMessageOptions';\nimport { isIterableArray } from '../../../helpers/utils';\nimport { ChatContext } from '../../../context/Context';\nimport classNames from 'classnames';\n\nconst Message = ({\n  message,\n  senderUserId,\n  status,\n  time,\n  isGroup\n}) => {\n  const {\n    users\n  } = useContext(ChatContext);\n  const user = users.find(({\n    id\n  }) => id === senderUserId);\n  const name = user === null || user === void 0 ? void 0 : user.name.split(' ')[0];\n  const isLeft = senderUserId !== 3;\n  return /*#__PURE__*/React.createElement(Media, {\n    className: classNames('p-3', {\n      'd-block': !isLeft\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, isLeft && /*#__PURE__*/React.createElement(Avatar, {\n    size: \"l\",\n    className: \"mr-2\",\n    src: user.avatarSrc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(Media, {\n    body: true,\n    className: classNames({\n      'd-flex  justify-content-end': !isLeft\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames('w-xxl-75', {\n      'w-100': !isLeft\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Flex, {\n    align: \"center\",\n    className: classNames('hover-actions-trigger', {\n      'justify-content-end': !isLeft\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, !isLeft && /*#__PURE__*/React.createElement(ChatMessageOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }), isIterableArray(message === null || message === void 0 ? void 0 : message.attachment) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-message chat-gallery\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  }, message.text && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-0\",\n    dangerouslySetInnerHTML: {\n      __html: message.text ? message.text : message\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(LightBoxGallery, {\n    images: message.attachment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, openImgIndex => /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"mx-n1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, message.attachment.map((img, index) => {\n    return /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      md: 4,\n      className: \"px-1\",\n      style: {\n        minWidth: 50\n      },\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"img-fluid rounded mb-2 cursor-pointer\",\n      src: img,\n      alt: \"\",\n      onClick: () => openImgIndex(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 29\n      }\n    }));\n  })))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames('p-2 rounded-soft chat-message', {\n      'bg-200': isLeft,\n      'bg-primary text-white': !isLeft\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, (message || message.text) && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-0\",\n    dangerouslySetInnerHTML: {\n      __html: message.text ? message.text : message\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }), message.attachment && /*#__PURE__*/React.createElement(FalconLightBox, {\n    imgSrc: message.attachment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: message.attachment,\n    className: \"img-fluid rounded\",\n    width: 150,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 23\n    }\n  })))), isLeft && /*#__PURE__*/React.createElement(ChatMessageOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 24\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames('text-400 fs--2 mt-1', {\n      'text-right': !isLeft\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, isLeft && isGroup && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-weight-semi-bold mr-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 35\n    }\n  }, name), time.hour, !isLeft && !!message && !!status && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: classNames({\n      check: status === 'seen' || status === 'sent',\n      'check-double': status === 'delivered'\n    }),\n    transform: \"shrink-5 down-4\",\n    className: classNames('ml-2', {\n      'text-success': status === 'seen'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  })))));\n};\n\nMessage.propTypes = {\n  message: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  senderUserId: PropTypes.number.isRequired,\n  status: PropTypes.string,\n  time: PropTypes.object.isRequired,\n  isGroup: PropTypes.bool.isRequired\n};\nMessage.defaultProps = {\n  status: ''\n};\nexport default Message;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/chat/content/Message.js"],"names":["React","useContext","PropTypes","Media","Row","Col","FontAwesomeIcon","Avatar","FalconLightBox","LightBoxGallery","Flex","ChatMessageOptions","isIterableArray","ChatContext","classNames","Message","message","senderUserId","status","time","isGroup","users","user","find","id","name","split","isLeft","avatarSrc","attachment","text","__html","openImgIndex","map","img","index","minWidth","hour","check","propTypes","oneOfType","string","object","number","isRequired","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Media, Row, Col } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Avatar from '../../common/Avatar';\nimport FalconLightBox from '../../common/FalconLightBox';\nimport LightBoxGallery from '../../common/LightBoxGallery';\nimport Flex from '../../common/Flex';\nimport ChatMessageOptions from './ChatMessageOptions';\nimport { isIterableArray } from '../../../helpers/utils';\nimport { ChatContext } from '../../../context/Context';\nimport classNames from 'classnames';\n\nconst Message = ({ message, senderUserId, status, time, isGroup }) => {\n  const { users } = useContext(ChatContext);\n  const user = users.find(({ id }) => id === senderUserId);\n  const name = user?.name.split(' ')[0];\n  const isLeft = senderUserId !== 3;\n\n  return (\n    <Media className={classNames('p-3', { 'd-block': !isLeft })}>\n      {isLeft && <Avatar size=\"l\" className=\"mr-2\" src={user.avatarSrc} />}\n      <Media body className={classNames({ 'd-flex  justify-content-end': !isLeft })}>\n        <div\n          className={classNames('w-xxl-75', {\n            'w-100': !isLeft\n          })}\n        >\n          <Flex\n            align=\"center\"\n            className={classNames('hover-actions-trigger', {\n              'justify-content-end': !isLeft\n            })}\n          >\n            {!isLeft && <ChatMessageOptions />}\n            {isIterableArray(message?.attachment) ? (\n              <div className=\"chat-message chat-gallery\">\n                {message.text && (\n                  <p className=\"mb-0\" dangerouslySetInnerHTML={{ __html: message.text ? message.text : message }} />\n                )}\n                <LightBoxGallery images={message.attachment}>\n                  {openImgIndex => (\n                    <Row noGutters className=\"mx-n1\">\n                      {message.attachment.map((img, index) => {\n                        return (\n                          <Col xs={6} md={4} className=\"px-1\" style={{ minWidth: 50 }} key={index}>\n                            <img\n                              className=\"img-fluid rounded mb-2 cursor-pointer\"\n                              src={img}\n                              alt=\"\"\n                              onClick={() => openImgIndex(index)}\n                            />\n                          </Col>\n                        );\n                      })}\n                    </Row>\n                  )}\n                </LightBoxGallery>\n              </div>\n            ) : (\n              <>\n                <div\n                  className={classNames('p-2 rounded-soft chat-message', {\n                    'bg-200': isLeft,\n                    'bg-primary text-white': !isLeft\n                  })}\n                >\n                  {(message || message.text) && (\n                    <p className=\"mb-0\" dangerouslySetInnerHTML={{ __html: message.text ? message.text : message }} />\n                  )}\n                  {message.attachment && (\n                    <FalconLightBox imgSrc={message.attachment}>\n                      <img src={message.attachment} className=\"img-fluid rounded\" width={150} alt=\"\" />\n                    </FalconLightBox>\n                  )}\n                </div>\n              </>\n            )}\n            {isLeft && <ChatMessageOptions />}\n          </Flex>\n          <div\n            className={classNames('text-400 fs--2 mt-1', {\n              'text-right': !isLeft\n            })}\n          >\n            {isLeft && isGroup && <span className=\"font-weight-semi-bold mr-2\">{name}</span>}\n            {time.hour}\n            {!isLeft && !!message && !!status && (\n              <FontAwesomeIcon\n                icon={classNames({\n                  check: status === 'seen' || status === 'sent',\n                  'check-double': status === 'delivered'\n                })}\n                transform=\"shrink-5 down-4\"\n                className={classNames('ml-2', {\n                  'text-success': status === 'seen'\n                })}\n              />\n            )}\n          </div>\n        </div>\n      </Media>\n    </Media>\n  );\n};\nMessage.propTypes = {\n  message: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  senderUserId: PropTypes.number.isRequired,\n  status: PropTypes.string,\n  time: PropTypes.object.isRequired,\n  isGroup: PropTypes.bool.isRequired\n};\n\nMessage.defaultProps = { status: '' };\n\nexport default Message;\n"]},"metadata":{},"sourceType":"module"}