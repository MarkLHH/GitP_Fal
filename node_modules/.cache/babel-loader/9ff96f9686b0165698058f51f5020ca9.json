{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/components/bootstrap-components/Popovers.js\";\nimport React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst popoversExampleCode = `function popoversExample() {\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\n  const [isOpenRight, setIsOpenRight] = useState(false);\n  const [isOpenTop, setIsOpenTop] = useState(false);\n  const [isOpenBottom, setIsOpenBottom] = useState(false);\n  \n  return(\n    <Fragment>\n      <Button id=\"Popover3\" className=\"mr-2\" type=\"button\">\n        Popover on top\n      </Button>\n      <Popover \n        placement=\"top\" \n        isOpen={isOpenTop} \n        target=\"Popover3\" \n        toggle={() => setIsOpenTop(!isOpenTop)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n\n      <Button id=\"Popover4\" className=\"mr-2\" type=\"button\">\n        Popover on Bottom\n      </Button>\n      <Popover\n        placement=\"bottom\"\n        isOpen={isOpenBottom}\n        target=\"Popover4\"\n        toggle={() => setIsOpenBottom(!isOpenBottom)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n      \n      <Button id=\"Popover1\" className=\"mr-2\" type=\"button\">\n        Popover on left\n      </Button>\n      \n      <Popover \n        placement=\"left\" \n        isOpen={isOpenLeft} \n        target=\"Popover1\" \n        toggle={() => setIsOpenLeft(!isOpenLeft)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n\n      <Button id=\"Popover2\" type=\"button\">\n        Popover on right\n      </Button>\n      <Popover \n        placement=\"right\" \n        isOpen={isOpenRight} \n        target=\"Popover2\" \n        toggle={() => setIsOpenRight(!isOpenRight)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n     </Fragment>\n  );\n}`;\nconst propertiesCode = `Popover.propTypes = {\n  // space separated list of triggers (e.g. \"click hover focus\")\n  trigger: PropTypes.string,\n  // boolean to control the state of the popover\n  isOpen:  PropTypes.bool,\n  // callback for toggling isOpen in the controlling component\n  toggle:  PropTypes.func,\n  // boundaries for popper, can be scrollParent, window, viewport, or any DOM element\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\n  target:  PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    DOMElement, // instanceof Element (https://developer.mozilla.org/en-US/docs/Web/API/Element)\n  ]).isRequired,\n  // Where to inject the popper DOM node, default to body\n  container: PropTypes.oneOfType([PropTypes.string, PropTypes.func, DOMElement]),\n  className: PropTypes.string,\n  // Apply class to the inner-popover\n  innerClassName: PropTypes.string,\n  disabled: PropTypes.bool,\n  hideArrow: PropTypes.bool,\n  placementPrefix: PropTypes.string,\n  delay: PropTypes.oneOfType([\n    PropTypes.shape({ show: PropTypes.number, hide: PropTypes.number }),\n    PropTypes.number,\n  ]),\n  placement: PropTypes.oneOf([\n    'auto',\n    'auto-start',\n    'auto-end',\n    'top',\n    'top-start',\n    'top-end',\n    'right',\n    'right-start',\n    'right-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'left',\n    'left-start',\n    'left-end',\n  ]),\n  // Custom modifiers that are passed to Popper.js, see https://popper.js.org/popper-documentation.html#modifiers\n  modifiers: PropTypes.object,\n  offset: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n\n  // Whether to show/hide the popover with a fade effect\n  // (default: true)\n  fade: PropTypes.bool,\n\n  // Whether to flip the direction of the popover if too close to\n  // the container edge\n  // (default: true)\n  flip: PropTypes.bool,\n}`;\n\nconst Popovers = () => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      title: \"Popovers\",\n      description: \"Documentation and examples for showing pagination to indicate a series of related content exists across multiple pages.\",\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        tag: \"a\",\n        href: \"https://reactstrap.github.io/components/buttons\",\n        target: \"_blank\",\n        color: \"link\",\n        size: \"sm\",\n        className: \"pl-0\",\n        children: [\"Popovers on reactstrap\", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: \"chevron-right\",\n          className: \"ml-1 fs--2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n        title: \"Examples\",\n        light: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        className: \"bg-light\",\n        children: /*#__PURE__*/_jsxDEV(FalconEditor, {\n          code: popoversExampleCode,\n          language: \"jsx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(FalconCardHeader, {\n        title: \"Properties\",\n        light: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        className: \"bg-light\",\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"bg-dark d-block p-2\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"text-300\",\n            children: propertiesCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Popovers;\nexport default Popovers;\n\nvar _c;\n\n$RefreshReg$(_c, \"Popovers\");","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/bootstrap-components/Popovers.js"],"names":["React","Fragment","Button","Card","CardBody","FontAwesomeIcon","PageHeader","FalconCardHeader","FalconEditor","popoversExampleCode","propertiesCode","Popovers"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,QAAuC,YAAvC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;AAEA,MAAMC,mBAAmB,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EA9DA;AAgEA,MAAMC,cAAc,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EA1DA;;AA4DA,MAAMC,QAAQ,GAAG,MAAM;AACrB,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,KAAK,EAAC,UADR;AAEE,MAAA,WAAW,EAAC,yHAFd;AAGE,MAAA,SAAS,EAAC,MAHZ;AAAA,6BAKE,QAAC,MAAD;AACE,QAAA,GAAG,EAAC,GADN;AAEE,QAAA,IAAI,EAAC,iDAFP;AAGE,QAAA,MAAM,EAAC,QAHT;AAIE,QAAA,KAAK,EAAC,MAJR;AAKE,QAAA,IAAI,EAAC,IALP;AAME,QAAA,SAAS,EAAC,MANZ;AAAA,0DASE,QAAC,eAAD;AAAiB,UAAA,IAAI,EAAC,eAAtB;AAAsC,UAAA,SAAS,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,YADF,eAkBE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,8BACE,QAAC,gBAAD;AAAkB,QAAA,KAAK,EAAC,UAAxB;AAAmC,QAAA,KAAK,EAAE;AAA1C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAU,QAAA,SAAS,EAAC,UAApB;AAAA,+BACE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAEF,mBAApB;AAAyC,UAAA,QAAQ,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF,eAwBE,QAAC,IAAD;AAAA,8BACE,QAAC,gBAAD;AAAkB,QAAA,KAAK,EAAC,YAAxB;AAAqC,QAAA,KAAK,EAAE;AAA5C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAU,QAAA,SAAS,EAAC,UAApB;AAAA,+BACE;AAAM,UAAA,SAAS,EAAC,qBAAhB;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,sBAA2BC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CApCD;;KAAMC,Q;AAsCN,eAAeA,QAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\n\nconst popoversExampleCode = `function popoversExample() {\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\n  const [isOpenRight, setIsOpenRight] = useState(false);\n  const [isOpenTop, setIsOpenTop] = useState(false);\n  const [isOpenBottom, setIsOpenBottom] = useState(false);\n  \n  return(\n    <Fragment>\n      <Button id=\"Popover3\" className=\"mr-2\" type=\"button\">\n        Popover on top\n      </Button>\n      <Popover \n        placement=\"top\" \n        isOpen={isOpenTop} \n        target=\"Popover3\" \n        toggle={() => setIsOpenTop(!isOpenTop)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n\n      <Button id=\"Popover4\" className=\"mr-2\" type=\"button\">\n        Popover on Bottom\n      </Button>\n      <Popover\n        placement=\"bottom\"\n        isOpen={isOpenBottom}\n        target=\"Popover4\"\n        toggle={() => setIsOpenBottom(!isOpenBottom)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n      \n      <Button id=\"Popover1\" className=\"mr-2\" type=\"button\">\n        Popover on left\n      </Button>\n      \n      <Popover \n        placement=\"left\" \n        isOpen={isOpenLeft} \n        target=\"Popover1\" \n        toggle={() => setIsOpenLeft(!isOpenLeft)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n\n      <Button id=\"Popover2\" type=\"button\">\n        Popover on right\n      </Button>\n      <Popover \n        placement=\"right\" \n        isOpen={isOpenRight} \n        target=\"Popover2\" \n        toggle={() => setIsOpenRight(!isOpenRight)}\n      >\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</PopoverBody>\n      </Popover>\n     </Fragment>\n  );\n}`;\n\nconst propertiesCode = `Popover.propTypes = {\n  // space separated list of triggers (e.g. \"click hover focus\")\n  trigger: PropTypes.string,\n  // boolean to control the state of the popover\n  isOpen:  PropTypes.bool,\n  // callback for toggling isOpen in the controlling component\n  toggle:  PropTypes.func,\n  // boundaries for popper, can be scrollParent, window, viewport, or any DOM element\n  boundariesElement: PropTypes.oneOfType([PropTypes.string, DOMElement]),\n  target:  PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n    DOMElement, // instanceof Element (https://developer.mozilla.org/en-US/docs/Web/API/Element)\n  ]).isRequired,\n  // Where to inject the popper DOM node, default to body\n  container: PropTypes.oneOfType([PropTypes.string, PropTypes.func, DOMElement]),\n  className: PropTypes.string,\n  // Apply class to the inner-popover\n  innerClassName: PropTypes.string,\n  disabled: PropTypes.bool,\n  hideArrow: PropTypes.bool,\n  placementPrefix: PropTypes.string,\n  delay: PropTypes.oneOfType([\n    PropTypes.shape({ show: PropTypes.number, hide: PropTypes.number }),\n    PropTypes.number,\n  ]),\n  placement: PropTypes.oneOf([\n    'auto',\n    'auto-start',\n    'auto-end',\n    'top',\n    'top-start',\n    'top-end',\n    'right',\n    'right-start',\n    'right-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'left',\n    'left-start',\n    'left-end',\n  ]),\n  // Custom modifiers that are passed to Popper.js, see https://popper.js.org/popper-documentation.html#modifiers\n  modifiers: PropTypes.object,\n  offset: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n\n  // Whether to show/hide the popover with a fade effect\n  // (default: true)\n  fade: PropTypes.bool,\n\n  // Whether to flip the direction of the popover if too close to\n  // the container edge\n  // (default: true)\n  flip: PropTypes.bool,\n}`;\n\nconst Popovers = () => {\n  return (\n    <Fragment>\n      <PageHeader\n        title=\"Popovers\"\n        description=\"Documentation and examples for showing pagination to indicate a series of related content exists across multiple pages.\"\n        className=\"mb-3\"\n      >\n        <Button\n          tag=\"a\"\n          href=\"https://reactstrap.github.io/components/buttons\"\n          target=\"_blank\"\n          color=\"link\"\n          size=\"sm\"\n          className=\"pl-0\"\n        >\n          Popovers on reactstrap\n          <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n        </Button>\n      </PageHeader>\n      <Card className=\"mb-3\">\n        <FalconCardHeader title=\"Examples\" light={false} />\n        <CardBody className=\"bg-light\">\n          <FalconEditor code={popoversExampleCode} language=\"jsx\" />\n        </CardBody>\n      </Card>\n      <Card>\n        <FalconCardHeader title=\"Properties\" light={false} />\n        <CardBody className=\"bg-light\">\n          <code className=\"bg-dark d-block p-2\">\n            <pre className=\"text-300\">{propertiesCode}</pre>\n          </code>\n        </CardBody>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default Popovers;\n"]},"metadata":{},"sourceType":"module"}