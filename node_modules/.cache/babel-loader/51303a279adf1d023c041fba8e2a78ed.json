{"ast":null,"code":"var _jsxFileName = \"/workspace/GitP_Fal/src/hoc/withRedirect.js\";\nimport React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst withRedirect = OriginalComponent => {\n  var _s = $RefreshSig$();\n\n  const UpdatedComponent = props => {\n    _s();\n\n    // State\n    const [redirect, setRedirect] = useState(false);\n    const [redirectUrl, setRedirectUrl] = useState('/');\n\n    if (redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: redirectUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(OriginalComponent, {\n      setRedirect: setRedirect,\n      setRedirectUrl: setRedirectUrl,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s(UpdatedComponent, \"btPhpMJeq1TbRx7NSqBesORofcM=\");\n\n  return UpdatedComponent;\n};\n\nexport default withRedirect;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/hoc/withRedirect.js"],"names":["React","useState","Redirect","withRedirect","OriginalComponent","UpdatedComponent","props","redirect","setRedirect","redirectUrl","setRedirectUrl"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,kBAAzB;;;AAEA,MAAMC,YAAY,GAAGC,iBAAiB,IAAI;AAAA;;AACxC,QAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAAA;;AAChC;AACA,UAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,UAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,GAAD,CAA9C;;AAEA,QAAIM,QAAJ,EAAc;AACZ,0BAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAEE;AAAd;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,wBAAO,QAAC,iBAAD;AAAmB,MAAA,WAAW,EAAED,WAAhC;AAA6C,MAAA,cAAc,EAAEE,cAA7D;AAAA,SAAiFJ;AAAjF;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAVD;;AADwC,KAClCD,gBADkC;;AAaxC,SAAOA,gBAAP;AACD,CAdD;;AAgBA,eAAeF,YAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst withRedirect = OriginalComponent => {\n  const UpdatedComponent = props => {\n    // State\n    const [redirect, setRedirect] = useState(false);\n    const [redirectUrl, setRedirectUrl] = useState('/');\n\n    if (redirect) {\n      return <Redirect to={redirectUrl} />;\n    }\n\n    return <OriginalComponent setRedirect={setRedirect} setRedirectUrl={setRedirectUrl} {...props} />;\n  };\n\n  return UpdatedComponent;\n};\n\nexport default withRedirect;\n"]},"metadata":{},"sourceType":"module"}