{"ast":null,"code":"import React,{Fragment}from'react';import{Button,Card,CardBody}from'reactstrap';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import PageHeader from'../common/PageHeader';import FalconCardHeader from'../common/FalconCardHeader';import FalconEditor from'../common/FalconEditor';import Flex from'../common/Flex';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var dropdownCode=\"function dropdownExample() {\\n  const [isOpen, setIsOpen] = useState(false);\\n  \\n  return (\\n    <Dropdown isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\\n      <DropdownToggle caret className=\\\"btn btn-falcon-default\\\">\\n        Dropdown button\\n      </DropdownToggle>\\n      <DropdownMenu>\\n        <DropdownItem header>Header</DropdownItem>\\n        <DropdownItem>Some Action</DropdownItem>\\n        <DropdownItem disabled>Action (disabled)</DropdownItem>\\n        <DropdownItem divider />\\n        <DropdownItem>Foo Action</DropdownItem>\\n        <DropdownItem>Bar Action</DropdownItem>\\n        <DropdownItem>Quo Action</DropdownItem>\\n      </DropdownMenu>\\n    </Dropdown>\\n  );\\n}\";var dropdownAlignmentExample=\"function dropdownAlignmentExample() {\\n  const [dropdownOpen, setDropdownOpen] = useState(false);\\n  \\n  return (\\n    <Dropdown isOpen={dropdownOpen} toggle={() => setDropdownOpen(!dropdownOpen)}>\\n      <DropdownToggle className=\\\"btn btn-falcon-default\\\" caret>\\n         This dropdown's menu is aligned\\n      </DropdownToggle>\\n      <DropdownMenu right>\\n        <DropdownItem header>Header</DropdownItem>\\n        <DropdownItem disabled>Action</DropdownItem>\\n        <DropdownItem>Another Action</DropdownItem>\\n        <DropdownItem divider/>\\n        <DropdownItem>Another Action</DropdownItem>\\n      </DropdownMenu>\\n    </Dropdown>\\n  );\\n}\";var dropdownSizingCode=\"function dropdownSizingExample() {\\n  const [isOpenOne, setIsOpenOne] = useState(false);\\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\\n  const [isOpenThree, setIsOpenThree] = useState(false);\\n  \\n  return (\\n    <Fragment>\\n      <Dropdown group isOpen={isOpenOne} toggle={() => setIsOpenOne(!isOpenOne)}>\\n        <DropdownToggle caret size=\\\"lg\\\" className=\\\"btn btn-falcon-default mb-2\\\">\\n          Dropdown\\n        </DropdownToggle>\\n        <DropdownMenu>\\n          <DropdownItem header>Header</DropdownItem>\\n          <DropdownItem>Some Action</DropdownItem>\\n        </DropdownMenu>\\n      </Dropdown>\\n      <Dropdown isOpen={isOpenTwo} toggle={() => setIsOpenTwo(!isOpenTwo)}>\\n        <DropdownToggle caret className=\\\"btn btn-falcon-default mb-2\\\">\\n          Dropdown\\n        </DropdownToggle>\\n        <DropdownMenu>\\n          <DropdownItem header>Header</DropdownItem>\\n          <DropdownItem>Some Action</DropdownItem>\\n        </DropdownMenu>\\n      </Dropdown>\\n      <Dropdown isOpen={isOpenThree} toggle={() => setIsOpenThree(!isOpenThree)}>\\n        <DropdownToggle caret size=\\\"sm\\\" className=\\\"btn btn-falcon-default\\\">\\n          Dropdown\\n        </DropdownToggle>\\n        <DropdownMenu>\\n          <DropdownItem header>Header</DropdownItem>\\n          <DropdownItem>Some Action</DropdownItem>\\n        </DropdownMenu>\\n      </Dropdown>\\n    </Fragment>\\n  );\\n}\";var dropdownDirectionCode=\"function dropdownDirectionExample() {\\n  const [isOpenUp, setIsOpenUp] = useState(false);\\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\\n  const [isOpenRight, setIsOpenRight] = useState(false);\\n  \\n  return (\\n    <Flex justify=\\\"between\\\">\\n      <Dropdown direction=\\\"right\\\" isOpen={isOpenRight} toggle={() => setIsOpenRight(!isOpenRight)}>\\n        <DropdownToggle caret className=\\\"btn btn-falcon-default\\\">\\n          Dropright\\n        </DropdownToggle>\\n        <DropdownMenu>\\n          <DropdownItem header>Header</DropdownItem>\\n          <DropdownItem>Some Action</DropdownItem>\\n        </DropdownMenu>\\n       </Dropdown>\\n      <Dropdown direction=\\\"up\\\" isOpen={isOpenUp} toggle={() => setIsOpenUp(!isOpenUp)}>\\n        <DropdownToggle caret className=\\\"btn btn-falcon-default mr-2\\\">\\n          Dropup\\n        </DropdownToggle>\\n        <DropdownMenu>\\n          <DropdownItem header>Header</DropdownItem>\\n          <DropdownItem>Some Action</DropdownItem>\\n        </DropdownMenu>\\n      </Dropdown>\\n        <Dropdown direction=\\\"left\\\" isOpen={isOpenLeft} toggle={() => setIsOpenLeft(!isOpenLeft)}>\\n        <DropdownToggle caret className=\\\"btn btn-falcon-default mr-2\\\">\\n          Dropleft\\n        </DropdownToggle>\\n        <DropdownMenu>\\n          <DropdownItem header>Header</DropdownItem>\\n          <DropdownItem>Some Action</DropdownItem>\\n        </DropdownMenu>\\n      </Dropdown>\\n    </Flex>\\n  );\\n}\";var dropdownUncontrolledCode=\"<UncontrolledDropdown>\\n  <DropdownToggle caret>\\n    Dropdown\\n  </DropdownToggle>\\n  <DropdownMenu>\\n    <DropdownItem header>Header</DropdownItem>\\n    <DropdownItem disabled>Action</DropdownItem>\\n    <DropdownItem>Another Action</DropdownItem>\\n    <DropdownItem divider />\\n    <DropdownItem>Another Action</DropdownItem>\\n  </DropdownMenu>\\n</UncontrolledDropdown>\";var dropdownProperties=\"Dropdown.propTypes = {\\n  disabled: PropTypes.bool,\\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\\n  group: PropTypes.bool,\\n  isOpen: PropTypes.bool,\\n  // For Dropdown usage inside a Nav\\n  nav: PropTypes.bool,\\n  active: PropTypes.bool,\\n  // For Dropdown usage inside a Navbar (disables popper)\\n  inNavbar: PropTypes.bool,\\n  tag: PropTypes.string, //default: 'div' unless nav=true, then 'li'\\n  toggle: PropTypes.func,\\n  setActiveFromChild: PropTypes.bool\\n};\";var dropdownToggleProperties=\"DropdownToggle.propTypes = {\\n  caret: PropTypes.bool,\\n  color: PropTypes.string,\\n  className: PropTypes.string,\\n  disabled: PropTypes.bool,\\n  onClick: PropTypes.func,\\n  'data-toggle': PropTypes.string,\\n  'aria-haspopup': PropTypes.bool,\\n  // For DropdownToggle usage inside a Nav\\n  nav: PropTypes.bool,\\n  // Defaults to Button component\\n  tag: PropTypes.any\\n};\";var dropdownMenuProperties=\"DropdownMenu.propTypes = {\\n  tag: PropTypes.string,\\n  children: PropTypes.node.isRequired,\\n  right: PropTypes.bool,\\n  flip: PropTypes.bool, //default: true,\\n  className: PropTypes.string,\\n  cssModule: PropTypes.object,\\n  // Custom modifiers that are passed to DropdownMenu.js, see https://popper.js.org/popper-documentation.html#modifiers\\n  modifiers: PropTypes.object,\\n  persist: PropTypes.bool, //presist the popper, even when closed. See #779 for reasoning\\n  // passed to popper, see https://popper.js.org/popper-documentation.html#Popper.Defaults.positionFixed\\n  positionFixed: PropTypes.bool\\n};\";var dropdownItemProperties=\"DropdownItem.propTypes = {\\n  children: PropTypes.node,\\n  active: PropTypes.bool,\\n  disabled: PropTypes.bool,\\n  divider: PropTypes.bool,\\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\\n  header: PropTypes.bool,\\n  onClick: PropTypes.func,\\n  className: PropTypes.string,\\n  cssModule: PropTypes.object,\\n  toggle: PropTypes.bool //default: true\\n};\";var Dropdowns=function Dropdowns(){return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(PageHeader,{title:\"Dropdown\",description:\"Toggle contextual overlays for displaying lists of links and more with the Falcon dropdown plugin.\",className:\"mb-3\",children:/*#__PURE__*/_jsxs(Button,{tag:\"a\",href:\"https://reactstrap.github.io/components/dropdowns\",target:\"_blank\",color:\"link\",size:\"sm\",className:\"pl-0\",children:[\"Dropdowns on reactstrap\",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:\"chevron-right\",className:\"ml-1 fs--2\"})]})}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Example\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:dropdownCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsx(Card,{className:\"mb-3\",children:/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsx(FalconEditor,{code:dropdownProperties,hidePreview:true}),/*#__PURE__*/_jsx(FalconEditor,{code:dropdownToggleProperties,hidePreview:true}),/*#__PURE__*/_jsx(FalconEditor,{code:dropdownMenuProperties,hidePreview:true}),/*#__PURE__*/_jsx(FalconEditor,{code:dropdownItemProperties,hidePreview:true})]})}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Uncontrolled Dropdown\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:dropdownUncontrolledCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Alignment\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:dropdownAlignmentExample,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Sizing\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:dropdownSizingCode,language:\"jsx\"})})]}),/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(FalconCardHeader,{title:\"Direction\",light:false}),/*#__PURE__*/_jsx(CardBody,{className:\"bg-light\",children:/*#__PURE__*/_jsx(FalconEditor,{code:dropdownDirectionCode,scope:{Flex:Flex},language:\"jsx\"})})]})]});};export default Dropdowns;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/bootstrap-components/Dropdowns.js"],"names":["React","Fragment","Button","Card","CardBody","FontAwesomeIcon","PageHeader","FalconCardHeader","FalconEditor","Flex","dropdownCode","dropdownAlignmentExample","dropdownSizingCode","dropdownDirectionCode","dropdownUncontrolledCode","dropdownProperties","dropdownToggleProperties","dropdownMenuProperties","dropdownItemProperties","Dropdowns"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PageHeader from '../common/PageHeader';\nimport FalconCardHeader from '../common/FalconCardHeader';\nimport FalconEditor from '../common/FalconEditor';\nimport Flex from '../common/Flex';\n\nconst dropdownCode = `function dropdownExample() {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return (\n    <Dropdown isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\n      <DropdownToggle caret className=\"btn btn-falcon-default\">\n        Dropdown button\n      </DropdownToggle>\n      <DropdownMenu>\n        <DropdownItem header>Header</DropdownItem>\n        <DropdownItem>Some Action</DropdownItem>\n        <DropdownItem disabled>Action (disabled)</DropdownItem>\n        <DropdownItem divider />\n        <DropdownItem>Foo Action</DropdownItem>\n        <DropdownItem>Bar Action</DropdownItem>\n        <DropdownItem>Quo Action</DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n}`;\n\nconst dropdownAlignmentExample = `function dropdownAlignmentExample() {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  \n  return (\n    <Dropdown isOpen={dropdownOpen} toggle={() => setDropdownOpen(!dropdownOpen)}>\n      <DropdownToggle className=\"btn btn-falcon-default\" caret>\n         This dropdown's menu is aligned\n      </DropdownToggle>\n      <DropdownMenu right>\n        <DropdownItem header>Header</DropdownItem>\n        <DropdownItem disabled>Action</DropdownItem>\n        <DropdownItem>Another Action</DropdownItem>\n        <DropdownItem divider/>\n        <DropdownItem>Another Action</DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n}`;\n\nconst dropdownSizingCode = `function dropdownSizingExample() {\n  const [isOpenOne, setIsOpenOne] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isOpenThree, setIsOpenThree] = useState(false);\n  \n  return (\n    <Fragment>\n      <Dropdown group isOpen={isOpenOne} toggle={() => setIsOpenOne(!isOpenOne)}>\n        <DropdownToggle caret size=\"lg\" className=\"btn btn-falcon-default mb-2\">\n          Dropdown\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Dropdown isOpen={isOpenTwo} toggle={() => setIsOpenTwo(!isOpenTwo)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default mb-2\">\n          Dropdown\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Dropdown isOpen={isOpenThree} toggle={() => setIsOpenThree(!isOpenThree)}>\n        <DropdownToggle caret size=\"sm\" className=\"btn btn-falcon-default\">\n          Dropdown\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    </Fragment>\n  );\n}`;\n\nconst dropdownDirectionCode = `function dropdownDirectionExample() {\n  const [isOpenUp, setIsOpenUp] = useState(false);\n  const [isOpenLeft, setIsOpenLeft] = useState(false);\n  const [isOpenRight, setIsOpenRight] = useState(false);\n  \n  return (\n    <Flex justify=\"between\">\n      <Dropdown direction=\"right\" isOpen={isOpenRight} toggle={() => setIsOpenRight(!isOpenRight)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default\">\n          Dropright\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n       </Dropdown>\n      <Dropdown direction=\"up\" isOpen={isOpenUp} toggle={() => setIsOpenUp(!isOpenUp)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default mr-2\">\n          Dropup\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n        <Dropdown direction=\"left\" isOpen={isOpenLeft} toggle={() => setIsOpenLeft(!isOpenLeft)}>\n        <DropdownToggle caret className=\"btn btn-falcon-default mr-2\">\n          Dropleft\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Header</DropdownItem>\n          <DropdownItem>Some Action</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    </Flex>\n  );\n}`;\n\nconst dropdownUncontrolledCode = `<UncontrolledDropdown>\n  <DropdownToggle caret>\n    Dropdown\n  </DropdownToggle>\n  <DropdownMenu>\n    <DropdownItem header>Header</DropdownItem>\n    <DropdownItem disabled>Action</DropdownItem>\n    <DropdownItem>Another Action</DropdownItem>\n    <DropdownItem divider />\n    <DropdownItem>Another Action</DropdownItem>\n  </DropdownMenu>\n</UncontrolledDropdown>`;\n\nconst dropdownProperties = `Dropdown.propTypes = {\n  disabled: PropTypes.bool,\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\n  group: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  // For Dropdown usage inside a Nav\n  nav: PropTypes.bool,\n  active: PropTypes.bool,\n  // For Dropdown usage inside a Navbar (disables popper)\n  inNavbar: PropTypes.bool,\n  tag: PropTypes.string, //default: 'div' unless nav=true, then 'li'\n  toggle: PropTypes.func,\n  setActiveFromChild: PropTypes.bool\n};`;\n\nconst dropdownToggleProperties = `DropdownToggle.propTypes = {\n  caret: PropTypes.bool,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  'data-toggle': PropTypes.string,\n  'aria-haspopup': PropTypes.bool,\n  // For DropdownToggle usage inside a Nav\n  nav: PropTypes.bool,\n  // Defaults to Button component\n  tag: PropTypes.any\n};`;\nconst dropdownMenuProperties = `DropdownMenu.propTypes = {\n  tag: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  right: PropTypes.bool,\n  flip: PropTypes.bool, //default: true,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  // Custom modifiers that are passed to DropdownMenu.js, see https://popper.js.org/popper-documentation.html#modifiers\n  modifiers: PropTypes.object,\n  persist: PropTypes.bool, //presist the popper, even when closed. See #779 for reasoning\n  // passed to popper, see https://popper.js.org/popper-documentation.html#Popper.Defaults.positionFixed\n  positionFixed: PropTypes.bool\n};`;\n\nconst dropdownItemProperties = `DropdownItem.propTypes = {\n  children: PropTypes.node,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  divider: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  header: PropTypes.bool,\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  toggle: PropTypes.bool //default: true\n};`;\n\nconst Dropdowns = () => (\n  <Fragment>\n    <PageHeader\n      title=\"Dropdown\"\n      description=\"Toggle contextual overlays for displaying lists of links and more with the Falcon dropdown plugin.\"\n      className=\"mb-3\"\n    >\n      <Button\n        tag=\"a\"\n        href=\"https://reactstrap.github.io/components/dropdowns\"\n        target=\"_blank\"\n        color=\"link\"\n        size=\"sm\"\n        className=\"pl-0\"\n      >\n        Dropdowns on reactstrap\n        <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--2\" />\n      </Button>\n    </PageHeader>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Example\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={dropdownCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <CardBody>\n        <FalconEditor code={dropdownProperties} hidePreview />\n        <FalconEditor code={dropdownToggleProperties} hidePreview />\n        <FalconEditor code={dropdownMenuProperties} hidePreview />\n        <FalconEditor code={dropdownItemProperties} hidePreview />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Uncontrolled Dropdown\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={dropdownUncontrolledCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Alignment\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={dropdownAlignmentExample} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card className=\"mb-3\">\n      <FalconCardHeader title=\"Sizing\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={dropdownSizingCode} language=\"jsx\" />\n      </CardBody>\n    </Card>\n    <Card>\n      <FalconCardHeader title=\"Direction\" light={false} />\n      <CardBody className=\"bg-light\">\n        <FalconEditor code={dropdownDirectionCode} scope={{ Flex }} language=\"jsx\" />\n      </CardBody>\n    </Card>\n  </Fragment>\n);\n\nexport default Dropdowns;\n"]},"metadata":{},"sourceType":"module"}