{"ast":null,"code":"import _slicedToArray from\"/workspace/GitP_Fal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment,useState}from'react';import{Link}from'react-router-dom';import{Badge,Card,CardBody,Col,DropdownItem,DropdownMenu,DropdownToggle,Row,Dropdown}from'reactstrap';import{breakpoints,isIterableArray,routesSlicer}from'../../helpers/utils';import{topNavbarBreakpoint}from'../../config';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var NavbarDropdownComponents=function NavbarDropdownComponents(_ref){var title=_ref.title,items=_ref.items,right=_ref.right,handleSetNavbarCollapsed=_ref.handleSetNavbarCollapsed;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),dropdownOpen=_useState2[0],setDropdownOpen=_useState2[1];var toggle=function toggle(){return setDropdownOpen(function(prevState){return!prevState;});};return/*#__PURE__*/_jsxs(Dropdown,{nav:true,inNavbar:true,isOpen:dropdownOpen,toggle:toggle,onMouseOver:function onMouseOver(){var windowWidth=window.innerWidth;if(windowWidth>=breakpoints[topNavbarBreakpoint]){setDropdownOpen(true);}},onMouseLeave:function onMouseLeave(){var windowWidth=window.innerWidth;if(windowWidth>=breakpoints[topNavbarBreakpoint]){setDropdownOpen(false);}},children:[/*#__PURE__*/_jsx(DropdownToggle,{nav:true,caret:true,children:title}),/*#__PURE__*/_jsx(DropdownMenu,{right:right,className:\"dropdown-menu-card mt-0\",children:isIterableArray(items)&&/*#__PURE__*/_jsx(Card,{className:\"navbar-card-components shadow-none\",children:/*#__PURE__*/_jsx(CardBody,{className:\"max-h-dropdown scrollbar px-0 py-2\",children:/*#__PURE__*/_jsx(\"div\",{className:\"nav flex-column\",children:items.map(function(groupItem,index){var NavItemGroup=routesSlicer({routes:groupItem.children,columns:4});return/*#__PURE__*/_jsxs(Fragment,{children:[index!==0&&/*#__PURE__*/_jsx(\"div\",{className:\"nav-link  py-1 text-900 font-weight-bold\",children:items[index].name}),/*#__PURE__*/_jsx(Row,{className:index+1===items.length?'mb-0':'mb-3',noGutters:true,children:NavItemGroup.map(function(navItems,i){return/*#__PURE__*/_jsx(Fragment,{children:/*#__PURE__*/_jsx(Col,{xs:6,xl:3,children:navItems.map(function(navItem,j){return/*#__PURE__*/_jsxs(DropdownItem,{tag:Link,to:navItem.to,onClick:handleSetNavbarCollapsed,children:[navItem.name,navItem.badge&&/*#__PURE__*/_jsx(Badge,{color:navItem.badge.color||'soft-success',pill:true,className:\"ml-2\",children:navItem.badge.text})]},\"\".concat(index,\"-\").concat(i,\"-\").concat(j));})})},\"\".concat(index,\"-\").concat(i));})})]},index);})})})})})]});};NavbarDropdownComponents.defaultProps={items:[],right:false};export default NavbarDropdownComponents;","map":{"version":3,"sources":["/workspace/GitP_Fal/src/components/navbar/NavbarDropdownComponents.js"],"names":["React","Fragment","useState","Link","Badge","Card","CardBody","Col","DropdownItem","DropdownMenu","DropdownToggle","Row","Dropdown","breakpoints","isIterableArray","routesSlicer","topNavbarBreakpoint","NavbarDropdownComponents","title","items","right","handleSetNavbarCollapsed","dropdownOpen","setDropdownOpen","toggle","prevState","windowWidth","window","innerWidth","map","groupItem","index","NavItemGroup","routes","children","columns","name","length","navItems","i","navItem","j","to","badge","color","text","defaultProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { Fragment, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Badge, Card, CardBody, Col, DropdownItem, DropdownMenu, DropdownToggle, Row, Dropdown } from 'reactstrap';\r\nimport { breakpoints, isIterableArray, routesSlicer } from '../../helpers/utils';\r\nimport { topNavbarBreakpoint } from '../../config';\r\n\r\nconst NavbarDropdownComponents = ({ title, items, right, handleSetNavbarCollapsed }) => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const toggle = () => setDropdownOpen(prevState => !prevState);\r\n\r\n  return (\r\n    <Dropdown\r\n      nav\r\n      inNavbar\r\n      isOpen={dropdownOpen}\r\n      toggle={toggle}\r\n      onMouseOver={() => {\r\n        let windowWidth = window.innerWidth;\r\n        if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\r\n          setDropdownOpen(true);\r\n        }\r\n      }}\r\n      onMouseLeave={() => {\r\n        let windowWidth = window.innerWidth;\r\n        if (windowWidth >= breakpoints[topNavbarBreakpoint]) {\r\n          setDropdownOpen(false);\r\n        }\r\n      }}\r\n    >\r\n      <DropdownToggle nav caret>\r\n        {title}\r\n      </DropdownToggle>\r\n      <DropdownMenu right={right} className=\"dropdown-menu-card mt-0\">\r\n        {isIterableArray(items) && (\r\n          <Card className=\"navbar-card-components shadow-none\">\r\n            <CardBody className=\"max-h-dropdown scrollbar px-0 py-2\">\r\n              <div className=\"nav flex-column\">\r\n                {items.map((groupItem, index) => {\r\n                  const NavItemGroup = routesSlicer({\r\n                    routes: groupItem.children,\r\n                    columns: 4\r\n                  });\r\n\r\n                  return (\r\n                    <Fragment key={index}>\r\n                      {index !== 0 && (\r\n                        <div className=\"nav-link  py-1 text-900 font-weight-bold\">{items[index].name}</div>\r\n                      )}\r\n                      <Row className={index + 1 === items.length ? 'mb-0' : 'mb-3'} noGutters>\r\n                        {NavItemGroup.map((navItems, i) => {\r\n                          return (\r\n                            <Fragment key={`${index}-${i}`}>\r\n                              <Col xs={6} xl={3}>\r\n                                {navItems.map((navItem, j) => {\r\n                                  return (\r\n                                    <DropdownItem\r\n                                      tag={Link}\r\n                                      to={navItem.to}\r\n                                      key={`${index}-${i}-${j}`}\r\n                                      onClick={handleSetNavbarCollapsed}\r\n                                    >\r\n                                      {navItem.name}\r\n                                      {navItem.badge && (\r\n                                        <Badge color={navItem.badge.color || 'soft-success'} pill className=\"ml-2\">\r\n                                          {navItem.badge.text}\r\n                                        </Badge>\r\n                                      )}\r\n                                    </DropdownItem>\r\n                                  );\r\n                                })}\r\n                              </Col>\r\n                            </Fragment>\r\n                          );\r\n                        })}\r\n                      </Row>\r\n                    </Fragment>\r\n                  );\r\n                })}\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n        )}\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nNavbarDropdownComponents.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  handleSetNavbarCollapsed: PropTypes.func.isRequired,\r\n  items: PropTypes.array,\r\n  right: PropTypes.bool\r\n};\r\n\r\nNavbarDropdownComponents.defaultProps = {\r\n  items: [],\r\n  right: false\r\n};\r\n\r\nexport default NavbarDropdownComponents;\r\n"]},"metadata":{},"sourceType":"module"}